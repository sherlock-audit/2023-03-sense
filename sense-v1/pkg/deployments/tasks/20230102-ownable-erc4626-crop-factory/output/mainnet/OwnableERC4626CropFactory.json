{
  "address": "0xe59835238e63a413b93Ba7B1fE65Bed583266F97",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_divider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_restrictedAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardsRecipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stake",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stakeSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minm",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxm",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "ifee",
              "type": "uint128"
            },
            {
              "internalType": "uint16",
              "name": "mode",
              "type": "uint16"
            },
            {
              "internalType": "uint64",
              "name": "tilt",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "guard",
              "type": "uint256"
            }
          ],
          "internalType": "struct BaseFactory.FactoryParams",
          "name": "_factoryParams",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_rlvFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPeriphery",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TargetNotSupported",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "RestrictedAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldRecipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRecipient",
          "type": "address"
        }
      ],
      "name": "RewardsRecipientChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rlvFactory",
          "type": "address"
        }
      ],
      "name": "RlvFactoryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "supported",
          "type": "bool"
        }
      ],
      "name": "TargetSupported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "UserTrustUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_LEVEL",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_USD_PRICEFEED",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "deployAdapter",
      "outputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "divider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryParams",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stake",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxm",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "ifee",
          "type": "uint128"
        },
        {
          "internalType": "uint16",
          "name": "mode",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "tilt",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "guard",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTrusted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "restrictedAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reward",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rlvFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_trusted",
          "type": "bool"
        }
      ],
      "name": "setAdapterTrusted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "setIsTrusted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_restrictedAdmin",
          "type": "address"
        }
      ],
      "name": "setRestrictedAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "setRewardsRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rlvFactory",
          "type": "address"
        }
      ],
      "name": "setRlvFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "supported",
          "type": "bool"
        }
      ],
      "name": "supportTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_targets",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "supported",
          "type": "bool"
        }
      ],
      "name": "supportTargets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedTargets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x96081def32a21983228dd09c7cb7e592b33e7feca2855dfdb5e9c9ae26be186a",
  "receipt": {
    "to": null,
    "from": "0x59A181710F926Eae6FddfbF27a14259E8DD00cA2",
    "contractAddress": "0xe59835238e63a413b93Ba7B1fE65Bed583266F97",
    "transactionIndex": 159,
    "gasUsed": "4266087",
    "logsBloom": "0x
    "blockHash": "0xf1773d3dee7dc35e58c7b34cb6c4cac51bd3fa733d3db42a53a45e78616af867",
    "transactionHash": "0x96081def32a21983228dd09c7cb7e592b33e7feca2855dfdb5e9c9ae26be186a",
    "logs": [
      {
        "transactionIndex": 159,
        "blockNumber": 16591849,
        "transactionHash": "0x96081def32a21983228dd09c7cb7e592b33e7feca2855dfdb5e9c9ae26be186a",
        "address": "0xe59835238e63a413b93Ba7B1fE65Bed583266F97",
        "topics": [
          "0xe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986",
          "0x00000000000000000000000059a181710f926eae6fddfbf27a14259e8dd00ca2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 422,
        "blockHash": "0xf1773d3dee7dc35e58c7b34cb6c4cac51bd3fa733d3db42a53a45e78616af867"
      }
    ],
    "blockNumber": 16591849,
    "cumulativeGasUsed": "22835198",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x86bA3E96Be68563E41c2f5769F1AF9fAf758e6E0",
    "0xDd76360C26Eaf63AFCF3a8d2c0121F13AE864D57",
    "0xDd76360C26Eaf63AFCF3a8d2c0121F13AE864D57",
    [
      "0x11D341d35BF95654BC7A9db59DBc557cCB4ea101",
      "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
      "250000000000000000",
      "2629800",
      "315576000",
      "500000000000000",
      0,
      0,
      "100000000000000000000000"
    ],
    "0x3b0f35bdd6da9e3b8513c58af8fdf231f60232e5"
  ],
  "numDeployments": 2,
  "solcInputHash": "dab9ae4babbda7c3778242e91642d7b7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_divider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_restrictedAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsRecipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxm\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"ifee\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"mode\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"tilt\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"guard\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseFactory.FactoryParams\",\"name\":\"_factoryParams\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_rlvFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPeriphery\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetNotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"RestrictedAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"RewardsRecipientChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rlvFactory\",\"type\":\"address\"}],\"name\":\"RlvFactoryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"name\":\"TargetSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"UserTrustUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_LEVEL\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_USD_PRICEFEED\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deployAdapter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxm\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"ifee\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"mode\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"tilt\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"guard\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTrusted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restrictedAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rlvFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_trusted\",\"type\":\"bool\"}],\"name\":\"setAdapterTrusted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"setIsTrusted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_restrictedAdmin\",\"type\":\"address\"}],\"name\":\"setRestrictedAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setRewardsRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rlvFactory\",\"type\":\"address\"}],\"name\":\"setRlvFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"name\":\"supportTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"name\":\"supportTargets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTargets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deployAdapter(address,bytes)\":{\"params\":{\"_target\":\"The target address\",\"data\":\"ABI encoded reward tokens address array\"}},\"setAdapterTrusted(address,address,bool)\":{\"details\":\"factory must already be a trusted address for the adapter\"},\"setRewardsRecipient(address)\":{\"details\":\"existing adapters rewards recipients will not be changed and can be done through `setRewardsRecipient` on each adapter contract\"},\"setRlvFactory(address)\":{\"params\":{\"_rlvFactory\":\"Address of the new factory\"}},\"supportTarget(address,bool)\":{\"params\":{\"_target\":\"The target address\",\"supported\":\"Whether the target should be supported or not\"}},\"supportTargets(address[],bool)\":{\"params\":{\"_targets\":\"Array of target addresses\",\"supported\":\"Whether the targets should be supported or not\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DEFAULT_LEVEL()\":{\"notice\":\"Sets level to `31` by default, which keeps all Divider lifecycle methods public (`issue`, `combine`, `collect`, etc), but not the `onRedeem` hook.\"},\"deployAdapter(address,bytes)\":{\"notice\":\"Deploys an OwnableERC4626Adapter contract\"},\"divider()\":{\"notice\":\"Sense core Divider address\"},\"factoryParams()\":{\"notice\":\"params for adapters deployed with this factory\"},\"restrictedAdmin()\":{\"notice\":\"Adapter admin address\"},\"rewardsRecipient()\":{\"notice\":\"Rewards recipient\"},\"rlvFactory()\":{\"notice\":\"Rolling Liquidity Vault Factory address\"},\"setAdapterTrusted(address,address,bool)\":{\"notice\":\"sets trusted address for an adapter\"},\"setRewardsRecipient(address)\":{\"notice\":\"Set factory rewards recipientall future deployed adapters will have the new rewards recipient\"},\"setRlvFactory(address)\":{\"notice\":\"Modify RLV Factory address\"},\"supportTarget(address,bool)\":{\"notice\":\"(Un)support target\"},\"supportTargets(address[],bool)\":{\"notice\":\"(Un)support multiple target at once\"}},\"notice\":\"Ownable Crop Factory contract that deploys Ownable Crop Adapters for Rolling Liquidity Vaults\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sense-finance/v1-core/src/adapters/abstract/factories/OwnableERC4626CropFactory.sol\":\"OwnableERC4626CropFactory\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363735393530393537393631\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@sense-finance/v1-core/src/Divider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n// External references\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { ReentrancyGuard } from \\\"solmate/src/utils/ReentrancyGuard.sol\\\";\\nimport { DateTime } from \\\"./external/DateTime.sol\\\";\\nimport { FixedMath } from \\\"./external/FixedMath.sol\\\";\\n\\n// Internal references\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\nimport { Levels } from \\\"@sense-finance/v1-utils/src/libs/Levels.sol\\\";\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\nimport { YT } from \\\"./tokens/YT.sol\\\";\\nimport { Token } from \\\"./tokens/Token.sol\\\";\\nimport { BaseAdapter as Adapter } from \\\"./adapters/abstract/BaseAdapter.sol\\\";\\n\\n/// @title Sense Divider: Divide Assets in Two\\n/// @author fedealconada + jparklev\\n/// @notice You can use this contract to issue, combine, and redeem Sense ERC20 Principal and Yield Tokens\\ncontract Divider is Trust, ReentrancyGuard, Pausable {\\n    using SafeTransferLib for ERC20;\\n    using FixedMath for uint256;\\n    using Levels for uint256;\\n\\n    /* ========== PUBLIC CONSTANTS ========== */\\n\\n    /// @notice Buffer before and after the actual maturity in which only the sponsor can settle the Series\\n    uint256 public constant SPONSOR_WINDOW = 3 hours;\\n\\n    /// @notice Buffer after the sponsor window in which anyone can settle the Series\\n    uint256 public constant SETTLEMENT_WINDOW = 3 hours;\\n\\n    /// @notice 5% issuance fee cap\\n    uint256 public constant ISSUANCE_FEE_CAP = 0.05e18;\\n\\n    /* ========== PUBLIC MUTABLE STORAGE ========== */\\n\\n    address public periphery;\\n\\n    /// @notice Sense community multisig\\n    address public immutable cup;\\n\\n    /// @notice Principal/Yield tokens deployer\\n    address public immutable tokenHandler;\\n\\n    /// @notice Permissionless flag\\n    bool public permissionless;\\n\\n    /// @notice Guarded launch flag\\n    bool public guarded = true;\\n\\n    /// @notice Number of adapters (including turned off)\\n    uint248 public adapterCounter;\\n\\n    /// @notice adapter ID -> adapter address\\n    mapping(uint256 => address) public adapterAddresses;\\n\\n    /// @notice adapter data\\n    mapping(address => AdapterMeta) public adapterMeta;\\n\\n    /// @notice adapter -> maturity -> Series\\n    mapping(address => mapping(uint256 => Series)) public series;\\n\\n    /// @notice adapter -> maturity -> user -> lscale (last scale)\\n    mapping(address => mapping(uint256 => mapping(address => uint256))) public lscales;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct Series {\\n        // Principal ERC20 token\\n        address pt;\\n        // Timestamp of series initialization\\n        uint48 issuance;\\n        // Yield ERC20 token\\n        address yt;\\n        // % of underlying principal initially reserved for Yield\\n        uint96 tilt;\\n        // Actor who initialized the Series\\n        address sponsor;\\n        // Tracks fees due to the series' settler\\n        uint256 reward;\\n        // Scale at issuance\\n        uint256 iscale;\\n        // Scale at maturity\\n        uint256 mscale;\\n        // Max scale value from this series' lifetime\\n        uint256 maxscale;\\n    }\\n\\n    struct AdapterMeta {\\n        // Adapter ID\\n        uint248 id;\\n        // Adapter enabled/disabled\\n        bool enabled;\\n        // Max amount of Target allowed to be issued\\n        uint256 guard;\\n        // Adapter level\\n        uint248 level;\\n    }\\n\\n    constructor(address _cup, address _tokenHandler) Trust(msg.sender) {\\n        cup = _cup;\\n        tokenHandler = _tokenHandler;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Enable an adapter\\n    /// @dev when permissionless is disabled, only the Periphery can onboard adapters\\n    /// @dev after permissionless is enabled, anyone can onboard adapters\\n    /// @param adapter Adapter's address\\n    function addAdapter(address adapter) external whenNotPaused {\\n        if (!permissionless && msg.sender != periphery) revert Errors.OnlyPermissionless();\\n        if (adapterMeta[adapter].id > 0 && !adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        _setAdapter(adapter, true);\\n    }\\n\\n    /// @notice Initializes a new Series\\n    /// @dev Deploys two ERC20 contracts, one for PTs and the other one for YTs\\n    /// @dev Transfers some fixed amount of stake asset to this contract\\n    /// @param adapter Adapter to associate with the Series\\n    /// @param maturity Maturity date for the new Series, in units of unix time\\n    /// @param sponsor Sponsor of the Series that puts up a token stake and receives the issuance fees\\n    function initSeries(\\n        address adapter,\\n        uint256 maturity,\\n        address sponsor\\n    ) external nonReentrant whenNotPaused returns (address pt, address yt) {\\n        if (periphery != msg.sender) revert Errors.OnlyPeriphery();\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (_exists(adapter, maturity)) revert Errors.DuplicateSeries();\\n        if (!_isValid(adapter, maturity)) revert Errors.InvalidMaturity();\\n\\n        // Transfer stake asset stake from caller to adapter\\n        (address target, address stake, uint256 stakeSize) = Adapter(adapter).getStakeAndTarget();\\n\\n        // Deploy Principal & Yield Tokens for this new Series\\n        (pt, yt) = TokenHandler(tokenHandler).deploy(adapter, adapterMeta[adapter].id, maturity);\\n\\n        // Initialize the new Series struct\\n        uint256 scale = Adapter(adapter).scale();\\n\\n        series[adapter][maturity].pt = pt;\\n        series[adapter][maturity].issuance = uint48(block.timestamp);\\n        series[adapter][maturity].yt = yt;\\n        series[adapter][maturity].tilt = uint96(Adapter(adapter).tilt());\\n        series[adapter][maturity].sponsor = sponsor;\\n        series[adapter][maturity].iscale = scale;\\n        series[adapter][maturity].maxscale = scale;\\n\\n        ERC20(stake).safeTransferFrom(msg.sender, adapter, stakeSize);\\n\\n        emit SeriesInitialized(adapter, maturity, pt, yt, sponsor, target);\\n    }\\n\\n    /// @notice Settles a Series and transfers the settlement reward to the caller\\n    /// @dev The Series' sponsor has a grace period where only they can settle the Series\\n    /// @dev After that, the reward becomes MEV\\n    /// @param adapter Adapter to associate with the Series\\n    /// @param maturity Maturity date for the new Series\\n    function settleSeries(address adapter, uint256 maturity) external nonReentrant whenNotPaused {\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n        if (_settled(adapter, maturity)) revert Errors.AlreadySettled();\\n        if (!_canBeSettled(adapter, maturity)) revert Errors.OutOfWindowBoundaries();\\n\\n        // The maturity scale value is all a Series needs for us to consider it \\\"settled\\\"\\n        uint256 mscale = Adapter(adapter).scale();\\n        series[adapter][maturity].mscale = mscale;\\n\\n        if (mscale > series[adapter][maturity].maxscale) {\\n            series[adapter][maturity].maxscale = mscale;\\n        }\\n\\n        // Reward the caller for doing the work of settling the Series at around the correct time\\n        (address target, address stake, uint256 stakeSize) = Adapter(adapter).getStakeAndTarget();\\n        ERC20(target).safeTransferFrom(adapter, msg.sender, series[adapter][maturity].reward);\\n        ERC20(stake).safeTransferFrom(adapter, msg.sender, stakeSize);\\n\\n        emit SeriesSettled(adapter, maturity, msg.sender);\\n    }\\n\\n    /// @notice Mint Principal & Yield Tokens of a specific Series\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series [unix time]\\n    /// @param tBal Balance of Target to deposit\\n    /// @dev The balance of PTs and YTs minted will be the same value in units of underlying (less fees)\\n    function issue(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 tBal\\n    ) external nonReentrant whenNotPaused returns (uint256 uBal) {\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n        if (_settled(adapter, maturity)) revert Errors.IssueOnSettle();\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.issueRestricted() && msg.sender != adapter) revert Errors.IssuanceRestricted();\\n\\n        ERC20 target = ERC20(Adapter(adapter).target());\\n\\n        // Take the issuance fee out of the deposited Target, and put it towards the settlement reward\\n        uint256 issuanceFee = Adapter(adapter).ifee();\\n        if (issuanceFee > ISSUANCE_FEE_CAP) revert Errors.IssuanceFeeCapExceeded();\\n        uint256 fee = tBal.fmul(issuanceFee);\\n\\n        unchecked {\\n            // Safety: bounded by the Target's total token supply\\n            series[adapter][maturity].reward += fee;\\n        }\\n        uint256 tBalSubFee = tBal - fee;\\n\\n        // Ensure the caller won't hit the issuance cap with this action\\n        unchecked {\\n            // Safety: bounded by the Target's total token supply\\n            if (guarded && target.balanceOf(adapter) + tBal > adapterMeta[address(adapter)].guard)\\n                revert Errors.GuardCapReached();\\n        }\\n\\n        // Update values on adapter\\n        Adapter(adapter).notify(msg.sender, tBalSubFee, true);\\n\\n        uint256 scale = level.collectDisabled() ? series[adapter][maturity].iscale : Adapter(adapter).scale();\\n\\n        // Determine the amount of Underlying equal to the Target being sent in (the principal)\\n        uBal = tBalSubFee.fmul(scale);\\n\\n        // If the caller has not collected on YT before, use the current scale, otherwise\\n        // use the harmonic mean of the last and the current scale value\\n        lscales[adapter][maturity][msg.sender] = lscales[adapter][maturity][msg.sender] == 0\\n            ? scale\\n            : _reweightLScale(\\n                adapter,\\n                maturity,\\n                YT(series[adapter][maturity].yt).balanceOf(msg.sender),\\n                uBal,\\n                msg.sender,\\n                scale\\n            );\\n\\n        // Mint equal amounts of PT and YT\\n        Token(series[adapter][maturity].pt).mint(msg.sender, uBal);\\n        YT(series[adapter][maturity].yt).mint(msg.sender, uBal);\\n\\n        target.safeTransferFrom(msg.sender, adapter, tBal);\\n\\n        emit Issued(adapter, maturity, uBal, msg.sender);\\n    }\\n\\n    /// @notice Reconstitute Target by burning PT and YT\\n    /// @dev Explicitly burns YTs before maturity, and implicitly does it at/after maturity through `_collect()`\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal Balance of PT and YT to burn\\n    function combine(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal\\n    ) external nonReentrant whenNotPaused returns (uint256 tBal) {\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.combineRestricted() && msg.sender != adapter) revert Errors.CombineRestricted();\\n\\n        // Burn the PT\\n        Token(series[adapter][maturity].pt).burn(msg.sender, uBal);\\n\\n        // Collect whatever excess is due\\n        uint256 collected = _collect(msg.sender, adapter, maturity, uBal, uBal, address(0));\\n\\n        uint256 cscale = series[adapter][maturity].mscale;\\n        bool settled = _settled(adapter, maturity);\\n        if (!settled) {\\n            // If it's not settled, then YT won't be burned automatically in `_collect()`\\n            YT(series[adapter][maturity].yt).burn(msg.sender, uBal);\\n            // If collect has been restricted, use the initial scale, otherwise use the current scale\\n            cscale = level.collectDisabled()\\n                ? series[adapter][maturity].iscale\\n                : lscales[adapter][maturity][msg.sender];\\n        }\\n\\n        // Convert from units of Underlying to units of Target\\n        tBal = uBal.fdiv(cscale);\\n        ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, msg.sender, tBal);\\n\\n        // Notify only when Series is not settled as when it is, the _collect() call above would trigger a _redeemYT which will call notify\\n        if (!settled) Adapter(adapter).notify(msg.sender, tBal, false);\\n        unchecked {\\n            // Safety: bounded by the Target's total token supply\\n            tBal += collected;\\n        }\\n        emit Combined(adapter, maturity, tBal, msg.sender);\\n    }\\n\\n    /// @notice Burn PT of a Series once it's been settled\\n    /// @dev The balance of redeemable Target is a function of the change in Scale\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal Amount of PT to burn, which should be equivalent to the amount of Underlying owed to the caller\\n    function redeem(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal\\n    ) external nonReentrant whenNotPaused returns (uint256 tBal) {\\n        // If a Series is settled, we know that it must have existed as well, so that check is unnecessary\\n        if (!_settled(adapter, maturity)) revert Errors.NotSettled();\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.redeemRestricted() && msg.sender != adapter) revert Errors.RedeemRestricted();\\n\\n        // Burn the caller's PT\\n        Token(series[adapter][maturity].pt).burn(msg.sender, uBal);\\n\\n        // Principal Token holder's share of the principal = (1 - part of the principal that belongs to Yield)\\n        uint256 zShare = FixedMath.WAD - series[adapter][maturity].tilt;\\n\\n        // If Principal Token are at a loss and Yield have some principal to help cover the shortfall,\\n        // take what we can from Yield Token's principal\\n        if (series[adapter][maturity].mscale.fdiv(series[adapter][maturity].maxscale) >= zShare) {\\n            tBal = (uBal * zShare) / series[adapter][maturity].mscale;\\n        } else {\\n            tBal = uBal.fdiv(series[adapter][maturity].maxscale);\\n        }\\n\\n        if (!level.redeemHookDisabled()) {\\n            Adapter(adapter).onRedeem(uBal, series[adapter][maturity].mscale, series[adapter][maturity].maxscale, tBal);\\n        }\\n\\n        ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, msg.sender, tBal);\\n        emit PTRedeemed(adapter, maturity, tBal);\\n    }\\n\\n    function collect(\\n        address usr,\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBalTransfer,\\n        address to\\n    ) external nonReentrant onlyYT(adapter, maturity) whenNotPaused returns (uint256 collected) {\\n        uint256 uBal = YT(msg.sender).balanceOf(usr);\\n        return _collect(usr, adapter, maturity, uBal, uBalTransfer > 0 ? uBalTransfer : uBal, to);\\n    }\\n\\n    /// @notice Collect YT excess before, at, or after maturity\\n    /// @dev If `to` is set, we copy the lscale value from usr to this address\\n    /// @param usr User who's collecting for their YTs\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal yield Token balance\\n    /// @param uBalTransfer original transfer value\\n    /// @param to address to set the lscale value from usr\\n    function _collect(\\n        address usr,\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal,\\n        uint256 uBalTransfer,\\n        address to\\n    ) internal returns (uint256 collected) {\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n\\n        // If the adapter is disabled, its Yield Token can only collect\\n        // if associated Series has been settled, which implies that an admin\\n        // has backfilled it\\n        if (!adapterMeta[adapter].enabled && !_settled(adapter, maturity)) revert Errors.InvalidAdapter();\\n\\n        Series memory _series = series[adapter][maturity];\\n\\n        // Get the scale value from the last time this holder collected (default to maturity)\\n        uint256 lscale = lscales[adapter][maturity][usr];\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.collectDisabled()) {\\n            // If this Series has been settled, we ensure everyone's YT will\\n            // collect yield accrued since issuance\\n            if (_settled(adapter, maturity)) {\\n                lscale = series[adapter][maturity].iscale;\\n                // If the Series is not settled, we ensure no collections can happen\\n            } else {\\n                return 0;\\n            }\\n        }\\n\\n        // If the Series has been settled, this should be their last collect, so redeem the user's Yield Tokens for them\\n        if (_settled(adapter, maturity)) {\\n            _redeemYT(usr, adapter, maturity, uBal);\\n        } else {\\n            // If we're not settled and we're past maturity + the sponsor window,\\n            // anyone can settle this Series so revert until someone does\\n            if (block.timestamp > maturity + SPONSOR_WINDOW) {\\n                revert Errors.CollectNotSettled();\\n                // Otherwise, this is a valid pre-settlement collect and we need to determine the scale value\\n            } else {\\n                uint256 cscale = Adapter(adapter).scale();\\n                // If this is larger than the largest scale we've seen for this Series, use it\\n                if (cscale > _series.maxscale) {\\n                    _series.maxscale = cscale;\\n                    lscales[adapter][maturity][usr] = cscale;\\n                    // If not, use the previously noted max scale value\\n                } else {\\n                    lscales[adapter][maturity][usr] = _series.maxscale;\\n                }\\n            }\\n        }\\n\\n        // Determine how much underlying has accrued since the last time this user collected, in units of Target.\\n        // (Or take the last time as issuance if they haven't yet)\\n        //\\n        // Reminder: `Underlying / Scale = Target`\\n        // So the following equation is saying, for some amount of Underlying `u`:\\n        // \\\"Balance of Target that equaled `u` at the last collection _minus_ Target that equals `u` now\\\"\\n        //\\n        // Because maxscale must be increasing, the Target balance needed to equal `u` decreases, and that \\\"excess\\\"\\n        // is what Yield holders are collecting\\n        uint256 tBalNow = uBal.fdivUp(_series.maxscale); // preventive round-up towards the protocol\\n        uint256 tBalPrev = uBal.fdiv(lscale);\\n        unchecked {\\n            collected = tBalPrev > tBalNow ? tBalPrev - tBalNow : 0;\\n        }\\n        ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, usr, collected);\\n        Adapter(adapter).notify(usr, collected, false); // Distribute reward tokens\\n\\n        // If this collect is a part of a token transfer to another address, set the receiver's\\n        // last collection to a synthetic scale weighted based on the scale on their last collect,\\n        // the time elapsed, and the current scale\\n        if (to != address(0)) {\\n            uint256 ytBal = YT(_series.yt).balanceOf(to);\\n            // If receiver holds yields, we set lscale to a computed \\\"synthetic\\\" lscales value that,\\n            // for the updated yield balance, still assigns the correct amount of yield.\\n            lscales[adapter][maturity][to] = ytBal > 0\\n                ? _reweightLScale(adapter, maturity, ytBal, uBalTransfer, to, _series.maxscale)\\n                : _series.maxscale;\\n            uint256 tBalTransfer = uBalTransfer.fdiv(_series.maxscale);\\n            Adapter(adapter).notify(usr, tBalTransfer, false);\\n            Adapter(adapter).notify(to, tBalTransfer, true);\\n        }\\n        series[adapter][maturity] = _series;\\n\\n        emit Collected(adapter, maturity, collected);\\n    }\\n\\n    /// @notice calculate the harmonic mean of the current scale and the last scale,\\n    /// weighted by amounts associated with each\\n    function _reweightLScale(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 ytBal,\\n        uint256 uBal,\\n        address receiver,\\n        uint256 scale\\n    ) internal view returns (uint256) {\\n        // Target Decimals * 18 Decimals [from fdiv] / (Target Decimals * 18 Decimals [from fdiv] / 18 Decimals)\\n        // = 18 Decimals, which is the standard for scale values\\n        return (ytBal + uBal).fdiv((ytBal.fdiv(lscales[adapter][maturity][receiver]) + uBal.fdiv(scale)));\\n    }\\n\\n    function _redeemYT(\\n        address usr,\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal\\n    ) internal {\\n        // Burn the users's YTs\\n        YT(series[adapter][maturity].yt).burn(usr, uBal);\\n\\n        // Default principal for a YT\\n        uint256 tBal = 0;\\n\\n        // Principal Token holder's share of the principal = (1 - part of the principal that belongs to Yield Tokens)\\n        uint256 zShare = FixedMath.WAD - series[adapter][maturity].tilt;\\n\\n        // If PTs are at a loss and YTs had their principal cut to help cover the shortfall,\\n        // calculate how much YTs have left\\n        if (series[adapter][maturity].mscale.fdiv(series[adapter][maturity].maxscale) >= zShare) {\\n            tBal = uBal.fdiv(series[adapter][maturity].maxscale) - (uBal * zShare) / series[adapter][maturity].mscale;\\n            ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, usr, tBal);\\n        }\\n\\n        // Always notify the Adapter of the full Target balance that will no longer\\n        // have its rewards distributed\\n        Adapter(adapter).notify(usr, uBal.fdivUp(series[adapter][maturity].maxscale), false);\\n\\n        emit YTRedeemed(adapter, maturity, tBal);\\n    }\\n\\n    /* ========== ADMIN ========== */\\n\\n    /// @notice Enable or disable a adapter\\n    /// @param adapter Adapter's address\\n    /// @param isOn Flag setting this adapter to enabled or disabled\\n    function setAdapter(address adapter, bool isOn) public requiresTrust {\\n        _setAdapter(adapter, isOn);\\n    }\\n\\n    /// @notice Set adapter's guard\\n    /// @param adapter Adapter address\\n    /// @param cap The max target that can be deposited on the Adapter\\n    function setGuard(address adapter, uint256 cap) external requiresTrust {\\n        adapterMeta[adapter].guard = cap;\\n        emit GuardChanged(adapter, cap);\\n    }\\n\\n    /// @notice Set guarded mode\\n    /// @param _guarded bool\\n    function setGuarded(bool _guarded) external requiresTrust {\\n        guarded = _guarded;\\n        emit GuardedChanged(_guarded);\\n    }\\n\\n    /// @notice Set periphery's contract\\n    /// @param _periphery Target address\\n    function setPeriphery(address _periphery) external requiresTrust {\\n        periphery = _periphery;\\n        emit PeripheryChanged(_periphery);\\n    }\\n\\n    /// @notice Set paused flag\\n    /// @param _paused boolean\\n    function setPaused(bool _paused) external requiresTrust {\\n        _paused ? _pause() : _unpause();\\n    }\\n\\n    /// @notice Set permissioless mode\\n    /// @param _permissionless bool\\n    function setPermissionless(bool _permissionless) external requiresTrust {\\n        permissionless = _permissionless;\\n        emit PermissionlessChanged(_permissionless);\\n    }\\n\\n    /// @notice Backfill a Series' Scale value at maturity if keepers failed to settle it\\n    /// @param adapter Adapter's address\\n    /// @param maturity Maturity date for the Series\\n    /// @param mscale Value to set as the Series' Scale value at maturity\\n    /// @param _usrs Values to set on lscales mapping\\n    /// @param _lscales Values to set on lscales mapping\\n    function backfillScale(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 mscale,\\n        address[] calldata _usrs,\\n        uint256[] calldata _lscales\\n    ) external requiresTrust {\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n\\n        uint256 cutoff = maturity + SPONSOR_WINDOW + SETTLEMENT_WINDOW;\\n        // Admin can never backfill before maturity\\n        if (block.timestamp <= cutoff) revert Errors.OutOfWindowBoundaries();\\n\\n        // Set user's last scale values the Series (needed for the `collect` method)\\n        for (uint256 i = 0; i < _usrs.length; i++) {\\n            lscales[adapter][maturity][_usrs[i]] = _lscales[i];\\n        }\\n\\n        if (mscale > 0) {\\n            Series memory _series = series[adapter][maturity];\\n            // Set the maturity scale for the Series (needed for `redeem` methods)\\n            series[adapter][maturity].mscale = mscale;\\n            if (mscale > _series.maxscale) {\\n                series[adapter][maturity].maxscale = mscale;\\n            }\\n\\n            (address target, address stake, uint256 stakeSize) = Adapter(adapter).getStakeAndTarget();\\n\\n            address stakeDst = adapterMeta[adapter].enabled ? cup : _series.sponsor;\\n            ERC20(target).safeTransferFrom(adapter, cup, _series.reward);\\n            series[adapter][maturity].reward = 0;\\n            ERC20(stake).safeTransferFrom(adapter, stakeDst, stakeSize);\\n        }\\n\\n        emit Backfilled(adapter, maturity, mscale, _usrs, _lscales);\\n    }\\n\\n    /* ========== INTERNAL VIEWS ========== */\\n\\n    function _exists(address adapter, uint256 maturity) internal view returns (bool) {\\n        return series[adapter][maturity].pt != address(0);\\n    }\\n\\n    function _settled(address adapter, uint256 maturity) internal view returns (bool) {\\n        return series[adapter][maturity].mscale > 0;\\n    }\\n\\n    function _canBeSettled(address adapter, uint256 maturity) internal view returns (bool) {\\n        uint256 cutoff = maturity + SPONSOR_WINDOW + SETTLEMENT_WINDOW;\\n        // If the sender is the sponsor for the Series\\n        if (msg.sender == series[adapter][maturity].sponsor) {\\n            return maturity - SPONSOR_WINDOW <= block.timestamp && cutoff >= block.timestamp;\\n        } else {\\n            return maturity + SPONSOR_WINDOW < block.timestamp && cutoff >= block.timestamp;\\n        }\\n    }\\n\\n    function _isValid(address adapter, uint256 maturity) internal view returns (bool) {\\n        (uint256 minm, uint256 maxm) = Adapter(adapter).getMaturityBounds();\\n        if (maturity < block.timestamp + minm || maturity > block.timestamp + maxm) return false;\\n        (, , uint256 day, uint256 hour, uint256 minute, uint256 second) = DateTime.timestampToDateTime(maturity);\\n\\n        if (hour != 0 || minute != 0 || second != 0) return false;\\n        uint256 mode = Adapter(adapter).mode();\\n        if (mode == 0) {\\n            return day == 1;\\n        }\\n        if (mode == 1) {\\n            return DateTime.getDayOfWeek(maturity) == 1;\\n        }\\n        return false;\\n    }\\n\\n    /* ========== INTERNAL UTILS ========== */\\n\\n    function _setAdapter(address adapter, bool isOn) internal {\\n        AdapterMeta memory am = adapterMeta[adapter];\\n        if (am.enabled == isOn) revert Errors.ExistingValue();\\n        am.enabled = isOn;\\n\\n        // If this adapter is being added for the first time\\n        if (isOn && am.id == 0) {\\n            am.id = ++adapterCounter;\\n            adapterAddresses[am.id] = adapter;\\n        }\\n\\n        // Set level and target (can only be done once);\\n        am.level = uint248(Adapter(adapter).level());\\n        adapterMeta[adapter] = am;\\n        emit AdapterChanged(adapter, am.id, isOn);\\n    }\\n\\n    /* ========== PUBLIC GETTERS ========== */\\n\\n    /// @notice Returns address of Principal Token\\n    function pt(address adapter, uint256 maturity) public view returns (address) {\\n        return series[adapter][maturity].pt;\\n    }\\n\\n    /// @notice Returns address of Yield Token\\n    function yt(address adapter, uint256 maturity) public view returns (address) {\\n        return series[adapter][maturity].yt;\\n    }\\n\\n    function mscale(address adapter, uint256 maturity) public view returns (uint256) {\\n        return series[adapter][maturity].mscale;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyYT(address adapter, uint256 maturity) {\\n        if (series[adapter][maturity].yt != msg.sender) revert Errors.OnlyYT();\\n        _;\\n    }\\n\\n    /* ========== LOGS ========== */\\n\\n    /// @notice Admin\\n    event Backfilled(\\n        address indexed adapter,\\n        uint256 indexed maturity,\\n        uint256 mscale,\\n        address[] _usrs,\\n        uint256[] _lscales\\n    );\\n    event GuardChanged(address indexed adapter, uint256 cap);\\n    event AdapterChanged(address indexed adapter, uint256 indexed id, bool indexed isOn);\\n    event PeripheryChanged(address indexed periphery);\\n\\n    /// @notice Series lifecycle\\n    /// *---- beginning\\n    event SeriesInitialized(\\n        address adapter,\\n        uint256 indexed maturity,\\n        address pt,\\n        address yt,\\n        address indexed sponsor,\\n        address indexed target\\n    );\\n    /// -***- middle\\n    event Issued(address indexed adapter, uint256 indexed maturity, uint256 balance, address indexed sender);\\n    event Combined(address indexed adapter, uint256 indexed maturity, uint256 balance, address indexed sender);\\n    event Collected(address indexed adapter, uint256 indexed maturity, uint256 collected);\\n    /// ----* end\\n    event SeriesSettled(address indexed adapter, uint256 indexed maturity, address indexed settler);\\n    event PTRedeemed(address indexed adapter, uint256 indexed maturity, uint256 redeemed);\\n    event YTRedeemed(address indexed adapter, uint256 indexed maturity, uint256 redeemed);\\n    /// *----* misc\\n    event GuardedChanged(bool indexed guarded);\\n    event PermissionlessChanged(bool indexed permissionless);\\n}\\n\\ncontract TokenHandler is Trust {\\n    /// @notice Program state\\n    address public divider;\\n\\n    constructor() Trust(msg.sender) {}\\n\\n    function init(address _divider) external requiresTrust {\\n        if (divider != address(0)) revert Errors.AlreadyInitialized();\\n        divider = _divider;\\n    }\\n\\n    function deploy(\\n        address adapter,\\n        uint248 id,\\n        uint256 maturity\\n    ) external returns (address pt, address yt) {\\n        if (msg.sender != divider) revert Errors.OnlyDivider();\\n\\n        ERC20 target = ERC20(Adapter(adapter).target());\\n        uint8 decimals = target.decimals();\\n        string memory symbol = target.symbol();\\n        (string memory d, string memory m, string memory y) = DateTime.toDateString(maturity);\\n        string memory date = DateTime.format(maturity);\\n        string memory datestring = string(abi.encodePacked(d, \\\"-\\\", m, \\\"-\\\", y));\\n        string memory adapterId = DateTime.uintToString(id);\\n        pt = address(\\n            new Token(\\n                string(abi.encodePacked(date, \\\" \\\", symbol, \\\" Sense Principal Token, A\\\", adapterId)),\\n                string(abi.encodePacked(\\\"sP-\\\", symbol, \\\":\\\", datestring, \\\":\\\", adapterId)),\\n                decimals,\\n                divider\\n            )\\n        );\\n\\n        yt = address(\\n            new YT(\\n                adapter,\\n                maturity,\\n                string(abi.encodePacked(date, \\\" \\\", symbol, \\\" Sense Yield Token, A\\\", adapterId)),\\n                string(abi.encodePacked(\\\"sY-\\\", symbol, \\\":\\\", datestring, \\\":\\\", adapterId)),\\n                decimals,\\n                divider\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf6844d67e70c2f11522133173ed85cfaf94d2bf6f2bc35667af63a46585f855f\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/BaseAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n// External references\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { IERC3156FlashLender } from \\\"../../external/flashloan/IERC3156FlashLender.sol\\\";\\nimport { IERC3156FlashBorrower } from \\\"../../external/flashloan/IERC3156FlashBorrower.sol\\\";\\n\\n// Internal references\\nimport { Divider } from \\\"../../Divider.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\n/// @title Assign value to Target tokens\\nabstract contract BaseAdapter is IERC3156FlashLender {\\n    using SafeTransferLib for ERC20;\\n\\n    /* ========== CONSTANTS ========== */\\n\\n    bytes32 public constant CALLBACK_SUCCESS = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    /* ========== PUBLIC IMMUTABLES ========== */\\n\\n    /// @notice Sense core Divider address\\n    address public immutable divider;\\n\\n    /// @notice Target token to divide\\n    address public immutable target;\\n\\n    /// @notice Underlying for the Target\\n    address public immutable underlying;\\n\\n    /// @notice Issuance fee\\n    uint128 public immutable ifee;\\n\\n    /// @notice adapter params\\n    AdapterParams public adapterParams;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct AdapterParams {\\n        /// @notice Oracle address\\n        address oracle;\\n        /// @notice Token to stake at issuance\\n        address stake;\\n        /// @notice Amount to stake at issuance\\n        uint256 stakeSize;\\n        /// @notice Min maturity (seconds after block.timstamp)\\n        uint256 minm;\\n        /// @notice Max maturity (seconds after block.timstamp)\\n        uint256 maxm;\\n        /// @notice WAD number representing the percentage of the total\\n        /// principal that's set aside for Yield Tokens (e.g. 0.1e18 means that 10% of the principal is reserved).\\n        /// @notice If `0`, it means no principal is set aside for Yield Tokens\\n        uint64 tilt;\\n        /// @notice The number this function returns will be used to determine its access by checking for binary\\n        /// digits using the following scheme:\\u00a0<onRedeem(y/n)><collect(y/n)><combine(y/n)><issue(y/n)>\\n        /// (e.g. 0101 enables `collect` and `issue`, but not `combine`)\\n        uint48 level;\\n        /// @notice 0 for monthly, 1 for weekly\\n        uint16 mode;\\n    }\\n\\n    /* ========== METADATA STORAGE ========== */\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    constructor(\\n        address _divider,\\n        address _target,\\n        address _underlying,\\n        uint128 _ifee,\\n        AdapterParams memory _adapterParams\\n    ) {\\n        divider = _divider;\\n        target = _target;\\n        underlying = _underlying;\\n        ifee = _ifee;\\n        adapterParams = _adapterParams;\\n\\n        name = string(abi.encodePacked(ERC20(_target).name(), \\\" Adapter\\\"));\\n        symbol = string(abi.encodePacked(ERC20(_target).symbol(), \\\"-adapter\\\"));\\n\\n        ERC20(_target).safeApprove(divider, type(uint256).max);\\n        ERC20(_adapterParams.stake).safeApprove(divider, type(uint256).max);\\n    }\\n\\n    /// @notice Loan `amount` target to `receiver`, and takes it back after the callback.\\n    /// @param receiver The contract receiving target, needs to implement the\\n    /// `onFlashLoan(address user, address adapter, uint256 maturity, uint256 amount)` interface.\\n    /// @param amount The amount of target lent.\\n    /// @param data (encoded adapter address, maturity and YT amount the use has sent in)\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address, /* fee */\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool) {\\n        if (Divider(divider).periphery() != msg.sender) revert Errors.OnlyPeriphery();\\n        ERC20(target).safeTransfer(address(receiver), amount);\\n        bytes32 keccak = IERC3156FlashBorrower(receiver).onFlashLoan(msg.sender, target, amount, 0, data);\\n        if (keccak != CALLBACK_SUCCESS) revert Errors.FlashCallbackFailed();\\n        ERC20(target).safeTransferFrom(address(receiver), address(this), amount);\\n        return true;\\n    }\\n\\n    /* ========== REQUIRED VALUE GETTERS ========== */\\n\\n    /// @notice Calculate and return this adapter's Scale value for the current timestamp. To be overriden by child contracts\\n    /// @dev For some Targets, such as cTokens, this is simply the exchange rate, or `supply cToken / supply underlying`\\n    /// @dev For other Targets, such as AMM LP shares, specialized logic will be required\\n    /// @dev This function _must_ return a WAD number representing the current exchange rate\\n    /// between the Target and the Underlying.\\n    /// @return value WAD Scale value\\n    function scale() external virtual returns (uint256);\\n\\n    /// @notice Cached scale value getter\\n    /// @dev For situations where you need scale from a view function\\n    function scaleStored() external view virtual returns (uint256);\\n\\n    /// @notice Returns the current price of the underlying in ETH terms\\n    function getUnderlyingPrice() external view virtual returns (uint256);\\n\\n    /* ========== REQUIRED UTILITIES ========== */\\n\\n    /// @notice Deposits underlying `amount`in return for target. Must be overriden by child contracts\\n    /// @param amount Underlying amount\\n    /// @return amount of target returned\\n    function wrapUnderlying(uint256 amount) external virtual returns (uint256);\\n\\n    /// @notice Deposits target `amount`in return for underlying. Must be overriden by child contracts\\n    /// @param amount Target amount\\n    /// @return amount of underlying returned\\n    function unwrapTarget(uint256 amount) external virtual returns (uint256);\\n\\n    function flashFee(address token, uint256) external view returns (uint256) {\\n        if (token != target) revert Errors.TokenNotSupported();\\n        return 0;\\n    }\\n\\n    function maxFlashLoan(address token) external view override returns (uint256) {\\n        return ERC20(token).balanceOf(address(this));\\n    }\\n\\n    /* ========== OPTIONAL HOOKS ========== */\\n\\n    /// @notice Notification whenever the Divider adds or removes Target\\n    function notify(\\n        address, /* usr */\\n        uint256, /* amt */\\n        bool /* join */\\n    ) public virtual {\\n        return;\\n    }\\n\\n    /// @notice Hook called whenever a user redeems PT\\n    function onRedeem(\\n        uint256, /* uBal */\\n        uint256, /* mscale */\\n        uint256, /* maxscale */\\n        uint256 /* tBal */\\n    ) public virtual {\\n        return;\\n    }\\n\\n    /* ========== PUBLIC STORAGE ACCESSORS ========== */\\n\\n    function getMaturityBounds() external view virtual returns (uint256, uint256) {\\n        return (adapterParams.minm, adapterParams.maxm);\\n    }\\n\\n    function getStakeAndTarget()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        return (target, adapterParams.stake, adapterParams.stakeSize);\\n    }\\n\\n    function mode() external view returns (uint256) {\\n        return adapterParams.mode;\\n    }\\n\\n    function tilt() external view returns (uint256) {\\n        return adapterParams.tilt;\\n    }\\n\\n    function level() external view returns (uint256) {\\n        return adapterParams.level;\\n    }\\n}\\n\",\"keccak256\":\"0xda0e2780d7f4c37511bd3fffbcef76df3b5b7f6818db482d2e5e341048af9c0b\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/IClaimer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\ninterface IClaimer {\\n    /// @dev Claims rewards on protocol.\\n    function claim() external;\\n}\\n\",\"keccak256\":\"0x34b1d0922bcf9c57b57e36fa9581292f761820c590bfa2ac10494e6d1baed954\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n/// @title IPriceFeed\\n/// @notice Returns prices of underlying tokens\\n/// @author Taken from: https://github.com/Rari-Capital/fuse-v1/blob/development/src/oracles/BasePriceOracle.sol\\ninterface IPriceFeed {\\n    /// @notice Get the price of an underlying asset.\\n    /// @param underlying The underlying asset to get the price of.\\n    /// @return price The underlying asset price in ETH as a mantissa (scaled by 1e18).\\n    /// Zero means the price is unavailable.\\n    function price(address underlying) external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0x808a8bd98176b1ceebaf17d2dd8dfe5f13de0539245a0719a96968440da1e974\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/erc4626/ERC4626Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n// External references\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport { ERC4626 } from \\\"solmate/src/mixins/ERC4626.sol\\\";\\nimport { SafeTransferLib } from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\n// Internal references\\nimport { MasterPriceOracle } from \\\"../../implementations/oracles/MasterPriceOracle.sol\\\";\\nimport { FixedMath } from \\\"../../../external/FixedMath.sol\\\";\\nimport { BaseAdapter } from \\\"../BaseAdapter.sol\\\";\\nimport { ExtractableReward } from \\\"../extensions/ExtractableReward.sol\\\";\\n\\n/// @notice Adapter contract for ERC4626 Vaults\\ncontract ERC4626Adapter is BaseAdapter, ExtractableReward {\\n    using SafeTransferLib for ERC20;\\n    using FixedMath for uint256;\\n\\n    address public constant RARI_MASTER_ORACLE = 0x1887118E49e0F4A78Bd71B792a49dE03504A764D;\\n\\n    uint256 public immutable BASE_UINT;\\n    uint256 public immutable SCALE_FACTOR;\\n\\n    constructor(\\n        address _divider,\\n        address _target,\\n        address _rewardsRecipient,\\n        uint128 _ifee,\\n        AdapterParams memory _adapterParams\\n    )\\n        BaseAdapter(_divider, _target, address(ERC4626(_target).asset()), _ifee, _adapterParams)\\n        ExtractableReward(_rewardsRecipient)\\n    {\\n        BASE_UINT = 10**ERC4626(target).decimals();\\n        SCALE_FACTOR = 10**(18 - ERC4626(underlying).decimals()); // we assume targets decimals <= 18\\n        ERC20(underlying).safeApprove(target, type(uint256).max);\\n    }\\n\\n    function scale() external override returns (uint256) {\\n        return ERC4626(target).convertToAssets(BASE_UINT) * SCALE_FACTOR;\\n    }\\n\\n    function scaleStored() external view override returns (uint256) {\\n        return ERC4626(target).convertToAssets(BASE_UINT) * SCALE_FACTOR;\\n    }\\n\\n    function getUnderlyingPrice() external view override returns (uint256 price) {\\n        price = MasterPriceOracle(adapterParams.oracle).price(underlying);\\n        if (price == 0) {\\n            revert Errors.InvalidPrice();\\n        }\\n    }\\n\\n    function wrapUnderlying(uint256 assets) external override returns (uint256 _shares) {\\n        ERC20(underlying).safeTransferFrom(msg.sender, address(this), assets);\\n        _shares = ERC4626(target).deposit(assets, msg.sender);\\n    }\\n\\n    function unwrapTarget(uint256 shares) external override returns (uint256 _assets) {\\n        _assets = ERC4626(target).redeem(shares, msg.sender, msg.sender);\\n    }\\n\\n    function _isValid(address _token) internal virtual override returns (bool) {\\n        return (_token != target && _token != adapterParams.stake);\\n    }\\n}\\n\",\"keccak256\":\"0xdae9cbc135f7ff5510cf3fa0f114f34b4dfdb726d10bcc2275f0da43c4d60067\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/erc4626/ERC4626CropAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport { ERC4626Adapter } from \\\"./ERC4626Adapter.sol\\\";\\nimport { BaseAdapter } from \\\"../BaseAdapter.sol\\\";\\nimport { Crop } from \\\"../extensions/Crop.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\n\\n/// @notice Adapter contract for ERC4626 Vaults\\ncontract ERC4626CropAdapter is ERC4626Adapter, Crop {\\n    using SafeTransferLib for ERC20;\\n\\n    constructor(\\n        address _divider,\\n        address _target,\\n        address _rewardsRecipient,\\n        uint128 _ifee,\\n        AdapterParams memory _adapterParams,\\n        address _reward\\n    ) ERC4626Adapter(_divider, _target, _rewardsRecipient, _ifee, _adapterParams) Crop(_divider, _reward) {}\\n\\n    function notify(\\n        address _usr,\\n        uint256 amt,\\n        bool join\\n    ) public override(BaseAdapter, Crop) {\\n        super.notify(_usr, amt, join);\\n    }\\n\\n    function _isValid(address _token) internal override returns (bool) {\\n        return (_token != target && _token != adapterParams.stake && _token != reward);\\n    }\\n}\\n\",\"keccak256\":\"0x3f9e5a8a6b65b759c05d44e4103e95b7171d638e7986623a72892cc19e1fedd9\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/erc4626/OwnableERC4626CropAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport { ERC4626CropAdapter } from \\\"./ERC4626CropAdapter.sol\\\";\\n\\ninterface Opener {\\n    function onSponsorWindowOpened(address, uint256) external;\\n}\\n\\n/// @notice Ownable Crop Adapter contract for Rolling Liquidity Vaults\\n/// This adapter allows only the owner, which must comply with the Opener\\n/// interface, to Sponsor a Series\\ncontract OwnableERC4626CropAdapter is ERC4626CropAdapter {\\n    uint256 internal open = 1;\\n\\n    constructor(\\n        address _divider,\\n        address _target,\\n        address _rewardsRecipient,\\n        uint128 _ifee,\\n        AdapterParams memory _adapterParams,\\n        address _reward\\n    ) ERC4626CropAdapter(_divider, _target, _rewardsRecipient, _ifee, _adapterParams, _reward) {}\\n\\n    function openSponsorWindow() external requiresTrust {\\n        open = 2;\\n        Opener(msg.sender).onSponsorWindowOpened(adapterParams.stake, adapterParams.stakeSize);\\n        open = 1;\\n    }\\n\\n    // @notice If the Sponsor Window is open (which can only be done by the owner of this contract),\\n    // return the maturity bounds. Otherwise, return 0 making the sponsoring to revert.\\n    function getMaturityBounds() external view override returns (uint256, uint256) {\\n        return open == 2 ? (adapterParams.minm, adapterParams.maxm) : (0, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x3114ddb23a06f1de7132ef6794a79da49993402b2f1a815e637e8916043a5493\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/extensions/Crop.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n// External references\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\n\\n// Internal references\\nimport { Divider } from \\\"../../../Divider.sol\\\";\\nimport { BaseAdapter } from \\\"../BaseAdapter.sol\\\";\\nimport { IClaimer } from \\\"../IClaimer.sol\\\";\\nimport { FixedMath } from \\\"../../../external/FixedMath.sol\\\";\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\n/// @notice This is meant to be used with BaseAdapter.sol\\nabstract contract Crop is Trust {\\n    using SafeTransferLib for ERC20;\\n    using FixedMath for uint256;\\n\\n    /// @notice Program state\\n    address public claimer; // claimer address\\n    address public reward;\\n    uint256 public shares; // accumulated reward token per collected target\\n    uint256 public rewardBal; // last recorded balance of reward token\\n    uint256 public totalTarget; // total target accumulated by all users\\n    mapping(address => uint256) public tBalance; // target balance per user\\n    mapping(address => uint256) public rewarded; // reward token per user\\n    mapping(address => uint256) public reconciledAmt; // reconciled target amount per user\\n    mapping(address => mapping(uint256 => bool)) public reconciled; // whether a user has been reconciled for a given maturity\\n\\n    constructor(address _divider, address _reward) {\\n        setIsTrusted(_divider, true);\\n        reward = _reward;\\n    }\\n\\n    /// @notice Distribute the rewards tokens to the user according to their shares\\n    /// @dev The reconcile amount allows us to prevent diluting other users' rewards\\n    function notify(\\n        address _usr,\\n        uint256 amt,\\n        bool join\\n    ) public virtual requiresTrust {\\n        _distribute(_usr);\\n        if (amt > 0) {\\n            if (join) {\\n                totalTarget += amt;\\n                tBalance[_usr] += amt;\\n            } else {\\n                uint256 uReconciledAmt = reconciledAmt[_usr];\\n                if (uReconciledAmt > 0) {\\n                    if (amt < uReconciledAmt) {\\n                        unchecked {\\n                            uReconciledAmt -= amt;\\n                        }\\n                        amt = 0;\\n                    } else {\\n                        unchecked {\\n                            amt -= uReconciledAmt;\\n                        }\\n                        uReconciledAmt = 0;\\n                    }\\n                    reconciledAmt[_usr] = uReconciledAmt;\\n                }\\n                if (amt > 0) {\\n                    totalTarget -= amt;\\n                    tBalance[_usr] -= amt;\\n                }\\n            }\\n        }\\n        rewarded[_usr] = tBalance[_usr].fmulUp(shares, FixedMath.RAY);\\n    }\\n\\n    /// @notice Reconciles users target balances to zero by distributing rewards on their holdings,\\n    /// to avoid dilution of next Series' YT holders.\\n    /// This function should be called right after a Series matures and will save the user's YT balance\\n    /// (in target terms) on reconciledAmt[usr]. When `notify()` is triggered, we take that amount and\\n    /// subtract it from the user's target balance (`tBalance`) which will fix (or reconcile)\\n    /// his position to prevent dilution.\\n    /// @param _usrs Users to reconcile\\n    /// @param _maturities Maturities of the series that we want to reconcile users on.\\n    function reconcile(address[] calldata _usrs, uint256[] calldata _maturities) public {\\n        Divider divider = Divider(BaseAdapter(address(this)).divider());\\n        for (uint256 j = 0; j < _maturities.length; j++) {\\n            for (uint256 i = 0; i < _usrs.length; i++) {\\n                address usr = _usrs[i];\\n                uint256 ytBal = ERC20(divider.yt(address(this), _maturities[j])).balanceOf(usr);\\n                // We don't want to reconcile users if maturity has not been reached or if they have already been reconciled\\n                if (_maturities[j] <= block.timestamp && ytBal > 0 && !reconciled[usr][_maturities[j]]) {\\n                    _distribute(usr);\\n                    uint256 tBal = ytBal.fdiv(divider.lscales(address(this), _maturities[j], usr));\\n                    totalTarget -= tBal;\\n                    tBalance[usr] -= tBal;\\n                    reconciledAmt[usr] += tBal; // We increase reconciledAmt with the user's YT balance in target terms\\n                    reconciled[usr][_maturities[j]] = true;\\n                    emit Reconciled(usr, tBal, _maturities[j]);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Distributes rewarded tokens to users proportionally based on their `tBalance`\\n    /// @param _usr User to distribute reward tokens to\\n    function _distribute(address _usr) internal {\\n        _claimReward();\\n\\n        uint256 crop = ERC20(reward).balanceOf(address(this)) - rewardBal;\\n        if (totalTarget > 0) shares += (crop.fdiv(totalTarget, FixedMath.RAY));\\n\\n        uint256 last = rewarded[_usr];\\n        uint256 curr = tBalance[_usr].fmul(shares, FixedMath.RAY);\\n        if (curr > last) {\\n            unchecked {\\n                ERC20(reward).safeTransfer(_usr, curr - last);\\n            }\\n        }\\n        rewardBal = ERC20(reward).balanceOf(address(this));\\n        emit Distributed(_usr, reward, curr > last ? curr - last : 0);\\n    }\\n\\n    /// @notice Some protocols don't airdrop reward tokens, instead users must claim them.\\n    /// This method may be overriden by child contracts to claim a protocol's rewards\\n    function _claimReward() internal virtual {\\n        if (claimer != address(0)) {\\n            ERC20 target = ERC20(BaseAdapter(address(this)).target());\\n            uint256 tBal = ERC20(target).balanceOf(address(this));\\n\\n            if (tBal > 0) {\\n                // We send all the target balance to the claimer contract to it can claim rewards\\n                ERC20(target).transfer(claimer, tBal);\\n\\n                // Make claimer to claim rewards\\n                IClaimer(claimer).claim();\\n\\n                // Get the target back\\n                if (ERC20(target).balanceOf(address(this)) < tBal) revert Errors.BadContractInteration();\\n            }\\n        }\\n    }\\n\\n    /// @notice Overrides the rewardToken address.\\n    /// @param _reward New reward token address\\n    function setRewardToken(address _reward) public requiresTrust {\\n        _claimReward();\\n        reward = _reward;\\n        emit RewardTokenChanged(reward);\\n    }\\n\\n    /// @notice Sets `claimer`.\\n    /// @param _claimer New claimer contract address\\n    function setClaimer(address _claimer) public requiresTrust {\\n        claimer = _claimer;\\n        emit ClaimerChanged(claimer);\\n    }\\n\\n    /* ========== LOGS ========== */\\n\\n    event Distributed(address indexed usr, address indexed token, uint256 amount);\\n    event Reconciled(address indexed usr, uint256 tBal, uint256 maturity);\\n    event RewardTokenChanged(address indexed reward);\\n    event ClaimerChanged(address indexed claimer);\\n}\\n\",\"keccak256\":\"0x854341be05b2f5ffeb40b921015dbfef86e9afd96afc63bf28b3eff3c6be9dd0\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/extensions/ExtractableReward.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.15;\\n\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\n/// @title ExtractableReward\\n/// @notice Allows to extract rewards from the contract to the `rewardsRecepient`\\nabstract contract ExtractableReward is Trust {\\n    /// -----------------------------------------------------------------------\\n    /// Libraries usage\\n    /// -----------------------------------------------------------------------\\n\\n    using SafeTransferLib for ERC20;\\n\\n    /// @notice Rewards recipient\\n    address public rewardsRecipient;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Constructor\\n    /// -----------------------------------------------------------------------\\n\\n    constructor(address _rewardsRecipient) Trust(msg.sender) {\\n        rewardsRecipient = _rewardsRecipient;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Rewards extractor\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice Receives a token address and returns whether it is an\\n    /// extractable token or not\\n    /// @dev To be overriden by the inheriting contract\\n    function _isValid(address _token) internal virtual returns (bool);\\n\\n    /// @notice Transfers reward tokens from the adapter to Sense's reward container\\n    function extractToken(address token) external {\\n        if (!_isValid(token)) revert Errors.TokenNotSupported();\\n        ERC20 t = ERC20(token);\\n        uint256 tBal = t.balanceOf(address(this));\\n        t.safeTransfer(rewardsRecipient, t.balanceOf(address(this)));\\n        emit RewardsClaimed(token, rewardsRecipient, tBal);\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Admin functions\\n    /// -----------------------------------------------------------------------\\n    function setRewardsRecipient(address recipient) external requiresTrust {\\n        emit RewardsRecipientChanged(rewardsRecipient, recipient);\\n        rewardsRecipient = recipient;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Logs\\n    /// -----------------------------------------------------------------------\\n    event RewardsRecipientChanged(address indexed oldRecipient, address indexed newRecipient);\\n    event RewardsClaimed(address indexed token, address indexed recipient, uint256 indexed amount);\\n}\\n\",\"keccak256\":\"0x92da8c9af316e0a4f6bbd5c8725b8bab37cf0025b5cd8cf7170a3d69c9d3a3a1\",\"license\":\"AGPL-3.0\"},\"@sense-finance/v1-core/src/adapters/abstract/factories/BaseFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n// Internal references\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\nimport { BaseAdapter } from \\\"../BaseAdapter.sol\\\";\\nimport { Divider } from \\\"../../../Divider.sol\\\";\\nimport { FixedMath } from \\\"../../../external/FixedMath.sol\\\";\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\n\\ninterface ERC20 {\\n    function decimals() external view returns (uint256 decimals);\\n}\\n\\ninterface ChainlinkOracleLike {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function decimals() external view returns (uint256 decimals);\\n}\\n\\nabstract contract BaseFactory is Trust {\\n    using FixedMath for uint256;\\n\\n    /* ========== CONSTANTS ========== */\\n\\n    address public constant ETH_USD_PRICEFEED = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419; // Chainlink ETH-USD price feed\\n\\n    /// @notice Sets level to `31` by default, which keeps all Divider lifecycle methods public\\n    /// (`issue`, `combine`, `collect`, etc), but not the `onRedeem` hook.\\n    uint48 public constant DEFAULT_LEVEL = 31;\\n\\n    /* ========== PUBLIC IMMUTABLES ========== */\\n\\n    /// @notice Sense core Divider address\\n    address public immutable divider;\\n\\n    /// @notice Adapter admin address\\n    address public restrictedAdmin;\\n\\n    /// @notice Rewards recipient\\n    address public rewardsRecipient;\\n\\n    /// @notice params for adapters deployed with this factory\\n    FactoryParams public factoryParams;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct FactoryParams {\\n        address oracle; // oracle address\\n        address stake; // token to stake at issuance\\n        uint256 stakeSize; // amount to stake at issuance\\n        uint256 minm; // min maturity (seconds after block.timstamp)\\n        uint256 maxm; // max maturity (seconds after block.timstamp)\\n        uint128 ifee; // issuance fee\\n        uint16 mode; // 0 for monthly, 1 for weekly\\n        uint64 tilt; // tilt\\n        uint256 guard; // adapter guard (in usd, 18 decimals)\\n    }\\n\\n    constructor(\\n        address _divider,\\n        address _restrictedAdmin,\\n        address _rewardsRecipient,\\n        FactoryParams memory _factoryParams\\n    ) Trust(msg.sender) {\\n        divider = _divider;\\n        restrictedAdmin = _restrictedAdmin;\\n        rewardsRecipient = _rewardsRecipient;\\n        factoryParams = _factoryParams;\\n    }\\n\\n    /* ========== REQUIRED DEPLOY ========== */\\n\\n    /// @notice Deploys both an adapter and a target wrapper for the given _target\\n    /// @param _target Address of the Target token\\n    /// @param _data Additional data needed to deploy the adapter\\n    function deployAdapter(address _target, bytes memory _data) external virtual returns (address adapter) {}\\n\\n    /// Set adapter's guard to $100`000 in target\\n    /// @notice if Underlying-ETH price feed returns 0, we set the guard to 100000 target.\\n    function _setGuard(address _adapter) internal {\\n        // We only want to execute this if divider is guarded\\n        if (Divider(divider).guarded()) {\\n            BaseAdapter adapter = BaseAdapter(_adapter);\\n\\n            // Get Underlying-ETH price (18 decimals)\\n            try adapter.getUnderlyingPrice() returns (uint256 underlyingPriceInEth) {\\n                // Get ETH-USD price from Chainlink (8 decimals)\\n                (, int256 ethPrice, , uint256 ethUpdatedAt, ) = ChainlinkOracleLike(ETH_USD_PRICEFEED)\\n                    .latestRoundData();\\n\\n                if (block.timestamp - ethUpdatedAt > 2 hours) revert Errors.InvalidPrice();\\n\\n                // Calculate Underlying-USD price (normalised to 18 deicmals)\\n                uint256 price = underlyingPriceInEth.fmul(uint256(ethPrice), 1e8);\\n\\n                // Calculate Target-USD price (scale and price are in 18 decimals)\\n                price = adapter.scale().fmul(price);\\n\\n                // Calculate guard with factory guard (18 decimals) and target price (18 decimals)\\n                // normalised to target decimals and set it\\n                Divider(divider).setGuard(\\n                    _adapter,\\n                    factoryParams.guard.fdiv(price, 10**ERC20(adapter.target()).decimals())\\n                );\\n            } catch {}\\n        }\\n    }\\n\\n    function setRestrictedAdmin(address _restrictedAdmin) external requiresTrust {\\n        emit RestrictedAdminChanged(restrictedAdmin, _restrictedAdmin);\\n        restrictedAdmin = _restrictedAdmin;\\n    }\\n\\n    /// Set factory rewards recipient\\n    /// @notice all future deployed adapters will have the new rewards recipient\\n    /// @dev existing adapters rewards recipients will not be changed and can be\\n    /// done through `setRewardsRecipient` on each adapter contract\\n    function setRewardsRecipient(address _recipient) external requiresTrust {\\n        emit RewardsRecipientChanged(rewardsRecipient, _recipient);\\n        rewardsRecipient = _recipient;\\n    }\\n\\n    /// @notice sets trusted address for an adapter\\n    /// @dev factory must already be a trusted address for the adapter\\n    function setAdapterTrusted(\\n        address _adapter,\\n        address _user,\\n        bool _trusted\\n    ) public requiresTrust {\\n        Trust(_adapter).setIsTrusted(_user, _trusted);\\n    }\\n\\n    /* ========== LOGS ========== */\\n\\n    event RewardsRecipientChanged(address indexed oldRecipient, address indexed newRecipient);\\n    event RestrictedAdminChanged(address indexed oldAdmin, address indexed newAdmin);\\n}\\n\",\"keccak256\":\"0x27c9ed59d8500fa51c93721bf494846cfca718c39972e88f499a71b05725eaed\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/factories/CropFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n// Internal references\\nimport { Crop } from \\\"../extensions/Crop.sol\\\";\\nimport { BaseFactory } from \\\"./BaseFactory.sol\\\";\\n\\nabstract contract CropFactory is BaseFactory {\\n    address public reward;\\n\\n    constructor(\\n        address _divider,\\n        address _restrictedAdmin,\\n        address _rewardsRecipient,\\n        FactoryParams memory _factoryParams,\\n        address _reward\\n    ) BaseFactory(_divider, _restrictedAdmin, _rewardsRecipient, _factoryParams) {\\n        reward = _reward;\\n    }\\n}\\n\",\"keccak256\":\"0x42dfdf897c82c3e11177b5e3808215864f39aae4408809bdfd23885beeb8eeb5\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/factories/ERC4626CropFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n// Internal references\\nimport { Divider } from \\\"../../../Divider.sol\\\";\\nimport { ERC4626CropAdapter } from \\\"../erc4626/ERC4626CropAdapter.sol\\\";\\nimport { BaseAdapter } from \\\"../../abstract/BaseAdapter.sol\\\";\\nimport { ExtractableReward } from \\\"../../abstract/extensions/ExtractableReward.sol\\\";\\nimport { CropFactory } from \\\"./CropFactory.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\n// External references\\nimport { Bytes32AddressLib } from \\\"solmate/src/utils/Bytes32AddressLib.sol\\\";\\n\\ncontract ERC4626CropFactory is CropFactory {\\n    using Bytes32AddressLib for address;\\n\\n    mapping(address => bool) public supportedTargets;\\n\\n    constructor(\\n        address _divider,\\n        address _restrictedAdmin,\\n        address _rewardsRecipient,\\n        FactoryParams memory _factoryParams\\n    ) CropFactory(_divider, _restrictedAdmin, _rewardsRecipient, _factoryParams, address(0)) {}\\n\\n    /// @notice Deploys an ERC4626Adapter contract\\n    /// @param _target The target address\\n    /// @param data ABI encoded data\\n    function deployAdapter(address _target, bytes memory data) external virtual override returns (address adapter) {\\n        address reward = abi.decode(data, (address));\\n\\n        /// Sanity checks\\n        if (Divider(divider).periphery() != msg.sender) revert Errors.OnlyPeriphery();\\n        if (!Divider(divider).permissionless() && !supportedTargets[_target]) revert Errors.TargetNotSupported();\\n\\n        BaseAdapter.AdapterParams memory adapterParams = BaseAdapter.AdapterParams({\\n            oracle: factoryParams.oracle,\\n            stake: factoryParams.stake,\\n            stakeSize: factoryParams.stakeSize,\\n            minm: factoryParams.minm,\\n            maxm: factoryParams.maxm,\\n            mode: factoryParams.mode,\\n            tilt: factoryParams.tilt,\\n            level: DEFAULT_LEVEL\\n        });\\n\\n        // Use the CREATE2 opcode to deploy a new Adapter contract.\\n        // This will revert if am ERC4626 adapter with the provided target has already\\n        // been deployed, as the salt would be the same and we can't deploy with it twice.\\n        adapter = address(\\n            new ERC4626CropAdapter{ salt: _target.fillLast12Bytes() }(\\n                divider,\\n                _target,\\n                rewardsRecipient,\\n                factoryParams.ifee,\\n                adapterParams,\\n                reward\\n            )\\n        );\\n\\n        _setGuard(adapter);\\n\\n        ExtractableReward(adapter).setIsTrusted(restrictedAdmin, true);\\n    }\\n\\n    /// @notice (Un)support target\\n    /// @param _target The target address\\n    /// @param supported Whether the target should be supported or not\\n    function supportTarget(address _target, bool supported) external requiresTrust {\\n        supportedTargets[_target] = supported;\\n        emit TargetSupported(_target, supported);\\n    }\\n\\n    /// @notice (Un)support multiple target at once\\n    /// @param _targets Array of target addresses\\n    /// @param supported Whether the targets should be supported or not\\n    function supportTargets(address[] memory _targets, bool supported) external requiresTrust {\\n        for (uint256 i = 0; i < _targets.length; i++) {\\n            supportedTargets[_targets[i]] = supported;\\n            emit TargetSupported(_targets[i], supported);\\n        }\\n    }\\n\\n    /* ========== LOGS ========== */\\n\\n    event TargetSupported(address indexed target, bool indexed supported);\\n}\\n\",\"keccak256\":\"0xb9389e94797774112e3b81b38267eebb33b85b9f851aa42f3b11860ae2b1c309\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/factories/OwnableERC4626CropFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n// Internal references\\nimport { Divider } from \\\"../../../Divider.sol\\\";\\nimport { BaseAdapter } from \\\"../../abstract/BaseAdapter.sol\\\";\\nimport { OwnableERC4626CropAdapter } from \\\"../erc4626/OwnableERC4626CropAdapter.sol\\\";\\nimport { ERC4626CropFactory } from \\\"./ERC4626CropFactory.sol\\\";\\nimport { ExtractableReward } from \\\"../../abstract/extensions/ExtractableReward.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\n// External references\\nimport { Bytes32AddressLib } from \\\"solmate/src/utils/Bytes32AddressLib.sol\\\";\\n\\n/// @notice Ownable Crop Factory contract that deploys Ownable Crop Adapters for Rolling Liquidity Vaults\\ncontract OwnableERC4626CropFactory is ERC4626CropFactory {\\n    using Bytes32AddressLib for address;\\n\\n    /// @notice Rolling Liquidity Vault Factory address\\n    address public rlvFactory;\\n\\n    constructor(\\n        address _divider,\\n        address _restrictedAdmin,\\n        address _rewardsRecipient,\\n        FactoryParams memory _factoryParams,\\n        address _rlvFactory\\n    ) ERC4626CropFactory(_divider, _restrictedAdmin, _rewardsRecipient, _factoryParams) {\\n        rlvFactory = _rlvFactory;\\n    }\\n\\n    /// @notice Deploys an OwnableERC4626Adapter contract\\n    /// @param _target The target address\\n    /// @param data ABI encoded reward tokens address array\\n    function deployAdapter(address _target, bytes memory data) external override returns (address adapter) {\\n        address reward = abi.decode(data, (address));\\n\\n        /// Sanity checks\\n        if (Divider(divider).periphery() != msg.sender) revert Errors.OnlyPeriphery();\\n        if (!Divider(divider).permissionless() && !supportedTargets[_target]) revert Errors.TargetNotSupported();\\n\\n        BaseAdapter.AdapterParams memory adapterParams = BaseAdapter.AdapterParams({\\n            oracle: factoryParams.oracle,\\n            stake: factoryParams.stake,\\n            stakeSize: factoryParams.stakeSize,\\n            minm: factoryParams.minm,\\n            maxm: factoryParams.maxm,\\n            mode: factoryParams.mode,\\n            tilt: factoryParams.tilt,\\n            level: DEFAULT_LEVEL\\n        });\\n\\n        // Use the CREATE2 opcode to deploy a new Adapter contract.\\n        // This will revert if an ERC4626 adapter with the provided target has already\\n        // been deployed, as the salt would be the same and we can't deploy with it twice.\\n        adapter = address(\\n            new OwnableERC4626CropAdapter{ salt: _target.fillLast12Bytes() }(\\n                divider,\\n                _target,\\n                rewardsRecipient,\\n                factoryParams.ifee,\\n                adapterParams,\\n                reward\\n            )\\n        );\\n\\n        _setGuard(adapter);\\n\\n        // Factory must have adapter auth so that it can give auth to the RLV\\n        OwnableERC4626CropAdapter(adapter).setIsTrusted(rlvFactory, true);\\n\\n        ExtractableReward(adapter).setIsTrusted(restrictedAdmin, true);\\n    }\\n\\n    /// @notice Modify RLV Factory address\\n    /// @param _rlvFactory Address of the new factory\\n    function setRlvFactory(address _rlvFactory) external requiresTrust {\\n        rlvFactory = _rlvFactory;\\n        emit RlvFactoryChanged(_rlvFactory);\\n    }\\n\\n    /* ========== LOGS ========== */\\n\\n    event RlvFactoryChanged(address indexed rlvFactory);\\n}\\n\",\"keccak256\":\"0xff44180fb0fe95854a3cdfd1ec4e96693dd8d0e9a718ca38d8e3cef9f9177bfb\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/implementations/oracles/MasterPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\nimport { IPriceFeed } from \\\"../../abstract/IPriceFeed.sol\\\";\\n\\n/// @notice This contract gets prices from an available oracle address which must implement IPriceFeed.sol\\n/// If there's no oracle set, it will try getting the price from Chainlink's Oracle.\\n/// @author Inspired by: https://github.com/Rari-Capital/fuse-v1/blob/development/src/oracles/MasterPriceOracle.sol\\ncontract MasterPriceOracle is IPriceFeed, Trust {\\n    address public senseChainlinkPriceOracle;\\n\\n    /// @dev Maps underlying token addresses to oracle addresses.\\n    mapping(address => address) public oracles;\\n\\n    /// @dev Constructor to initialize state variables.\\n    /// @param _chainlinkOracle The underlying ERC20 token addresses to link to `_oracles`.\\n    /// @param _underlyings The underlying ERC20 token addresses to link to `_oracles`.\\n    /// @param _oracles The `PriceOracle` contracts to be assigned to `underlyings`.\\n    constructor(\\n        address _chainlinkOracle,\\n        address[] memory _underlyings,\\n        address[] memory _oracles\\n    ) public Trust(msg.sender) {\\n        senseChainlinkPriceOracle = _chainlinkOracle;\\n\\n        // Input validation\\n        if (_underlyings.length != _oracles.length) revert Errors.InvalidParam();\\n\\n        // Initialize state variables\\n        for (uint256 i = 0; i < _underlyings.length; i++) oracles[_underlyings[i]] = _oracles[i];\\n    }\\n\\n    /// @dev Sets `_oracles` for `underlyings`.\\n    /// Caller of this function must make sure that the oracles being added return non-stale, greater than 0\\n    /// prices for all underlying tokens.\\n    function add(address[] calldata _underlyings, address[] calldata _oracles) external requiresTrust {\\n        if (_underlyings.length <= 0 || _underlyings.length != _oracles.length) revert Errors.InvalidParam();\\n\\n        for (uint256 i = 0; i < _underlyings.length; i++) {\\n            oracles[_underlyings[i]] = _oracles[i];\\n        }\\n    }\\n\\n    /// @dev Attempts to return the price in ETH of `underlying` (implements `BasePriceOracle`).\\n    function price(address underlying) external view override returns (uint256) {\\n        if (underlying == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2) return 1e18; // Return 1e18 for WETH\\n\\n        address oracle = oracles[underlying];\\n        if (oracle != address(0)) {\\n            return IPriceFeed(oracle).price(underlying);\\n        } else {\\n            // Try token/ETH from Sense's Chainlink Oracle\\n            try IPriceFeed(senseChainlinkPriceOracle).price(underlying) returns (uint256 price) {\\n                return price;\\n            } catch {\\n                revert Errors.PriceOracleNotFound();\\n            }\\n        }\\n    }\\n\\n    /// @dev Sets the `senseChainlinkPriceOracle`.\\n    function setSenseChainlinkPriceOracle(address _senseChainlinkPriceOracle) public requiresTrust {\\n        senseChainlinkPriceOracle = _senseChainlinkPriceOracle;\\n        emit SenseChainlinkPriceOracleChanged(senseChainlinkPriceOracle);\\n    }\\n\\n    /* ========== LOGS ========== */\\n    event SenseChainlinkPriceOracleChanged(address indexed senseChainlinkPriceOracle);\\n}\\n\",\"keccak256\":\"0x525e6ad9ba9f8a30e03eaea883f014f85d415a6b543759f5153af30bc57cb45f\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/external/DateTime.sol\":{\"content\":\"pragma solidity 0.8.15;\\n\\n/// @author Taken from: https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\nlibrary DateTime {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function toDateString(uint256 _timestamp)\\n        internal\\n        pure\\n        returns (\\n            string memory d,\\n            string memory m,\\n            string memory y\\n        )\\n    {\\n        (uint256 year, uint256 month, uint256 day) = timestampToDate(_timestamp);\\n        d = uintToString(day);\\n        m = uintToString(month);\\n        y = uintToString(year);\\n        // append a 0 to numbers < 10 so we should, e.g, 01 instead of just 1\\n        if (day < 10) d = string(abi.encodePacked(\\\"0\\\", d));\\n        if (month < 10) m = string(abi.encodePacked(\\\"0\\\", m));\\n    }\\n\\n    function format(uint256 _timestamp) internal pure returns (string memory datestring) {\\n        string[12] memory months = [\\n            \\\"Jan\\\",\\n            \\\"Feb\\\",\\n            \\\"Mar\\\",\\n            \\\"Apr\\\",\\n            \\\"May\\\",\\n            \\\"June\\\",\\n            \\\"July\\\",\\n            \\\"Aug\\\",\\n            \\\"Sept\\\",\\n            \\\"Oct\\\",\\n            \\\"Nov\\\",\\n            \\\"Dec\\\"\\n        ];\\n        (uint256 year, uint256 month, uint256 day) = timestampToDate(_timestamp);\\n        uint256 last = day % 10;\\n        string memory suffix = \\\"th\\\";\\n        if (day < 11 || day > 20) {\\n            if (last == 1) suffix = \\\"st\\\";\\n            if (last == 2) suffix = \\\"nd\\\";\\n            if (last == 3) suffix = \\\"rd\\\";\\n        }\\n        return string(abi.encodePacked(uintToString(day), suffix, \\\" \\\", months[month - 1], \\\" \\\", uintToString(year)));\\n    }\\n\\n    function getDayOfWeek(uint256 timestamp) internal pure returns (uint256 dayOfWeek) {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    /// Taken from https://stackoverflow.com/questions/47129173/how-to-convert-uint-to-string-in-solidity\\n    function uintToString(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) return \\\"0\\\";\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n}\\n\",\"keccak256\":\"0x161ffa42bb0b7508a9372db90a7710088adbfb38cee34cdf523ff932b9b51043\"},\"@sense-finance/v1-core/src/external/FixedMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n/// @title Fixed point arithmetic library\\n/// @author Taken from https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol\\nlibrary FixedMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant RAY = 1e27;\\n\\n    function fmul(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivDown(x, y, baseUnit); // Equivalent to (x * y) / baseUnit rounded down.\\n    }\\n\\n    function fmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function fmulUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivUp(x, y, baseUnit); // Equivalent to (x * y) / baseUnit rounded up.\\n    }\\n\\n    function fmulUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function fdiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivDown(x, baseUnit, y); // Equivalent to (x * baseUnit) / y rounded down.\\n    }\\n\\n    function fdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function fdivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivUp(x, baseUnit, y); // Equivalent to (x * baseUnit) / y rounded up.\\n    }\\n\\n    function fdivUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x466c07d32dda6d18099092be426495d84246b84d2654f212f69a623a1a63847d\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/external/flashloan/IERC3156FlashBorrower.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IERC3156FlashBorrower {\\n    /// @dev Receive a flash loan.\\n    /// @param initiator The initiator of the loan.\\n    /// @param token The loan currency.\\n    /// @param amount The amount of tokens lent.\\n    /// @param fee The additional amount of tokens to repay.\\n    /// @param data Arbitrary data structure, intended to contain user-defined parameters.\\n    /// @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xa2007326dfc89668d1864d688373d7e1ee07fee48f605d4f6726224004bdc8e5\"},\"@sense-finance/v1-core/src/external/flashloan/IERC3156FlashLender.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n    /// @dev The amount of currency available to be lent.\\n    /// @param token The loan currency.\\n    /// @return The amount of `token` that can be borrowed.\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /// @dev The fee to be charged for a given loan.\\n    /// @param token The loan currency.\\n    /// @param amount The amount of tokens lent.\\n    /// @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /// @dev Initiate a flash loan.\\n    /// @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n    /// @param token The loan currency.\\n    /// @param amount The amount of tokens lent.\\n    /// @param data Arbitrary data structure, intended to contain user-defined parameters.\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc91333a7ff49db20853c817de2c277a0559a1ee75eb1deeb7d2096a5d1022d61\"},\"@sense-finance/v1-core/src/tokens/Token.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n// External references\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\n\\n// Internal references\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\n\\n/// @title Base Token\\ncontract Token is ERC20, Trust {\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        address _trusted\\n    ) ERC20(_name, _symbol, _decimals) Trust(_trusted) {}\\n\\n    /// @param usr The address to send the minted tokens\\n    /// @param amount The amount to be minted\\n    function mint(address usr, uint256 amount) public requiresTrust {\\n        _mint(usr, amount);\\n    }\\n\\n    /// @param usr The address from where to burn tokens from\\n    /// @param amount The amount to be burned\\n    function burn(address usr, uint256 amount) public requiresTrust {\\n        _burn(usr, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe7ba2a15fdf5f1d20a10c108c5883cd3e35d473c262eee755e579d4e9272fa3a\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/tokens/YT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n// Internal references\\nimport { Divider } from \\\"../Divider.sol\\\";\\nimport { Token } from \\\"./Token.sol\\\";\\n\\n/// @title Yield Token\\n/// @notice Strips off excess before every transfer\\ncontract YT is Token {\\n    address public immutable adapter;\\n    address public immutable divider;\\n    uint256 public immutable maturity;\\n\\n    constructor(\\n        address _adapter,\\n        uint256 _maturity,\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        address _divider\\n    ) Token(_name, _symbol, _decimals, _divider) {\\n        adapter = _adapter;\\n        maturity = _maturity;\\n        divider = _divider;\\n    }\\n\\n    function collect() external returns (uint256 _collected) {\\n        return Divider(divider).collect(msg.sender, adapter, maturity, 0, address(0));\\n    }\\n\\n    function transfer(address to, uint256 value) public override returns (bool) {\\n        Divider(divider).collect(msg.sender, adapter, maturity, value, to);\\n        return super.transfer(to, value);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public override returns (bool) {\\n        if (value > 0) Divider(divider).collect(from, adapter, maturity, value, to);\\n        return super.transferFrom(from, to, value);\\n    }\\n}\\n\",\"keccak256\":\"0x81bdc71bc663bd88015cdf4e43c235345b7479f5d86e7b3a59ad64a8df3203f8\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-utils/src/Trust.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.0;\\n\\n/// @notice Ultra minimal authorization logic for smart contracts.\\n/// @author From https://github.com/Rari-Capital/solmate/blob/fab107565a51674f3a3b5bfdaacc67f6179b1a9b/src/auth/Trust.sol\\nabstract contract Trust {\\n    event UserTrustUpdated(address indexed user, bool trusted);\\n\\n    mapping(address => bool) public isTrusted;\\n\\n    constructor(address initialUser) {\\n        isTrusted[initialUser] = true;\\n\\n        emit UserTrustUpdated(initialUser, true);\\n    }\\n\\n    function setIsTrusted(address user, bool trusted) public virtual requiresTrust {\\n        isTrusted[user] = trusted;\\n\\n        emit UserTrustUpdated(user, trusted);\\n    }\\n\\n    modifier requiresTrust() {\\n        require(isTrusted[msg.sender], \\\"UNTRUSTED\\\");\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x2d3887076c81425d3954aea7735aebd9093e3df69c8132b1713fae4a34201d43\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-utils/src/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.4;\\n\\nlibrary Errors {\\n    // Auth\\n    error CombineRestricted();\\n    error IssuanceRestricted();\\n    error NotAuthorized();\\n    error OnlyYT();\\n    error OnlyDivider();\\n    error OnlyPeriphery();\\n    error OnlyPermissionless();\\n    error RedeemRestricted();\\n    error Untrusted();\\n\\n    // Adapters\\n    error TokenNotSupported();\\n    error FlashCallbackFailed();\\n    error SenderNotEligible();\\n    error TargetMismatch();\\n    error TargetNotSupported();\\n    error InvalidAdapterType();\\n    error PriceOracleNotFound();\\n\\n    // Divider\\n    error AlreadySettled();\\n    error CollectNotSettled();\\n    error GuardCapReached();\\n    error IssuanceFeeCapExceeded();\\n    error IssueOnSettle();\\n    error NotSettled();\\n\\n    // Input & validations\\n    error AlreadyInitialized();\\n    error DuplicateSeries();\\n    error ExistingValue();\\n    error InvalidAdapter();\\n    error InvalidMaturity();\\n    error InvalidParam();\\n    error NotImplemented();\\n    error OutOfWindowBoundaries();\\n    error SeriesDoesNotExist();\\n    error SwapTooSmall();\\n    error TargetParamsNotSet();\\n    error PoolParamsNotSet();\\n    error PTParamsNotSet();\\n    error AttemptFailed();\\n    error InvalidPrice();\\n    error BadContractInteration();\\n\\n    // Periphery\\n    error FactoryNotSupported();\\n    error FlashBorrowFailed();\\n    error FlashUntrustedBorrower();\\n    error FlashUntrustedLoanInitiator();\\n    error UnexpectedSwapAmount();\\n    error TooMuchLeftoverTarget();\\n\\n    // Fuse\\n    error AdapterNotSet();\\n    error FailedBecomeAdmin();\\n    error FailedAddTargetMarket();\\n    error FailedToAddPTMarket();\\n    error FailedAddLpMarket();\\n    error OracleNotReady();\\n    error PoolAlreadyDeployed();\\n    error PoolNotDeployed();\\n    error PoolNotSet();\\n    error SeriesNotQueued();\\n    error TargetExists();\\n    error TargetNotInFuse();\\n\\n    // Tokens\\n    error MintFailed();\\n    error RedeemFailed();\\n    error TransferFailed();\\n}\\n\",\"keccak256\":\"0x5eece5ee6069054e8485c7c799ad1ea764446248088ee16bc0ae08c84f0c52b9\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-utils/src/libs/Levels.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.0;\\n\\nlibrary Levels {\\n    uint256 private constant _INIT_BIT = 0x1;\\n    uint256 private constant _ISSUE_BIT = 0x2;\\n    uint256 private constant _COMBINE_BIT = 0x4;\\n    uint256 private constant _COLLECT_BIT = 0x8;\\n    uint256 private constant _REDEEM_BIT = 0x10;\\n    uint256 private constant _REDEEM_HOOK_BIT = 0x20;\\n\\n    function initRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _INIT_BIT != _INIT_BIT;\\n    }\\n\\n    function issueRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _ISSUE_BIT != _ISSUE_BIT;\\n    }\\n\\n    function combineRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _COMBINE_BIT != _COMBINE_BIT;\\n    }\\n\\n    function collectDisabled(uint256 level) internal pure returns (bool) {\\n        return level & _COLLECT_BIT != _COLLECT_BIT;\\n    }\\n\\n    function redeemRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _REDEEM_BIT != _REDEEM_BIT;\\n    }\\n\\n    function redeemHookDisabled(uint256 level) internal pure returns (bool) {\\n        return level & _REDEEM_HOOK_BIT != _REDEEM_HOOK_BIT;\\n    }\\n}\\n\",\"keccak256\":\"0x6c71e17beb73fca7577fb8868086159303eaecb1b397a446e8891b42f73fd502\",\"license\":\"AGPL-3.0-only\"},\"solmate/src/mixins/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"../utils/FixedPointMathLib.sol\\\";\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626 is ERC20 {\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ERC20 public immutable asset;\\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol, _asset.decimals()) {\\n        asset = _asset;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n        // Check for rounding error since we round down in previewDeposit.\\n        require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 shares) {\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return convertToAssets(shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf[owner]);\\n    }\\n\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\\n\\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa0e0c28a727524fa94e7e6c1f4c793a6bd1e6d1bc652b7b02b343ebaf4cd774b\",\"license\":\"MIT\"},\"solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x43aa1509bb753f053143530705d9c4eee415691d26a4779769bf028a74e6ac69\",\"license\":\"MIT\"},\"solmate/src/utils/Bytes32AddressLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Library for converting between addresses and bytes32 values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/Bytes32AddressLib.sol)\\nlibrary Bytes32AddressLib {\\n    function fromLast20Bytes(bytes32 bytesValue) internal pure returns (address) {\\n        return address(uint160(uint256(bytesValue)));\\n    }\\n\\n    function fillLast12Bytes(address addressValue) internal pure returns (bytes32) {\\n        return bytes32(bytes20(addressValue));\\n    }\\n}\\n\",\"keccak256\":\"0xf40b65d6d9f75ac1446fa1e72b485cb9a9f9766df5dfa5a9355154f27620cd4f\",\"license\":\"MIT\"},\"solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    function powWad(int256 x, int256 y) internal pure returns (int256) {\\n        // Equivalent to x to the power of y because x ** y = (e ** ln(x)) ** y = e ** (ln(x) * y)\\n        return expWad((lnWad(x) * y) / int256(WAD)); // Using ln(x) means x must be greater than 0.\\n    }\\n\\n    function expWad(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            // When the result is < 0.5 we return zero. This happens when\\n            // x <= floor(log(0.5e18) * 1e18) ~ -42e18\\n            if (x <= -42139678854452767551) return 0;\\n\\n            // When the result is > (2**255 - 1) / 1e18 we can not represent it as an\\n            // int. This happens when x >= floor(log((2**255 - 1) / 1e18) * 1e18) ~ 135.\\n            if (x >= 135305999368893231589) revert(\\\"EXP_OVERFLOW\\\");\\n\\n            // x is now in the range (-42, 136) * 1e18. Convert to (-42, 136) * 2**96\\n            // for more intermediate precision and a binary basis. This base conversion\\n            // is a multiplication by 1e18 / 2**96 = 5**18 / 2**78.\\n            x = (x << 78) / 5**18;\\n\\n            // Reduce range of x to (-\\u00bd ln 2, \\u00bd ln 2) * 2**96 by factoring out powers\\n            // of two such that exp(x) = exp(x') * 2**k, where k is an integer.\\n            // Solving this gives k = round(x / log(2)) and x' = x - k * log(2).\\n            int256 k = ((x << 96) / 54916777467707473351141471128 + 2**95) >> 96;\\n            x = x - k * 54916777467707473351141471128;\\n\\n            // k is in the range [-61, 195].\\n\\n            // Evaluate using a (6, 7)-term rational approximation.\\n            // p is made monic, we'll multiply by a scale factor later.\\n            int256 y = x + 1346386616545796478920950773328;\\n            y = ((y * x) >> 96) + 57155421227552351082224309758442;\\n            int256 p = y + x - 94201549194550492254356042504812;\\n            p = ((p * y) >> 96) + 28719021644029726153956944680412240;\\n            p = p * x + (4385272521454847904659076985693276 << 96);\\n\\n            // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n            int256 q = x - 2855989394907223263936484059900;\\n            q = ((q * x) >> 96) + 50020603652535783019961831881945;\\n            q = ((q * x) >> 96) - 533845033583426703283633433725380;\\n            q = ((q * x) >> 96) + 3604857256930695427073651918091429;\\n            q = ((q * x) >> 96) - 14423608567350463180887372962807573;\\n            q = ((q * x) >> 96) + 26449188498355588339934803723976023;\\n\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial won't have zeros in the domain as all its roots are complex.\\n                // No scaling is necessary because p is already 2**96 too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r should be in the range (0.09, 0.25) * 2**96.\\n\\n            // We now need to multiply r by:\\n            // * the scale factor s = ~6.031367120.\\n            // * the 2**k factor from the range reduction.\\n            // * the 1e18 / 2**96 factor for base conversion.\\n            // We do this all at once, with an intermediate result in 2**213\\n            // basis, so the final right shift is always by a positive amount.\\n            r = int256((uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k));\\n        }\\n    }\\n\\n    function lnWad(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            require(x > 0, \\\"UNDEFINED\\\");\\n\\n            // We want to convert x from 10**18 fixed point to 2**96 fixed point.\\n            // We do this by multiplying by 2**96 / 10**18. But since\\n            // ln(x * C) = ln(x) + ln(C), we can simply do nothing here\\n            // and add ln(2**96 / 10**18) at the end.\\n\\n            // Reduce range of x to (1, 2) * 2**96\\n            // ln(2^k * x) = k * ln(2) + ln(x)\\n            int256 k = int256(log2(uint256(x))) - 96;\\n            x <<= uint256(159 - k);\\n            x = int256(uint256(x) >> 159);\\n\\n            // Evaluate using a (8, 8)-term rational approximation.\\n            // p is made monic, we will multiply by a scale factor later.\\n            int256 p = x + 3273285459638523848632254066296;\\n            p = ((p * x) >> 96) + 24828157081833163892658089445524;\\n            p = ((p * x) >> 96) + 43456485725739037958740375743393;\\n            p = ((p * x) >> 96) - 11111509109440967052023855526967;\\n            p = ((p * x) >> 96) - 45023709667254063763336534515857;\\n            p = ((p * x) >> 96) - 14706773417378608786704636184526;\\n            p = p * x - (795164235651350426258249787498 << 96);\\n\\n            // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n            // q is monic by convention.\\n            int256 q = x + 5573035233440673466300451813936;\\n            q = ((q * x) >> 96) + 71694874799317883764090561454958;\\n            q = ((q * x) >> 96) + 283447036172924575727196451306956;\\n            q = ((q * x) >> 96) + 401686690394027663651624208769553;\\n            q = ((q * x) >> 96) + 204048457590392012362485061816622;\\n            q = ((q * x) >> 96) + 31853899698501571402653359427138;\\n            q = ((q * x) >> 96) + 909429971244387300277376558375;\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial is known not to have zeros in the domain.\\n                // No scaling required because p is already 2**96 too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r is in the range (0, 0.125) * 2**96\\n\\n            // Finalization, we need to:\\n            // * multiply by the scale factor s = 5.549\\u2026\\n            // * add ln(2**96 / 10**18)\\n            // * add k * ln(2)\\n            // * multiply by 10**18 / 2**96 = 5**18 >> 78\\n\\n            // mul s * 5e18 * 2**96, base is now 5**18 * 2**192\\n            r *= 1677202110996718588342820967067443963516166;\\n            // add ln(2) * k * 5e18 * 2**192\\n            r += 16597577552685614221487285958193947469193820559219878177908093499208371 * k;\\n            // add ln(2**96 / 10**18) * 5e18 * 2**192\\n            r += 600920179829731861736702779321621459595472258049074101567377883020018308;\\n            // base conversion: mul 2**18 / 2**192\\n            r >>= 174;\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        require(x > 0, \\\"UNDEFINED\\\");\\n\\n        assembly {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            r := or(r, shl(2, lt(0xf, shr(r, x))))\\n            r := or(r, shl(1, lt(0x3, shr(r, x))))\\n            r := or(r, lt(0x1, shr(r, x)))\\n        }\\n    }\\n\\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            // z will equal 0 if y is 0, unlike in Solidity where it will revert.\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            // z will equal 0 if y is 0, unlike in Solidity where it will revert.\\n            z := div(x, y)\\n        }\\n    }\\n\\n    /// @dev Will return 0 instead of reverting if y is zero.\\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            // Add 1 to x * y if x % y > 0.\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0bf1d4f3999a4471e0fded0a2f67e7fe328e2a27385348571b1fc0a8d9c9f62e\",\"license\":\"MIT\"},\"solmate/src/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private locked = 1;\\n\\n    modifier nonReentrant() virtual {\\n        require(locked == 1, \\\"REENTRANCY\\\");\\n\\n        locked = 2;\\n\\n        _;\\n\\n        locked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa0e50a0f232da7f289430601ba927c315266b20ec739761430b0fde926fefe55\",\"license\":\"MIT\"},\"solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Caution! This library won't check that a token has code, responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // We'll write our calldata to this slot below, but restore it later.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(0, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(4, from) // Append the \\\"from\\\" argument.\\n            mstore(36, to) // Append the \\\"to\\\" argument.\\n            mstore(68, amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because that's the total length of our calldata (4 + 32 * 3)\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                call(gas(), token, 0, 0, 100, 0, 32)\\n            )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // We'll write our calldata to this slot below, but restore it later.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(0, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(4, to) // Append the \\\"to\\\" argument.\\n            mstore(36, amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because that's the total length of our calldata (4 + 32 * 2)\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                call(gas(), token, 0, 0, 68, 0, 32)\\n            )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // We'll write our calldata to this slot below, but restore it later.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(0, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(4, to) // Append the \\\"to\\\" argument.\\n            mstore(36, amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because that's the total length of our calldata (4 + 32 * 2)\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                call(gas(), token, 0, 0, 68, 0, 32)\\n            )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f2e1158c68c1f3d15b80e8a7dd92b6849f873066969562ad33c0abb80e536ff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162004b4938038062004b4983398101604081905262000034916200024d565b33600081815260208181526040808320805460ff1916600190811790915590519081528893889388938893879387938793879391928792879287928792909182917fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a2506001600160a01b039384166080908152600180549486166001600160a01b03199586161790556002805493861693851693909317909255805160038054918616918516919091179055602081015160048054918616918516919091179055604081015160055560608101516006559081015160075560a08101516008805460c084015160e08501516001600160401b0316600160901b02600160901b600160d01b031961ffff909216600160801b026001600160901b03199093166001600160801b039095169490941791909117169190911790556101000151600955600a805493831693821693909317909255600c80549b9091169a90911699909917909855506200035a9a5050505050505050505050565b80516001600160a01b0381168114620001cd57600080fd5b919050565b60405161012081016001600160401b03811182821017156200020457634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160801b0381168114620001cd57600080fd5b805161ffff81168114620001cd57600080fd5b80516001600160401b0381168114620001cd57600080fd5b60008060008060008587036101a08112156200026857600080fd5b6200027387620001b5565b95506200028360208801620001b5565b94506200029360408801620001b5565b935061012080605f1983011215620002aa57600080fd5b620002b4620001d2565b9150620002c460608901620001b5565b8252620002d460808901620001b5565b602083015260a0880151604083015260c0880151606083015260e0880151608083015261010062000307818a016200020a565b60a084015262000319828a0162000222565b60c08401526200032d6101408a0162000235565b60e0840152610160890151908301525091506200034e6101808701620001b5565b90509295509295909350565b6080516147b062000399600039600081816101c4015281816105ee0152818161069b015281816107f101528181610c6c0152610e9c01526147b06000f3fe60806040523480156200001157600080fd5b50600436106200012d5760003560e01c806393d4750c11620000af578063cac0e3c2116200007a578063cac0e3c2146200035a578063cd7740bf1462000371578063dc69c06f1462000388578063f67359ea14620003ae578063ff2a7d3014620003c557600080fd5b806393d4750c146200022d57806395a39fb1146200024e57806396d648791462000265578063bbe451d5146200029c57600080fd5b8063228cb73311620000fc578063228cb73314620001aa578063378efa3714620001be5780633cad2dcd14620001e657806340cc63e114620001fd57806358fdac35146200021957600080fd5b80630c1b797914620001325780631393916a146200016357806318a85cee146200017c5780631a54259c1462000193575b600080fd5b60015462000146906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6200017a62000174366004620010d8565b620003d9565b005b6200017a6200018d36600462001116565b62000487565b6200017a620001a436600462001116565b6200051e565b600a5462000146906001600160a01b031681565b620001467f000000000000000000000000000000000000000000000000000000000000000081565b62000146620001f736600462001187565b620005c7565b62000146735f4ec3df9cbd43714fe2740f5e3616155c5b841981565b600c5462000146906001600160a01b031681565b62000236601f81565b60405165ffffffffffff90911681526020016200015a565b6200017a6200025f3660046200123a565b62000947565b6200028b6200027636600462001116565b60006020819052908152604090205460ff1681565b60405190151581526020016200015a565b600354600454600554600654600754600854600954620002f3966001600160a01b039081169616949392916001600160801b03811691600160801b820461ffff1691600160901b900467ffffffffffffffff169089565b604080516001600160a01b039a8b1681529990981660208a015296880195909552606087019390935260808601919091526001600160801b031660a085015261ffff1660c084015267ffffffffffffffff1660e0830152610100820152610120016200015a565b6200017a6200036b366004620010d8565b62000a69565b6200017a620003823660046200130d565b62000b0a565b6200028b6200039936600462001116565b600b6020526000908152604090205460ff1681565b6200017a620003bf36600462001116565b62000bc1565b60025462000146906001600160a01b031681565b3360009081526020819052604090205460ff166200042a5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b60448201526064015b60405180910390fd5b6001600160a01b03821660008181526020818152604091829020805460ff191685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b3360009081526020819052604090205460ff16620004d45760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640162000421565b600c80546001600160a01b0319166001600160a01b0383169081179091556040517faf0375a607cbd4b5dc85497face63eb09a3dbe35af7003230bc31d0edd14eeaa90600090a250565b3360009081526020819052604090205460ff166200056b5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640162000421565b6002546040516001600160a01b038084169216907f952c654458751f95c1440bdb1537809137b3de28466b80ad096a711707ae987a90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b60008082806020019051810190620005e091906200135f565b9050336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166377aace1a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200064b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200067191906200135f565b6001600160a01b031614620006995760405163fb02114960e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a1256f9f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620006f8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200071e91906200137f565b1580156200074557506001600160a01b0384166000908152600b602052604090205460ff16155b156200076457604051635154a56760e11b815260040160405180910390fd5b60408051610100810182526003546001600160a01b03908116825260045481166020830152600554828401526006546060808401919091526007546080840152600854600160901b810467ffffffffffffffff1660a0850152601f60c0850152600160801b810461ffff1660e0850152600254945193949189901b6bffffffffffffffffffffffff1916937f0000000000000000000000000000000000000000000000000000000000000000938a9316916001600160801b031690869088906200082e9062001093565b6200083f969594939291906200139f565b8190604051809103906000f590508015801562000860573d6000803e3d6000fd5b5092506200086e8362000c6a565b600c546040516309c9c8b560e11b81526001600160a01b0391821660048201526001602482015290841690631393916a90604401600060405180830381600087803b158015620008bd57600080fd5b505af1158015620008d2573d6000803e3d6000fd5b5050600180546040516309c9c8b560e11b81526001600160a01b039182166004820152602481019290925286169250631393916a9150604401600060405180830381600087803b1580156200092657600080fd5b505af11580156200093b573d6000803e3d6000fd5b50505050505092915050565b3360009081526020819052604090205460ff16620009945760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640162000421565b60005b825181101562000a645781600b6000858481518110620009bb57620009bb62001466565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555081151583828151811062000a125762000a1262001466565b60200260200101516001600160a01b03167f34465fae8b1f082faa1eb1845b34c2bfd6b86cc48df2ebf6426eeddd7e3a4c9a60405160405180910390a38062000a5b8162001492565b91505062000997565b505050565b3360009081526020819052604090205460ff1662000ab65760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640162000421565b6001600160a01b0382166000818152600b6020526040808220805460ff191685151590811790915590519092917f34465fae8b1f082faa1eb1845b34c2bfd6b86cc48df2ebf6426eeddd7e3a4c9a91a35050565b3360009081526020819052604090205460ff1662000b575760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640162000421565b6040516309c9c8b560e11b81526001600160a01b0383811660048301528215156024830152841690631393916a90604401600060405180830381600087803b15801562000ba357600080fd5b505af115801562000bb8573d6000803e3d6000fd5b50505050505050565b3360009081526020819052604090205460ff1662000c0e5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640162000421565b6001546040516001600160a01b038084169216907fb656925e78f8f28c65d9357077dfd5d3d0056d5eac98c8c1a1e0b426ffd43d4a90600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166372f7a0306040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000cc9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cef91906200137f565b156200102f576000819050806001600160a01b031663468f02d26040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801562000d57575060408051601f3d908101601f1916820190925262000d5491810190620014ae565b60015b156200102d57600080735f4ec3df9cbd43714fe2740f5e3616155c5b84196001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801562000db3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dd99190620014e3565b50935050925050611c20814262000df1919062001538565b111562000e105760405162bfc92160e01b815260040160405180910390fd5b600062000e2384846305f5e10062001032565b905062000e9881866001600160a01b031663f51e181a6040518163ffffffff1660e01b81526004016020604051808303816000875af115801562000e6b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e919190620014ae565b9062001049565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635fa0cc0a8762000fb084896001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000f0e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f3491906200135f565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000f72573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f989190620014ae565b62000fa590600a6200164f565b600954919062001069565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156200100f57600080fd5b505af115801562001024573d6000803e3d6000fd5b50505050505050505b505b50565b60006200104184848462001073565b949350505050565b6000620010608383670de0b6b3a764000062001073565b90505b92915050565b6000620010418483855b8282028115158415858304851417166200108c57600080fd5b0492915050565b61311d806200165e83390190565b6001600160a01b03811681146200102f57600080fd5b80151581146200102f57600080fd5b8035620010d381620010b7565b919050565b60008060408385031215620010ec57600080fd5b8235620010f981620010a1565b915060208301356200110b81620010b7565b809150509250929050565b6000602082840312156200112957600080fd5b81356200113681620010a1565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156200117f576200117f6200113d565b604052919050565b600080604083850312156200119b57600080fd5b8235620011a881620010a1565b915060208381013567ffffffffffffffff80821115620011c757600080fd5b818601915086601f830112620011dc57600080fd5b813581811115620011f157620011f16200113d565b62001205601f8201601f1916850162001153565b915080825287848285010111156200121c57600080fd5b80848401858401376000848284010152508093505050509250929050565b600080604083850312156200124e57600080fd5b823567ffffffffffffffff808211156200126757600080fd5b818501915085601f8301126200127c57600080fd5b81356020828211156200129357620012936200113d565b8160051b9250620012a681840162001153565b8281529284018101928181019089851115620012c157600080fd5b948201945b84861015620012ef5785359350620012de84620010a1565b8382529482019490820190620012c6565b9650620013009050878201620010c6565b9450505050509250929050565b6000806000606084860312156200132357600080fd5b83356200133081620010a1565b925060208401356200134281620010a1565b915060408401356200135481620010b7565b809150509250925092565b6000602082840312156200137257600080fd5b81516200113681620010a1565b6000602082840312156200139257600080fd5b81516200113681620010b7565b60006101a0820190506001600160a01b038089168352808816602084015280871660408401526001600160801b03861660608401528085511660808401528060208601511660a084015250604084015160c0830152606084015160e0830152608084015161010083015267ffffffffffffffff60a08501511661012083015260c08401516200143961014084018265ffffffffffff169052565b5060e084015161ffff8116610160840152506001600160a01b038316610180830152979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201620014a757620014a76200147c565b5060010190565b600060208284031215620014c157600080fd5b5051919050565b805169ffffffffffffffffffff81168114620010d357600080fd5b600080600080600060a08688031215620014fc57600080fd5b6200150786620014c8565b94506020860151935060408601519250606086015191506200152c60808701620014c8565b90509295509295909350565b6000828210156200154d576200154d6200147c565b500390565b600181815b80851115620015935781600019048211156200157757620015776200147c565b808516156200158557918102915b93841c939080029062001557565b509250929050565b600082620015ac5750600162001063565b81620015bb5750600062001063565b8160018114620015d45760028114620015df57620015ff565b600191505062001063565b60ff841115620015f357620015f36200147c565b50506001821b62001063565b5060208310610133831016604e8410600b841016171562001624575081810a62001063565b62001630838362001552565b80600019048211156200164757620016476200147c565b029392505050565b60006200106083836200159b56fe61014060405260016013553480156200001757600080fd5b506040516200311d3803806200311d8339810160408190526200003a91620006f1565b8585858585858581878787878782338686876001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200008a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b091906200081b565b6001600160a01b03808416608090815283821660a081815284841660c09081526001600160801b038c1660e09081528b51600080549188166001600160a01b031992831617815560208e015160018054919099169216919091179096556040808d015160025560608d0151600355948c01516004908155928c015160058054938e0151928e015161ffff16600160701b0261ffff60701b1965ffffffffffff90941668010000000000000000026001600160701b03199095166001600160401b0390931692909217939093179190911617905582516306fdde0360e01b815292518b948b946306fdde039381810193918290030181865afa158015620001ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001e4919081019062000871565b604051602001620001f6919062000929565b60405160208183030381529060405260069081620002159190620009e6565b50836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000255573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200027f919081019062000871565b60405160200162000291919062000ab2565b60405160208183030381529060405260079081620002b09190620009e6565b50620002da608051600019866001600160a01b03166200050d60201b620016ef179092919060201c565b6200030760805160001983602001516001600160a01b03166200050d60201b620016ef179092919060201c565b505050506001600160a01b038216600081815260086020908152604091829020805460ff1916600190811790915591519182529192507fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25080600960006101000a8154816001600160a01b0302191690836001600160a01b031602179055505060a0516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003f8919062000ae0565b6200040590600a62000c1a565b610100818152505060c0516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200044e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000474919062000ae0565b6200048190601262000c2b565b6200048e90600a62000c1a565b6101208181525050620004c160a05160001960c0516001600160a01b03166200050d60201b620016ef179092919060201c565b5050505050620004d98260016200059660201b60201c565b600b80546001600160a01b0319166001600160a01b03929092169190911790555062000c519b505050505050505050505050565b600060405163095ea7b360e01b6000528360045282602452602060006044600080895af13d15601f3d1160016000511416171691506000606052806040525080620005905760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b60448201526064015b60405180910390fd5b50505050565b3360009081526008602052604090205460ff16620005e35760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640162000587565b6001600160a01b038216600081815260086020908152604091829020805460ff191685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b6001600160a01b03811681146200065857600080fd5b50565b8051620006688162000642565b919050565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b0381118282101715620006a957620006a96200066d565b60405290565b80516001600160401b03811681146200066857600080fd5b805165ffffffffffff811681146200066857600080fd5b805161ffff811681146200066857600080fd5b6000806000806000808688036101a08112156200070d57600080fd5b87516200071a8162000642565b60208901519097506200072d8162000642565b6040890151909650620007408162000642565b60608901519095506001600160801b03811681146200075e57600080fd5b9350610100607f1982018113156200077557600080fd5b6200077f62000683565b91506080890151620007918162000642565b8252620007a160a08a016200065b565b602083015260c0890151604083015260e089015160608301528801516080820152620007d16101208901620006af565b60a0820152620007e56101408901620006c7565b60c0820152620007f96101608901620006de565b60e082015291506200080f61018088016200065b565b90509295509295509295565b6000602082840312156200082e57600080fd5b81516200083b8162000642565b9392505050565b60005b838110156200085f57818101518382015260200162000845565b83811115620005905750506000910152565b6000602082840312156200088457600080fd5b81516001600160401b03808211156200089c57600080fd5b818401915084601f830112620008b157600080fd5b815181811115620008c657620008c66200066d565b604051601f8201601f19908116603f01168101908382118183101715620008f157620008f16200066d565b816040528281528760208487010111156200090b57600080fd5b6200091e83602083016020880162000842565b979650505050505050565b600082516200093d81846020870162000842565b671020b230b83a32b960c11b920191825250600801919050565b600181811c908216806200096c57607f821691505b6020821081036200098d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620009e157600081815260208120601f850160051c81016020861015620009bc5750805b601f850160051c820191505b81811015620009dd57828155600101620009c8565b5050505b505050565b81516001600160401b0381111562000a025762000a026200066d565b62000a1a8162000a13845462000957565b8462000993565b602080601f83116001811462000a52576000841562000a395750858301515b600019600386901b1c1916600185901b178555620009dd565b600085815260208120601f198616915b8281101562000a835788860151825594840194600190910190840162000a62565b508582101562000aa25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000825162000ac681846020870162000842565b6716b0b230b83a32b960c11b920191825250600801919050565b60006020828403121562000af357600080fd5b815160ff811681146200083b57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000b5c57816000190482111562000b405762000b4062000b05565b8085161562000b4e57918102915b93841c939080029062000b20565b509250929050565b60008262000b755750600162000c14565b8162000b845750600062000c14565b816001811462000b9d576002811462000ba85762000bc8565b600191505062000c14565b60ff84111562000bbc5762000bbc62000b05565b50506001821b62000c14565b5060208310610133831016604e8410600b841016171562000bed575081810a62000c14565b62000bf9838362000b1b565b806000190482111562000c105762000c1062000b05565b0290505b92915050565b60006200083b60ff84168362000b64565b600060ff821660ff84168082101562000c485762000c4862000b05565b90039392505050565b60805160a05160c05160e051610100516101205161241a62000d036000396000818161070901526109eb0152600081816106cf01526109c20152600061066c0152600081816105b101528181610b670152610c0f01526000818161045d0152818161076301528181610a1501528181610c5301528181610cf5015281816112340152818161128401528181611346015281816116960152611ab30152600081816104d30152611180015261241a6000f3fe608060405234801561001057600080fd5b50600436106102b45760003560e01c806364c56e3c11610171578063cce59386116100d3578063d4b8399211610097578063f51e181a11610071578063f51e181a14610416578063f60c05ce146107a1578063ff2a7d30146107bc57600080fd5b8063d4b839921461075e578063d9d98ce414610785578063da4ca4131461079857600080fd5b8063cce59386146106ca578063cdfb5832146106f1578063ce4b5bbe14610704578063d01c6f291461072b578063d379be231461074b57600080fd5b806395d89b4111610135578063b8c15a9f1161010f578063b8c15a9f14610667578063c39a3b29146106af578063c5c108c7146106c157600080fd5b806395d89b411461062957806396d6487914610631578063b484972a1461065457600080fd5b806364c56e3c1461058f5780636f307dc3146105ac5780636fd5ae15146105d35780638237e538146105ef5780638aee81271461061657600080fd5b806329a436081161021a5780634aae9fed116101de5780635cffe9de116101b85780635cffe9de14610556578063608c44d614610569578063613255ab1461057c57600080fd5b80634aae9fed1461051d57806351c39ea114610530578063572acb9f1461054357600080fd5b806329a43608146104a65780632c5786b8146104c6578063378efa37146104ce578063379f53e3146104f5578063468f02d21461051557600080fd5b806314282f581161027c578063228cb73311610256578063228cb7331461041e57806327b327d014610449578063295a52121461049357600080fd5b806314282f58146103ef5780631a54259c14610403578063226778491461041657600080fd5b806303314efa146102b957806306fdde03146102d5578063083118d5146102ea5780630e1224231461039c5780631393916a146103da575b600080fd5b6102c2600c5481565b6040519081526020015b60405180910390f35b6102dd6107cf565b6040516102cc9190611f88565b600054600154600254600354600454600554610340956001600160a01b0390811695169392919067ffffffffffffffff81169068010000000000000000810465ffffffffffff1690600160701b900461ffff1688565b604080516001600160a01b03998a168152989097166020890152958701949094526060860192909252608085015267ffffffffffffffff1660a084015265ffffffffffff1660c083015261ffff1660e0820152610100016102cc565b6103ca6103aa366004611ff5565b601260209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016102cc565b6103ed6103e836600461202f565b61085d565b005b6103ed6103fd366004612068565b50505050565b6103ed61041136600461209a565b61090c565b6102c26109b3565b600b54610431906001600160a01b031681565b6040516001600160a01b0390911681526020016102cc565b600154600254604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116825290931660208401528201526060016102cc565b600554600160701b900461ffff166102c2565b6102c26104b436600461209a565b600f6020526000908152604090205481565b6103ed610a8f565b6104317f000000000000000000000000000000000000000000000000000000000000000081565b6102c261050336600461209a565b60106020526000908152604090205481565b6102c2610b4c565b6102c261052b3660046120b7565b610c00565b6102c261053e3660046120b7565b610ccf565b6103ed61055136600461211c565b610d2c565b6103ca610564366004612188565b611172565b6103ed61057736600461209a565b61137b565b6102c261058a36600461209a565b6114d8565b61059761151f565b604080519283526020830191909152016102cc565b6104317f000000000000000000000000000000000000000000000000000000000000000081565b60055468010000000000000000900465ffffffffffff166102c2565b6102c27f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd981565b6103ed61062436600461209a565b611543565b6102dd6115e0565b6103ca61063f36600461209a565b60086020526000908152604090205460ff1681565b6103ed610662366004612227565b6115ed565b61068e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516fffffffffffffffffffffffffffffffff90911681526020016102cc565b60055467ffffffffffffffff166102c2565b6102c2600d5481565b6102c27f000000000000000000000000000000000000000000000000000000000000000081565b6103ed6106ff36600461209a565b6115fd565b6102c27f000000000000000000000000000000000000000000000000000000000000000081565b6102c261073936600461209a565b60116020526000908152604090205481565b600a54610431906001600160a01b031681565b6104317f000000000000000000000000000000000000000000000000000000000000000081565b6102c2610793366004611ff5565b611692565b6102c2600e5481565b610431731887118e49e0f4a78bd71b792a49de03504a764d81565b600954610431906001600160a01b031681565b600680546107dc90612269565b80601f016020809104026020016040519081016040528092919081815260200182805461080890612269565b80156108555780601f1061082a57610100808354040283529160200191610855565b820191906000526020600020905b81548152906001019060200180831161083857829003601f168201915b505050505081565b3360009081526008602052604090205460ff166108ad5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b60448201526064015b60405180910390fd5b6001600160a01b038216600081815260086020908152604091829020805460ff191685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b3360009081526008602052604090205460ff166109575760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b60448201526064016108a4565b6009546040516001600160a01b038084169216907f952c654458751f95c1440bdb1537809137b3de28466b80ad096a711707ae987a90600090a3600980546001600160a01b0319166001600160a01b0392909216919091179055565b6040516303d1689d60e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906307a2d13a90602401602060405180830381865afa158015610a5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8091906122a3565b610a8a91906122d2565b905090565b3360009081526008602052604090205460ff16610ada5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b60448201526064016108a4565b60026013819055600154905460405163dfd4718f60e01b81526001600160a01b0390921660048301526024820152339063dfd4718f90604401600060405180830381600087803b158015610b2d57600080fd5b505af1158015610b41573d6000803e3d6000fd5b505060016013555050565b600080546040516315d5220f60e31b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301529091169063aea9107890602401602060405180830381865afa158015610bb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdb91906122a3565b905080600003610bfd5760405162bfc92160e01b815260040160405180910390fd5b90565b6000610c376001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308561177b565b604051636e553f6560e01b8152600481018390523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636e553f65906044015b6020604051808303816000875af1158015610ca5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc991906122a3565b92915050565b604051635d043b2960e11b815260048101829052336024820181905260448201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ba08765290606401610c86565b6000306001600160a01b031663378efa376040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9091906122f1565b905060005b8281101561116a5760005b85811015611157576000878783818110610dbc57610dbc61230e565b9050602002016020810190610dd1919061209a565b90506000846001600160a01b031663574e779530898988818110610df757610df761230e565b6040516001600160e01b031960e087901b1681526001600160a01b0390941660048501526020029190910135602483015250604401602060405180830381865afa158015610e49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6d91906122f1565b6040516370a0823160e01b81526001600160a01b03848116600483015291909116906370a0823190602401602060405180830381865afa158015610eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed991906122a3565b905042878786818110610eee57610eee61230e565b9050602002013511158015610f035750600081115b8015610f5457506001600160a01b038216600090815260126020526040812090888887818110610f3557610f3561230e565b602090810292909201358352508101919091526040016000205460ff16155b1561114257610f6282611812565b6000611010866001600160a01b0316632f9cd854308b8b8a818110610f8957610f8961230e565b6040516001600160e01b031960e087901b1681526001600160a01b039485166004820152602090910292909201356024830152509087166044820152606401602060405180830381865afa158015610fe5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100991906122a3565b8390611a07565b905080600e60008282546110249190612324565b90915550506001600160a01b0383166000908152600f602052604081208054839290611051908490612324565b90915550506001600160a01b0383166000908152601160205260408120805483929061107e90849061233b565b90915550506001600160a01b03831660009081526012602052604081206001918a8a898181106110b0576110b061230e565b90506020020135815260200190815260200160002060006101000a81548160ff021916908315150217905550826001600160a01b03167f5758e413a9bfd3ec45a67abaa9ee2396cab143a505332bf7ab48c0e624b65f11828a8a8981811061111a5761111a61230e565b90506020020135604051611138929190918252602082015260400190565b60405180910390a2505b5050808061114f90612353565b915050610da0565b508061116281612353565b915050610d95565b505050505050565b6000336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166377aace1a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120091906122f1565b6001600160a01b0316146112275760405163fb02114960e01b815260040160405180910390fd5b61125b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168786611a23565b6040516323e30c8b60e01b81526000906001600160a01b038816906323e30c8b906112b49033907f0000000000000000000000000000000000000000000000000000000000000000908a9087908b908b9060040161236c565b6020604051808303816000875af11580156112d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f791906122a3565b90507f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd981146113395760405163081f7c8760e21b815260040160405180910390fd5b61136e6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001688308861177b565b5060019695505050505050565b61138481611aaf565b6113a157604051633dd1b30560e01b815260040160405180910390fd5b6040516370a0823160e01b815230600482015281906000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156113ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140e91906122a3565b6009546040516370a0823160e01b8152306004820152919250611495916001600160a01b03918216918516906370a0823190602401602060405180830381865afa158015611460573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148491906122a3565b6001600160a01b0385169190611a23565b60095460405182916001600160a01b0390811691908616907f9310ccfcb8de723f578a9e4282ea9f521f05ae40dc08f3068dfad528a65ee3c790600090a4505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610ca5573d6000803e3d6000fd5b6000806013546002146115345760008061153b565b6003546004545b915091509091565b3360009081526008602052604090205460ff1661158e5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b60448201526064016108a4565b611596611b1e565b600b80546001600160a01b0319166001600160a01b0383169081179091556040517fb74d956cf6ec7842d08ebf0ab19ec03a88c1efd4a50ea4349d30f9c4ce512e9890600090a250565b600780546107dc90612269565b6115f8838383611d77565b505050565b3360009081526008602052604090205460ff166116485760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b60448201526064016108a4565b600a80546001600160a01b0319166001600160a01b0383169081179091556040517f70e1f29a97aa858ce785e48a42e40cd51020a45c8a2e4520272a6303585916a990600090a250565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316146116e657604051633dd1b30560e01b815260040160405180910390fd5b50600092915050565b600060405163095ea7b360e01b6000528360045282602452602060006044600080895af13d15601f3d11600160005114161716915060006060528060405250806103fd5760405162461bcd60e51b815260206004820152600e60248201527f415050524f56455f4641494c454400000000000000000000000000000000000060448201526064016108a4565b60006040516323b872dd60e01b6000528460045283602452826044526020600060646000808a5af13d15601f3d116001600051141617169150600060605280604052508061180b5760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c454400000000000000000000000060448201526064016108a4565b5050505050565b61181a611b1e565b600d54600b546040516370a0823160e01b8152306004820152600092916001600160a01b0316906370a0823190602401602060405180830381865afa158015611867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188b91906122a3565b6118959190612324565b600e54909150156118d257600e546118bb9082906b033b2e3c9fd0803ce8000000611f15565b600c60008282546118cc919061233b565b90915550505b6001600160a01b038216600090815260106020908152604080832054600c54600f9093529083205490929161191491906b033b2e3c9fd0803ce8000000611f2a565b90508181111561193757600b54611937906001600160a01b031685848403611a23565b600b546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561197f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a391906122a3565b600d55600b546001600160a01b039081169085167fad4a9acf26d8bba7a8cf1a41160d59be042ee554578e256c98d2ab74cdd435428484116119e65760006119f0565b6119f08585612324565b60405190815260200160405180910390a350505050565b6000611a1c83670de0b6b3a764000084611f33565b9392505050565b600060405163a9059cbb60e01b6000528360045282602452602060006044600080895af13d15601f3d11600160005114161716915060006060528060405250806103fd5760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c4544000000000000000000000000000000000060448201526064016108a4565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614158015611b0157506001546001600160a01b03838116911614155b8015610cc9575050600b546001600160a01b039081169116141590565b600a546001600160a01b031615611d75576000306001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9391906122f1565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611bdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0191906122a3565b90508015611d7257600a5460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529083169063a9059cbb906044016020604051808303816000875af1158015611c5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8091906123c7565b50600a60009054906101000a90046001600160a01b03166001600160a01b0316634e71d92d6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611cd157600080fd5b505af1158015611ce5573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201528392506001600160a01b03851691506370a0823190602401602060405180830381865afa158015611d2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5391906122a3565b1015611d72576040516341ac6b7d60e01b815260040160405180910390fd5b50505b565b3360009081526008602052604090205460ff16611dc25760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b60448201526064016108a4565b611dcb83611812565b8115611ec2578015611e215781600e6000828254611de9919061233b565b90915550506001600160a01b0383166000908152600f602052604081208054849290611e1690849061233b565b90915550611ec29050565b6001600160a01b0383166000908152601160205260409020548015611e755780831015611e52576000929003611e59565b9091039060005b6001600160a01b03841660009081526011602052604090208190555b8215611ec05782600e6000828254611e8d9190612324565b90915550506001600160a01b0384166000908152600f602052604081208054859290611eba908490612324565b90915550505b505b600c546001600160a01b0384166000908152600f6020526040902054611ef4916b033b2e3c9fd0803ce8000000611f52565b6001600160a01b039093166000908152601060205260409020929092555050565b6000611f22848385611f33565b949350505050565b6000611f228484845b828202811515841585830485141716611f4b57600080fd5b0492915050565b6000611f22848484828202811515841585830485141716611f7257600080fd5b6001826001830304018115150290509392505050565b600060208083528351808285015260005b81811015611fb557858101830151858201604001528201611f99565b81811115611fc7576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b0381168114611ff257600080fd5b50565b6000806040838503121561200857600080fd5b823561201381611fdd565b946020939093013593505050565b8015158114611ff257600080fd5b6000806040838503121561204257600080fd5b823561204d81611fdd565b9150602083013561205d81612021565b809150509250929050565b6000806000806080858703121561207e57600080fd5b5050823594602084013594506040840135936060013592509050565b6000602082840312156120ac57600080fd5b8135611a1c81611fdd565b6000602082840312156120c957600080fd5b5035919050565b60008083601f8401126120e257600080fd5b50813567ffffffffffffffff8111156120fa57600080fd5b6020830191508360208260051b850101111561211557600080fd5b9250929050565b6000806000806040858703121561213257600080fd5b843567ffffffffffffffff8082111561214a57600080fd5b612156888389016120d0565b9096509450602087013591508082111561216f57600080fd5b5061217c878288016120d0565b95989497509550505050565b6000806000806000608086880312156121a057600080fd5b85356121ab81611fdd565b945060208601356121bb81611fdd565b935060408601359250606086013567ffffffffffffffff808211156121df57600080fd5b818801915088601f8301126121f357600080fd5b81358181111561220257600080fd5b89602082850101111561221457600080fd5b9699959850939650602001949392505050565b60008060006060848603121561223c57600080fd5b833561224781611fdd565b925060208401359150604084013561225e81612021565b809150509250925092565b600181811c9082168061227d57607f821691505b60208210810361229d57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156122b557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156122ec576122ec6122bc565b500290565b60006020828403121561230357600080fd5b8151611a1c81611fdd565b634e487b7160e01b600052603260045260246000fd5b600082821015612336576123366122bc565b500390565b6000821982111561234e5761234e6122bc565b500190565b600060018201612365576123656122bc565b5060010190565b60006001600160a01b03808916835280881660208401525085604083015284606083015260a060808301528260a0830152828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b6000602082840312156123d957600080fd5b8151611a1c8161202156fea26469706673582212201c8aed07106373ce5a477acb20b291ef737c54f67ec588df2b5bc0e416921eb564736f6c634300080f0033a2646970667358221220e443c13e208de0c388fbc518a9da545b7b6cb65e45398ef7a79c176a7875f0e764736f6c634300080f0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200012d5760003560e01c806393d4750c11620000af578063cac0e3c2116200007a578063cac0e3c2146200035a578063cd7740bf1462000371578063dc69c06f1462000388578063f67359ea14620003ae578063ff2a7d3014620003c557600080fd5b806393d4750c146200022d57806395a39fb1146200024e57806396d648791462000265578063bbe451d5146200029c57600080fd5b8063228cb73311620000fc578063228cb73314620001aa578063378efa3714620001be5780633cad2dcd14620001e657806340cc63e114620001fd57806358fdac35146200021957600080fd5b80630c1b797914620001325780631393916a146200016357806318a85cee146200017c5780631a54259c1462000193575b600080fd5b60015462000146906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6200017a62000174366004620010d8565b620003d9565b005b6200017a6200018d36600462001116565b62000487565b6200017a620001a436600462001116565b6200051e565b600a5462000146906001600160a01b031681565b620001467f000000000000000000000000000000000000000000000000000000000000000081565b62000146620001f736600462001187565b620005c7565b62000146735f4ec3df9cbd43714fe2740f5e3616155c5b841981565b600c5462000146906001600160a01b031681565b62000236601f81565b60405165ffffffffffff90911681526020016200015a565b6200017a6200025f3660046200123a565b62000947565b6200028b6200027636600462001116565b60006020819052908152604090205460ff1681565b60405190151581526020016200015a565b600354600454600554600654600754600854600954620002f3966001600160a01b039081169616949392916001600160801b03811691600160801b820461ffff1691600160901b900467ffffffffffffffff169089565b604080516001600160a01b039a8b1681529990981660208a015296880195909552606087019390935260808601919091526001600160801b031660a085015261ffff1660c084015267ffffffffffffffff1660e0830152610100820152610120016200015a565b6200017a6200036b366004620010d8565b62000a69565b6200017a620003823660046200130d565b62000b0a565b6200028b6200039936600462001116565b600b6020526000908152604090205460ff1681565b6200017a620003bf36600462001116565b62000bc1565b60025462000146906001600160a01b031681565b3360009081526020819052604090205460ff166200042a5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b60448201526064015b60405180910390fd5b6001600160a01b03821660008181526020818152604091829020805460ff191685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b3360009081526020819052604090205460ff16620004d45760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640162000421565b600c80546001600160a01b0319166001600160a01b0383169081179091556040517faf0375a607cbd4b5dc85497face63eb09a3dbe35af7003230bc31d0edd14eeaa90600090a250565b3360009081526020819052604090205460ff166200056b5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640162000421565b6002546040516001600160a01b038084169216907f952c654458751f95c1440bdb1537809137b3de28466b80ad096a711707ae987a90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b60008082806020019051810190620005e091906200135f565b9050336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166377aace1a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200064b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200067191906200135f565b6001600160a01b031614620006995760405163fb02114960e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a1256f9f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620006f8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200071e91906200137f565b1580156200074557506001600160a01b0384166000908152600b602052604090205460ff16155b156200076457604051635154a56760e11b815260040160405180910390fd5b60408051610100810182526003546001600160a01b03908116825260045481166020830152600554828401526006546060808401919091526007546080840152600854600160901b810467ffffffffffffffff1660a0850152601f60c0850152600160801b810461ffff1660e0850152600254945193949189901b6bffffffffffffffffffffffff1916937f0000000000000000000000000000000000000000000000000000000000000000938a9316916001600160801b031690869088906200082e9062001093565b6200083f969594939291906200139f565b8190604051809103906000f590508015801562000860573d6000803e3d6000fd5b5092506200086e8362000c6a565b600c546040516309c9c8b560e11b81526001600160a01b0391821660048201526001602482015290841690631393916a90604401600060405180830381600087803b158015620008bd57600080fd5b505af1158015620008d2573d6000803e3d6000fd5b5050600180546040516309c9c8b560e11b81526001600160a01b039182166004820152602481019290925286169250631393916a9150604401600060405180830381600087803b1580156200092657600080fd5b505af11580156200093b573d6000803e3d6000fd5b50505050505092915050565b3360009081526020819052604090205460ff16620009945760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640162000421565b60005b825181101562000a645781600b6000858481518110620009bb57620009bb62001466565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555081151583828151811062000a125762000a1262001466565b60200260200101516001600160a01b03167f34465fae8b1f082faa1eb1845b34c2bfd6b86cc48df2ebf6426eeddd7e3a4c9a60405160405180910390a38062000a5b8162001492565b91505062000997565b505050565b3360009081526020819052604090205460ff1662000ab65760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640162000421565b6001600160a01b0382166000818152600b6020526040808220805460ff191685151590811790915590519092917f34465fae8b1f082faa1eb1845b34c2bfd6b86cc48df2ebf6426eeddd7e3a4c9a91a35050565b3360009081526020819052604090205460ff1662000b575760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640162000421565b6040516309c9c8b560e11b81526001600160a01b0383811660048301528215156024830152841690631393916a90604401600060405180830381600087803b15801562000ba357600080fd5b505af115801562000bb8573d6000803e3d6000fd5b50505050505050565b3360009081526020819052604090205460ff1662000c0e5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640162000421565b6001546040516001600160a01b038084169216907fb656925e78f8f28c65d9357077dfd5d3d0056d5eac98c8c1a1e0b426ffd43d4a90600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166372f7a0306040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000cc9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cef91906200137f565b156200102f576000819050806001600160a01b031663468f02d26040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801562000d57575060408051601f3d908101601f1916820190925262000d5491810190620014ae565b60015b156200102d57600080735f4ec3df9cbd43714fe2740f5e3616155c5b84196001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801562000db3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dd99190620014e3565b50935050925050611c20814262000df1919062001538565b111562000e105760405162bfc92160e01b815260040160405180910390fd5b600062000e2384846305f5e10062001032565b905062000e9881866001600160a01b031663f51e181a6040518163ffffffff1660e01b81526004016020604051808303816000875af115801562000e6b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e919190620014ae565b9062001049565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635fa0cc0a8762000fb084896001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000f0e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f3491906200135f565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000f72573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f989190620014ae565b62000fa590600a6200164f565b600954919062001069565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156200100f57600080fd5b505af115801562001024573d6000803e3d6000fd5b50505050505050505b505b50565b60006200104184848462001073565b949350505050565b6000620010608383670de0b6b3a764000062001073565b90505b92915050565b6000620010418483855b8282028115158415858304851417166200108c57600080fd5b0492915050565b61311d806200165e83390190565b6001600160a01b03811681146200102f57600080fd5b80151581146200102f57600080fd5b8035620010d381620010b7565b919050565b60008060408385031215620010ec57600080fd5b8235620010f981620010a1565b915060208301356200110b81620010b7565b809150509250929050565b6000602082840312156200112957600080fd5b81356200113681620010a1565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156200117f576200117f6200113d565b604052919050565b600080604083850312156200119b57600080fd5b8235620011a881620010a1565b915060208381013567ffffffffffffffff80821115620011c757600080fd5b818601915086601f830112620011dc57600080fd5b813581811115620011f157620011f16200113d565b62001205601f8201601f1916850162001153565b915080825287848285010111156200121c57600080fd5b80848401858401376000848284010152508093505050509250929050565b600080604083850312156200124e57600080fd5b823567ffffffffffffffff808211156200126757600080fd5b818501915085601f8301126200127c57600080fd5b81356020828211156200129357620012936200113d565b8160051b9250620012a681840162001153565b8281529284018101928181019089851115620012c157600080fd5b948201945b84861015620012ef5785359350620012de84620010a1565b8382529482019490820190620012c6565b9650620013009050878201620010c6565b9450505050509250929050565b6000806000606084860312156200132357600080fd5b83356200133081620010a1565b925060208401356200134281620010a1565b915060408401356200135481620010b7565b809150509250925092565b6000602082840312156200137257600080fd5b81516200113681620010a1565b6000602082840312156200139257600080fd5b81516200113681620010b7565b60006101a0820190506001600160a01b038089168352808816602084015280871660408401526001600160801b03861660608401528085511660808401528060208601511660a084015250604084015160c0830152606084015160e0830152608084015161010083015267ffffffffffffffff60a08501511661012083015260c08401516200143961014084018265ffffffffffff169052565b5060e084015161ffff8116610160840152506001600160a01b038316610180830152979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201620014a757620014a76200147c565b5060010190565b600060208284031215620014c157600080fd5b5051919050565b805169ffffffffffffffffffff81168114620010d357600080fd5b600080600080600060a08688031215620014fc57600080fd5b6200150786620014c8565b94506020860151935060408601519250606086015191506200152c60808701620014c8565b90509295509295909350565b6000828210156200154d576200154d6200147c565b500390565b600181815b80851115620015935781600019048211156200157757620015776200147c565b808516156200158557918102915b93841c939080029062001557565b509250929050565b600082620015ac5750600162001063565b81620015bb5750600062001063565b8160018114620015d45760028114620015df57620015ff565b600191505062001063565b60ff841115620015f357620015f36200147c565b50506001821b62001063565b5060208310610133831016604e8410600b841016171562001624575081810a62001063565b62001630838362001552565b80600019048211156200164757620016476200147c565b029392505050565b60006200106083836200159b56fe61014060405260016013553480156200001757600080fd5b506040516200311d3803806200311d8339810160408190526200003a91620006f1565b8585858585858581878787878782338686876001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200008a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b091906200081b565b6001600160a01b03808416608090815283821660a081815284841660c09081526001600160801b038c1660e09081528b51600080549188166001600160a01b031992831617815560208e015160018054919099169216919091179096556040808d015160025560608d0151600355948c01516004908155928c015160058054938e0151928e015161ffff16600160701b0261ffff60701b1965ffffffffffff90941668010000000000000000026001600160701b03199095166001600160401b0390931692909217939093179190911617905582516306fdde0360e01b815292518b948b946306fdde039381810193918290030181865afa158015620001ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001e4919081019062000871565b604051602001620001f6919062000929565b60405160208183030381529060405260069081620002159190620009e6565b50836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000255573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200027f919081019062000871565b60405160200162000291919062000ab2565b60405160208183030381529060405260079081620002b09190620009e6565b50620002da608051600019866001600160a01b03166200050d60201b620016ef179092919060201c565b6200030760805160001983602001516001600160a01b03166200050d60201b620016ef179092919060201c565b505050506001600160a01b038216600081815260086020908152604091829020805460ff1916600190811790915591519182529192507fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25080600960006101000a8154816001600160a01b0302191690836001600160a01b031602179055505060a0516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003f8919062000ae0565b6200040590600a62000c1a565b610100818152505060c0516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200044e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000474919062000ae0565b6200048190601262000c2b565b6200048e90600a62000c1a565b6101208181525050620004c160a05160001960c0516001600160a01b03166200050d60201b620016ef179092919060201c565b5050505050620004d98260016200059660201b60201c565b600b80546001600160a01b0319166001600160a01b03929092169190911790555062000c519b505050505050505050505050565b600060405163095ea7b360e01b6000528360045282602452602060006044600080895af13d15601f3d1160016000511416171691506000606052806040525080620005905760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b60448201526064015b60405180910390fd5b50505050565b3360009081526008602052604090205460ff16620005e35760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640162000587565b6001600160a01b038216600081815260086020908152604091829020805460ff191685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b6001600160a01b03811681146200065857600080fd5b50565b8051620006688162000642565b919050565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b0381118282101715620006a957620006a96200066d565b60405290565b80516001600160401b03811681146200066857600080fd5b805165ffffffffffff811681146200066857600080fd5b805161ffff811681146200066857600080fd5b6000806000806000808688036101a08112156200070d57600080fd5b87516200071a8162000642565b60208901519097506200072d8162000642565b6040890151909650620007408162000642565b60608901519095506001600160801b03811681146200075e57600080fd5b9350610100607f1982018113156200077557600080fd5b6200077f62000683565b91506080890151620007918162000642565b8252620007a160a08a016200065b565b602083015260c0890151604083015260e089015160608301528801516080820152620007d16101208901620006af565b60a0820152620007e56101408901620006c7565b60c0820152620007f96101608901620006de565b60e082015291506200080f61018088016200065b565b90509295509295509295565b6000602082840312156200082e57600080fd5b81516200083b8162000642565b9392505050565b60005b838110156200085f57818101518382015260200162000845565b83811115620005905750506000910152565b6000602082840312156200088457600080fd5b81516001600160401b03808211156200089c57600080fd5b818401915084601f830112620008b157600080fd5b815181811115620008c657620008c66200066d565b604051601f8201601f19908116603f01168101908382118183101715620008f157620008f16200066d565b816040528281528760208487010111156200090b57600080fd5b6200091e83602083016020880162000842565b979650505050505050565b600082516200093d81846020870162000842565b671020b230b83a32b960c11b920191825250600801919050565b600181811c908216806200096c57607f821691505b6020821081036200098d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620009e157600081815260208120601f850160051c81016020861015620009bc5750805b601f850160051c820191505b81811015620009dd57828155600101620009c8565b5050505b505050565b81516001600160401b0381111562000a025762000a026200066d565b62000a1a8162000a13845462000957565b8462000993565b602080601f83116001811462000a52576000841562000a395750858301515b600019600386901b1c1916600185901b178555620009dd565b600085815260208120601f198616915b8281101562000a835788860151825594840194600190910190840162000a62565b508582101562000aa25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000825162000ac681846020870162000842565b6716b0b230b83a32b960c11b920191825250600801919050565b60006020828403121562000af357600080fd5b815160ff811681146200083b57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000b5c57816000190482111562000b405762000b4062000b05565b8085161562000b4e57918102915b93841c939080029062000b20565b509250929050565b60008262000b755750600162000c14565b8162000b845750600062000c14565b816001811462000b9d576002811462000ba85762000bc8565b600191505062000c14565b60ff84111562000bbc5762000bbc62000b05565b50506001821b62000c14565b5060208310610133831016604e8410600b841016171562000bed575081810a62000c14565b62000bf9838362000b1b565b806000190482111562000c105762000c1062000b05565b0290505b92915050565b60006200083b60ff84168362000b64565b600060ff821660ff84168082101562000c485762000c4862000b05565b90039392505050565b60805160a05160c05160e051610100516101205161241a62000d036000396000818161070901526109eb0152600081816106cf01526109c20152600061066c0152600081816105b101528181610b670152610c0f01526000818161045d0152818161076301528181610a1501528181610c5301528181610cf5015281816112340152818161128401528181611346015281816116960152611ab30152600081816104d30152611180015261241a6000f3fe608060405234801561001057600080fd5b50600436106102b45760003560e01c806364c56e3c11610171578063cce59386116100d3578063d4b8399211610097578063f51e181a11610071578063f51e181a14610416578063f60c05ce146107a1578063ff2a7d30146107bc57600080fd5b8063d4b839921461075e578063d9d98ce414610785578063da4ca4131461079857600080fd5b8063cce59386146106ca578063cdfb5832146106f1578063ce4b5bbe14610704578063d01c6f291461072b578063d379be231461074b57600080fd5b806395d89b4111610135578063b8c15a9f1161010f578063b8c15a9f14610667578063c39a3b29146106af578063c5c108c7146106c157600080fd5b806395d89b411461062957806396d6487914610631578063b484972a1461065457600080fd5b806364c56e3c1461058f5780636f307dc3146105ac5780636fd5ae15146105d35780638237e538146105ef5780638aee81271461061657600080fd5b806329a436081161021a5780634aae9fed116101de5780635cffe9de116101b85780635cffe9de14610556578063608c44d614610569578063613255ab1461057c57600080fd5b80634aae9fed1461051d57806351c39ea114610530578063572acb9f1461054357600080fd5b806329a43608146104a65780632c5786b8146104c6578063378efa37146104ce578063379f53e3146104f5578063468f02d21461051557600080fd5b806314282f581161027c578063228cb73311610256578063228cb7331461041e57806327b327d014610449578063295a52121461049357600080fd5b806314282f58146103ef5780631a54259c14610403578063226778491461041657600080fd5b806303314efa146102b957806306fdde03146102d5578063083118d5146102ea5780630e1224231461039c5780631393916a146103da575b600080fd5b6102c2600c5481565b6040519081526020015b60405180910390f35b6102dd6107cf565b6040516102cc9190611f88565b600054600154600254600354600454600554610340956001600160a01b0390811695169392919067ffffffffffffffff81169068010000000000000000810465ffffffffffff1690600160701b900461ffff1688565b604080516001600160a01b03998a168152989097166020890152958701949094526060860192909252608085015267ffffffffffffffff1660a084015265ffffffffffff1660c083015261ffff1660e0820152610100016102cc565b6103ca6103aa366004611ff5565b601260209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016102cc565b6103ed6103e836600461202f565b61085d565b005b6103ed6103fd366004612068565b50505050565b6103ed61041136600461209a565b61090c565b6102c26109b3565b600b54610431906001600160a01b031681565b6040516001600160a01b0390911681526020016102cc565b600154600254604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116825290931660208401528201526060016102cc565b600554600160701b900461ffff166102c2565b6102c26104b436600461209a565b600f6020526000908152604090205481565b6103ed610a8f565b6104317f000000000000000000000000000000000000000000000000000000000000000081565b6102c261050336600461209a565b60106020526000908152604090205481565b6102c2610b4c565b6102c261052b3660046120b7565b610c00565b6102c261053e3660046120b7565b610ccf565b6103ed61055136600461211c565b610d2c565b6103ca610564366004612188565b611172565b6103ed61057736600461209a565b61137b565b6102c261058a36600461209a565b6114d8565b61059761151f565b604080519283526020830191909152016102cc565b6104317f000000000000000000000000000000000000000000000000000000000000000081565b60055468010000000000000000900465ffffffffffff166102c2565b6102c27f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd981565b6103ed61062436600461209a565b611543565b6102dd6115e0565b6103ca61063f36600461209a565b60086020526000908152604090205460ff1681565b6103ed610662366004612227565b6115ed565b61068e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516fffffffffffffffffffffffffffffffff90911681526020016102cc565b60055467ffffffffffffffff166102c2565b6102c2600d5481565b6102c27f000000000000000000000000000000000000000000000000000000000000000081565b6103ed6106ff36600461209a565b6115fd565b6102c27f000000000000000000000000000000000000000000000000000000000000000081565b6102c261073936600461209a565b60116020526000908152604090205481565b600a54610431906001600160a01b031681565b6104317f000000000000000000000000000000000000000000000000000000000000000081565b6102c2610793366004611ff5565b611692565b6102c2600e5481565b610431731887118e49e0f4a78bd71b792a49de03504a764d81565b600954610431906001600160a01b031681565b600680546107dc90612269565b80601f016020809104026020016040519081016040528092919081815260200182805461080890612269565b80156108555780601f1061082a57610100808354040283529160200191610855565b820191906000526020600020905b81548152906001019060200180831161083857829003601f168201915b505050505081565b3360009081526008602052604090205460ff166108ad5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b60448201526064015b60405180910390fd5b6001600160a01b038216600081815260086020908152604091829020805460ff191685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b3360009081526008602052604090205460ff166109575760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b60448201526064016108a4565b6009546040516001600160a01b038084169216907f952c654458751f95c1440bdb1537809137b3de28466b80ad096a711707ae987a90600090a3600980546001600160a01b0319166001600160a01b0392909216919091179055565b6040516303d1689d60e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906307a2d13a90602401602060405180830381865afa158015610a5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8091906122a3565b610a8a91906122d2565b905090565b3360009081526008602052604090205460ff16610ada5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b60448201526064016108a4565b60026013819055600154905460405163dfd4718f60e01b81526001600160a01b0390921660048301526024820152339063dfd4718f90604401600060405180830381600087803b158015610b2d57600080fd5b505af1158015610b41573d6000803e3d6000fd5b505060016013555050565b600080546040516315d5220f60e31b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301529091169063aea9107890602401602060405180830381865afa158015610bb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdb91906122a3565b905080600003610bfd5760405162bfc92160e01b815260040160405180910390fd5b90565b6000610c376001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308561177b565b604051636e553f6560e01b8152600481018390523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636e553f65906044015b6020604051808303816000875af1158015610ca5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc991906122a3565b92915050565b604051635d043b2960e11b815260048101829052336024820181905260448201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ba08765290606401610c86565b6000306001600160a01b031663378efa376040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9091906122f1565b905060005b8281101561116a5760005b85811015611157576000878783818110610dbc57610dbc61230e565b9050602002016020810190610dd1919061209a565b90506000846001600160a01b031663574e779530898988818110610df757610df761230e565b6040516001600160e01b031960e087901b1681526001600160a01b0390941660048501526020029190910135602483015250604401602060405180830381865afa158015610e49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6d91906122f1565b6040516370a0823160e01b81526001600160a01b03848116600483015291909116906370a0823190602401602060405180830381865afa158015610eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed991906122a3565b905042878786818110610eee57610eee61230e565b9050602002013511158015610f035750600081115b8015610f5457506001600160a01b038216600090815260126020526040812090888887818110610f3557610f3561230e565b602090810292909201358352508101919091526040016000205460ff16155b1561114257610f6282611812565b6000611010866001600160a01b0316632f9cd854308b8b8a818110610f8957610f8961230e565b6040516001600160e01b031960e087901b1681526001600160a01b039485166004820152602090910292909201356024830152509087166044820152606401602060405180830381865afa158015610fe5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100991906122a3565b8390611a07565b905080600e60008282546110249190612324565b90915550506001600160a01b0383166000908152600f602052604081208054839290611051908490612324565b90915550506001600160a01b0383166000908152601160205260408120805483929061107e90849061233b565b90915550506001600160a01b03831660009081526012602052604081206001918a8a898181106110b0576110b061230e565b90506020020135815260200190815260200160002060006101000a81548160ff021916908315150217905550826001600160a01b03167f5758e413a9bfd3ec45a67abaa9ee2396cab143a505332bf7ab48c0e624b65f11828a8a8981811061111a5761111a61230e565b90506020020135604051611138929190918252602082015260400190565b60405180910390a2505b5050808061114f90612353565b915050610da0565b508061116281612353565b915050610d95565b505050505050565b6000336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166377aace1a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120091906122f1565b6001600160a01b0316146112275760405163fb02114960e01b815260040160405180910390fd5b61125b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168786611a23565b6040516323e30c8b60e01b81526000906001600160a01b038816906323e30c8b906112b49033907f0000000000000000000000000000000000000000000000000000000000000000908a9087908b908b9060040161236c565b6020604051808303816000875af11580156112d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f791906122a3565b90507f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd981146113395760405163081f7c8760e21b815260040160405180910390fd5b61136e6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001688308861177b565b5060019695505050505050565b61138481611aaf565b6113a157604051633dd1b30560e01b815260040160405180910390fd5b6040516370a0823160e01b815230600482015281906000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156113ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140e91906122a3565b6009546040516370a0823160e01b8152306004820152919250611495916001600160a01b03918216918516906370a0823190602401602060405180830381865afa158015611460573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148491906122a3565b6001600160a01b0385169190611a23565b60095460405182916001600160a01b0390811691908616907f9310ccfcb8de723f578a9e4282ea9f521f05ae40dc08f3068dfad528a65ee3c790600090a4505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610ca5573d6000803e3d6000fd5b6000806013546002146115345760008061153b565b6003546004545b915091509091565b3360009081526008602052604090205460ff1661158e5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b60448201526064016108a4565b611596611b1e565b600b80546001600160a01b0319166001600160a01b0383169081179091556040517fb74d956cf6ec7842d08ebf0ab19ec03a88c1efd4a50ea4349d30f9c4ce512e9890600090a250565b600780546107dc90612269565b6115f8838383611d77565b505050565b3360009081526008602052604090205460ff166116485760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b60448201526064016108a4565b600a80546001600160a01b0319166001600160a01b0383169081179091556040517f70e1f29a97aa858ce785e48a42e40cd51020a45c8a2e4520272a6303585916a990600090a250565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316146116e657604051633dd1b30560e01b815260040160405180910390fd5b50600092915050565b600060405163095ea7b360e01b6000528360045282602452602060006044600080895af13d15601f3d11600160005114161716915060006060528060405250806103fd5760405162461bcd60e51b815260206004820152600e60248201527f415050524f56455f4641494c454400000000000000000000000000000000000060448201526064016108a4565b60006040516323b872dd60e01b6000528460045283602452826044526020600060646000808a5af13d15601f3d116001600051141617169150600060605280604052508061180b5760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c454400000000000000000000000060448201526064016108a4565b5050505050565b61181a611b1e565b600d54600b546040516370a0823160e01b8152306004820152600092916001600160a01b0316906370a0823190602401602060405180830381865afa158015611867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188b91906122a3565b6118959190612324565b600e54909150156118d257600e546118bb9082906b033b2e3c9fd0803ce8000000611f15565b600c60008282546118cc919061233b565b90915550505b6001600160a01b038216600090815260106020908152604080832054600c54600f9093529083205490929161191491906b033b2e3c9fd0803ce8000000611f2a565b90508181111561193757600b54611937906001600160a01b031685848403611a23565b600b546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561197f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a391906122a3565b600d55600b546001600160a01b039081169085167fad4a9acf26d8bba7a8cf1a41160d59be042ee554578e256c98d2ab74cdd435428484116119e65760006119f0565b6119f08585612324565b60405190815260200160405180910390a350505050565b6000611a1c83670de0b6b3a764000084611f33565b9392505050565b600060405163a9059cbb60e01b6000528360045282602452602060006044600080895af13d15601f3d11600160005114161716915060006060528060405250806103fd5760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c4544000000000000000000000000000000000060448201526064016108a4565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614158015611b0157506001546001600160a01b03838116911614155b8015610cc9575050600b546001600160a01b039081169116141590565b600a546001600160a01b031615611d75576000306001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9391906122f1565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611bdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0191906122a3565b90508015611d7257600a5460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529083169063a9059cbb906044016020604051808303816000875af1158015611c5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8091906123c7565b50600a60009054906101000a90046001600160a01b03166001600160a01b0316634e71d92d6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611cd157600080fd5b505af1158015611ce5573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201528392506001600160a01b03851691506370a0823190602401602060405180830381865afa158015611d2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5391906122a3565b1015611d72576040516341ac6b7d60e01b815260040160405180910390fd5b50505b565b3360009081526008602052604090205460ff16611dc25760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b60448201526064016108a4565b611dcb83611812565b8115611ec2578015611e215781600e6000828254611de9919061233b565b90915550506001600160a01b0383166000908152600f602052604081208054849290611e1690849061233b565b90915550611ec29050565b6001600160a01b0383166000908152601160205260409020548015611e755780831015611e52576000929003611e59565b9091039060005b6001600160a01b03841660009081526011602052604090208190555b8215611ec05782600e6000828254611e8d9190612324565b90915550506001600160a01b0384166000908152600f602052604081208054859290611eba908490612324565b90915550505b505b600c546001600160a01b0384166000908152600f6020526040902054611ef4916b033b2e3c9fd0803ce8000000611f52565b6001600160a01b039093166000908152601060205260409020929092555050565b6000611f22848385611f33565b949350505050565b6000611f228484845b828202811515841585830485141716611f4b57600080fd5b0492915050565b6000611f22848484828202811515841585830485141716611f7257600080fd5b6001826001830304018115150290509392505050565b600060208083528351808285015260005b81811015611fb557858101830151858201604001528201611f99565b81811115611fc7576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b0381168114611ff257600080fd5b50565b6000806040838503121561200857600080fd5b823561201381611fdd565b946020939093013593505050565b8015158114611ff257600080fd5b6000806040838503121561204257600080fd5b823561204d81611fdd565b9150602083013561205d81612021565b809150509250929050565b6000806000806080858703121561207e57600080fd5b5050823594602084013594506040840135936060013592509050565b6000602082840312156120ac57600080fd5b8135611a1c81611fdd565b6000602082840312156120c957600080fd5b5035919050565b60008083601f8401126120e257600080fd5b50813567ffffffffffffffff8111156120fa57600080fd5b6020830191508360208260051b850101111561211557600080fd5b9250929050565b6000806000806040858703121561213257600080fd5b843567ffffffffffffffff8082111561214a57600080fd5b612156888389016120d0565b9096509450602087013591508082111561216f57600080fd5b5061217c878288016120d0565b95989497509550505050565b6000806000806000608086880312156121a057600080fd5b85356121ab81611fdd565b945060208601356121bb81611fdd565b935060408601359250606086013567ffffffffffffffff808211156121df57600080fd5b818801915088601f8301126121f357600080fd5b81358181111561220257600080fd5b89602082850101111561221457600080fd5b9699959850939650602001949392505050565b60008060006060848603121561223c57600080fd5b833561224781611fdd565b925060208401359150604084013561225e81612021565b809150509250925092565b600181811c9082168061227d57607f821691505b60208210810361229d57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156122b557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156122ec576122ec6122bc565b500290565b60006020828403121561230357600080fd5b8151611a1c81611fdd565b634e487b7160e01b600052603260045260246000fd5b600082821015612336576123366122bc565b500390565b6000821982111561234e5761234e6122bc565b500190565b600060018201612365576123656122bc565b5060010190565b60006001600160a01b03808916835280881660208401525085604083015284606083015260a060808301528260a0830152828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b6000602082840312156123d957600080fd5b8151611a1c8161202156fea26469706673582212201c8aed07106373ce5a477acb20b291ef737c54f67ec588df2b5bc0e416921eb564736f6c634300080f0033a2646970667358221220e443c13e208de0c388fbc518a9da545b7b6cb65e45398ef7a79c176a7875f0e764736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deployAdapter(address,bytes)": {
        "params": {
          "_target": "The target address",
          "data": "ABI encoded reward tokens address array"
        }
      },
      "setAdapterTrusted(address,address,bool)": {
        "details": "factory must already be a trusted address for the adapter"
      },
      "setRewardsRecipient(address)": {
        "details": "existing adapters rewards recipients will not be changed and can be done through `setRewardsRecipient` on each adapter contract"
      },
      "setRlvFactory(address)": {
        "params": {
          "_rlvFactory": "Address of the new factory"
        }
      },
      "supportTarget(address,bool)": {
        "params": {
          "_target": "The target address",
          "supported": "Whether the target should be supported or not"
        }
      },
      "supportTargets(address[],bool)": {
        "params": {
          "_targets": "Array of target addresses",
          "supported": "Whether the targets should be supported or not"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DEFAULT_LEVEL()": {
        "notice": "Sets level to `31` by default, which keeps all Divider lifecycle methods public (`issue`, `combine`, `collect`, etc), but not the `onRedeem` hook."
      },
      "deployAdapter(address,bytes)": {
        "notice": "Deploys an OwnableERC4626Adapter contract"
      },
      "divider()": {
        "notice": "Sense core Divider address"
      },
      "factoryParams()": {
        "notice": "params for adapters deployed with this factory"
      },
      "restrictedAdmin()": {
        "notice": "Adapter admin address"
      },
      "rewardsRecipient()": {
        "notice": "Rewards recipient"
      },
      "rlvFactory()": {
        "notice": "Rolling Liquidity Vault Factory address"
      },
      "setAdapterTrusted(address,address,bool)": {
        "notice": "sets trusted address for an adapter"
      },
      "setRewardsRecipient(address)": {
        "notice": "Set factory rewards recipientall future deployed adapters will have the new rewards recipient"
      },
      "setRlvFactory(address)": {
        "notice": "Modify RLV Factory address"
      },
      "supportTarget(address,bool)": {
        "notice": "(Un)support target"
      },
      "supportTargets(address[],bool)": {
        "notice": "(Un)support multiple target at once"
      }
    },
    "notice": "Ownable Crop Factory contract that deploys Ownable Crop Adapters for Rolling Liquidity Vaults",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22126,
        "contract": "@sense-finance/v1-core/src/adapters/abstract/factories/OwnableERC4626CropFactory.sol:OwnableERC4626CropFactory",
        "label": "isTrusted",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11135,
        "contract": "@sense-finance/v1-core/src/adapters/abstract/factories/OwnableERC4626CropFactory.sol:OwnableERC4626CropFactory",
        "label": "restrictedAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11138,
        "contract": "@sense-finance/v1-core/src/adapters/abstract/factories/OwnableERC4626CropFactory.sol:OwnableERC4626CropFactory",
        "label": "rewardsRecipient",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 11142,
        "contract": "@sense-finance/v1-core/src/adapters/abstract/factories/OwnableERC4626CropFactory.sol:OwnableERC4626CropFactory",
        "label": "factoryParams",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(FactoryParams)11161_storage"
      },
      {
        "astId": 11379,
        "contract": "@sense-finance/v1-core/src/adapters/abstract/factories/OwnableERC4626CropFactory.sol:OwnableERC4626CropFactory",
        "label": "reward",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 11430,
        "contract": "@sense-finance/v1-core/src/adapters/abstract/factories/OwnableERC4626CropFactory.sol:OwnableERC4626CropFactory",
        "label": "supportedTargets",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12098,
        "contract": "@sense-finance/v1-core/src/adapters/abstract/factories/OwnableERC4626CropFactory.sol:OwnableERC4626CropFactory",
        "label": "rlvFactory",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(FactoryParams)11161_storage": {
        "encoding": "inplace",
        "label": "struct BaseFactory.FactoryParams",
        "members": [
          {
            "astId": 11144,
            "contract": "@sense-finance/v1-core/src/adapters/abstract/factories/OwnableERC4626CropFactory.sol:OwnableERC4626CropFactory",
            "label": "oracle",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11146,
            "contract": "@sense-finance/v1-core/src/adapters/abstract/factories/OwnableERC4626CropFactory.sol:OwnableERC4626CropFactory",
            "label": "stake",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11148,
            "contract": "@sense-finance/v1-core/src/adapters/abstract/factories/OwnableERC4626CropFactory.sol:OwnableERC4626CropFactory",
            "label": "stakeSize",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11150,
            "contract": "@sense-finance/v1-core/src/adapters/abstract/factories/OwnableERC4626CropFactory.sol:OwnableERC4626CropFactory",
            "label": "minm",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11152,
            "contract": "@sense-finance/v1-core/src/adapters/abstract/factories/OwnableERC4626CropFactory.sol:OwnableERC4626CropFactory",
            "label": "maxm",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 11154,
            "contract": "@sense-finance/v1-core/src/adapters/abstract/factories/OwnableERC4626CropFactory.sol:OwnableERC4626CropFactory",
            "label": "ifee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint128"
          },
          {
            "astId": 11156,
            "contract": "@sense-finance/v1-core/src/adapters/abstract/factories/OwnableERC4626CropFactory.sol:OwnableERC4626CropFactory",
            "label": "mode",
            "offset": 16,
            "slot": "5",
            "type": "t_uint16"
          },
          {
            "astId": 11158,
            "contract": "@sense-finance/v1-core/src/adapters/abstract/factories/OwnableERC4626CropFactory.sol:OwnableERC4626CropFactory",
            "label": "tilt",
            "offset": 18,
            "slot": "5",
            "type": "t_uint64"
          },
          {
            "astId": 11160,
            "contract": "@sense-finance/v1-core/src/adapters/abstract/factories/OwnableERC4626CropFactory.sol:OwnableERC4626CropFactory",
            "label": "guard",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}