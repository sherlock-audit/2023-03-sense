{
  "address": "0xd56804E048aC4EEfDA5F1cc99079f154150bD727",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_divider",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "monthsForward",
          "type": "uint256"
        }
      ],
      "name": "getFutureMaturity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "prevMaturity",
          "type": "uint256"
        },
        {
          "internalType": "contract Space",
          "name": "space",
          "type": "address"
        }
      ],
      "name": "getNewTargetedRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PeripheryLike",
          "name": "periphery",
          "type": "address"
        },
        {
          "internalType": "contract OwnedAdapterLike",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "name": "getSpaceData",
      "outputs": [
        {
          "internalType": "contract Space",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8d59694301ba690a4546b2810d096da1ef7e01242d237140f9d5f72aa121e14b",
  "receipt": {
    "to": null,
    "from": "0xF13519734649F7464E5BE4aa91987A35594b2B16",
    "contractAddress": "0xd56804E048aC4EEfDA5F1cc99079f154150bD727",
    "transactionIndex": 105,
    "gasUsed": "1082586",
    "logsBloom": "0x
    "blockHash": "0x3277e627134da297d63c00d4cd9d1d6b1965a71f6fdae861f00a2eecd1b222c2",
    "transactionHash": "0x8d59694301ba690a4546b2810d096da1ef7e01242d237140f9d5f72aa121e14b",
    "logs": [],
    "blockNumber": 8035581,
    "cumulativeGasUsed": "22633487",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x09B10E45A912BcD4E80a8A3119f0cfCcad1e1f12"
  ],
  "numDeployments": 1,
  "solcInputHash": "9d1090958cfcd29d02214650b2b7badc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_divider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"monthsForward\",\"type\":\"uint256\"}],\"name\":\"getFutureMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prevMaturity\",\"type\":\"uint256\"},{\"internalType\":\"contract Space\",\"name\":\"space\",\"type\":\"address\"}],\"name\":\"getNewTargetedRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PeripheryLike\",\"name\":\"periphery\",\"type\":\"address\"},{\"internalType\":\"contract OwnedAdapterLike\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"getSpaceData\",\"outputs\":[{\"internalType\":\"contract Space\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getFutureMaturity(uint256)\":{\"params\":{\"monthsForward\":\"Number of months in to advance forward.\"},\"returns\":{\"_0\":\"timestamp The timestamp around the number of months forward given, exactly at 00:00 UTC on the top of the month.\"}},\"getNewTargetedRate(uint256,address,uint256,address)\":{\"params\":{\"adapter\":\"Adapter associated with the matured Series to analyze.\",\"prevMaturity\":\"Maturity for the maturied Series to analyze.\",\"space\":\"Maturity associated with the Series who's Space data this function is fetching.\"},\"returns\":{\"_0\":\"stretchedRate Rate implied by the previous Series stretched to the Space pool's timestretch period.\"}},\"getSpaceData(address,address,uint256)\":{\"params\":{\"adapter\":\"Adapter associated with the Series who's Space data this function is fetching.\",\"maturity\":\"Maturity associated with the Series who's Space data this function is fetching.\",\"periphery\":\"Currently active Sense Periphery contract.\"},\"returns\":{\"_0\":\"space Space pool object associated with the given adapter and maturity.\",\"_1\":\"poolId Balancer pool ID associated with the Space pool.\",\"_2\":\"pti Index of the PT token in the Space pool.\",\"_3\":\"scale Current adapter scale value.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getFutureMaturity(uint256)\":{\"notice\":\"Calculate a maturity timestamp around x months in the future on exactly the top of the month.\"},\"getNewTargetedRate(uint256,address,uint256,address)\":{\"notice\":\"Calculate the APY implied by the change in scale over the Series term (from issuance to maturity), and stretch it to the Space pools' TS period. param fallbackTargetedRate Optional Target rate to fallback on if nothing can be computed.\"},\"getSpaceData(address,address,uint256)\":{\"notice\":\"Calculate a maturity timestamp around x months in the future on exactly the top of the month.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/auto-roller/src/AutoRoller.sol\":\"RollerUtils\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363639363333343438333037\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"lib/auto-roller/src/AutoRoller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport { FixedPointMathLib } from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport { SafeTransferLib } from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { ReentrancyGuard } from \\\"solmate/src/utils/ReentrancyGuard.sol\\\";\\nimport { ERC4626 } from \\\"solmate/src/mixins/ERC4626.sol\\\";\\n\\nimport { DateTime } from \\\"./external/DateTime.sol\\\";\\n\\nimport { SafeCast } from \\\"./SafeCast.sol\\\";\\n\\nimport { BalancerVault } from \\\"./interfaces/BalancerVault.sol\\\";\\nimport { Space } from \\\"./interfaces/Space.sol\\\";\\n\\ninterface SpaceFactoryLike {\\n    function divider() external view returns (address);\\n    function create(address, uint256) external returns (address);\\n    function pools(address, uint256) external view returns (Space);\\n}\\n\\ninterface DividerLike {\\n    function series(address, uint256) external returns (address, uint48, address, uint96, address, uint256, uint256, uint256, uint256);\\n    function issue(address, uint256, uint256) external returns (uint256);\\n    function settleSeries(address, uint256) external;\\n    function mscale(address, uint256) external view returns (uint256);\\n    function redeem(address, uint256, uint256) external;\\n    function combine(address, uint256, uint256) external;\\n}\\n\\ninterface YTLike {\\n    function approve(address, uint256) external;\\n    function transfer(address, uint256) external;\\n    function collect() external returns (uint256);\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\\ninterface PeripheryLike {\\n    function sponsorSeries(address, uint256, bool) external returns (ERC20, YTLike);\\n    function swapYTsForTarget(address, uint256, uint256) external returns (uint256);\\n    function create(address, uint256) external returns (address);\\n    function spaceFactory() external view returns (SpaceFactoryLike);\\n    function MIN_YT_SWAP_IN() external view returns (uint256);\\n}\\n\\ninterface OwnedAdapterLike {\\n    function target() external view returns (address);\\n    function underlying() external view returns (address);\\n    function ifee() external view returns (uint256);\\n    function openSponsorWindow() external;\\n    function scale() external returns (uint256);\\n    function scaleStored() external view returns (uint256);\\n    function getStakeAndTarget() external view returns (address,address,uint256);\\n    function setIsTrusted(address,bool) external;\\n}\\n\\ncontract AutoRoller is ERC4626, ReentrancyGuard {\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n    using SafeCast for *;\\n\\n    /* ========== ERRORS ========== */\\n\\n    error ActivePhaseOnly();\\n    error UnrecognizedParam(bytes32 what);\\n    error InsufficientLiquidity();\\n    error RollWindowNotOpen();\\n    error OnlyAdapter();\\n    error InvalidSettler();\\n\\n    /* ========== CONSTANTS ========== */\\n\\n    uint32 internal constant MATURITY_NOT_SET = type(uint32).max;\\n    int256 internal constant WITHDRAWAL_GUESS_OFFSET = 0.95e18; // Offset from the number of assets in this contract the first withdrawal guess will be made.\\n\\n    /* ========== IMMUTABLES ========== */\\n\\n    DividerLike      internal immutable divider;\\n    BalancerVault    internal immutable balancerVault;\\n    OwnedAdapterLike public   immutable adapter;\\n\\n    uint256 internal immutable ifee; // Cached issuance fee.\\n    uint256 internal immutable minSwapAmount; // Min number of PTs that can be swapped out when exiting.\\n    uint256 internal immutable firstDeposit; // Size of the first deposit that gets locked in the contract permanently.\\n    uint256 internal immutable maxError; // A conservative buffer for \\\"rounding\\\" swap previews that accounts for compounded pow of imprecision.\\n    address internal immutable rewardRecipient; // Recipient address for any unexpected tokens that end up in this contract.\\n\\n    /* ========== MUTABLE STORAGE ========== */\\n\\n    PeripheryLike    internal periphery;\\n    SpaceFactoryLike internal spaceFactory;\\n    address          internal owner; // Admin that can set params.\\n    RollerUtils      internal utils; // Utility contract with convenience getter functions.\\n\\n    // Active Series\\n    YTLike  internal yt;\\n    ERC20   internal pt;\\n    Space   internal space;\\n    bytes32 internal poolId;\\n    address internal lastRoller; // Last address to call roll.\\n\\n    // Separate slots to meet contract size limits.\\n    uint256 public   maturity = MATURITY_NOT_SET;\\n    uint256 internal initScale;\\n    uint256 internal pti;\\n\\n    uint256 internal maxRate        = 53144e19; // Max implied rate stretched to Space pool's TS period. (531440% over 12 years \\u2248 200% APY)\\n    uint256 internal targetedRate   = 2.9e18; // Targeted implied rate stretched to Space pool's TS period. (2.9% over 12 years \\u2248 0.12% APY)\\n    uint256 internal targetDuration = 3; // Number of months or weeks in the future newly sponsored Series should mature.\\n\\n    uint256 public cooldown         = 10 days; // Length of mandatory cooldown period during which LPs can withdraw without slippage.\\n    uint256 public lastSettle; // Timestamp from when settlement was last called.\\n\\n    constructor(\\n        ERC20 _target,\\n        DividerLike _divider,\\n        address _periphery,\\n        address _spaceFactory,\\n        address _balancerVault,\\n        OwnedAdapterLike _adapter,\\n        RollerUtils _utils,\\n        address _rewardRecipient\\n    ) ERC4626(\\n        _target,\\n        string(abi.encodePacked(_target.name(), \\\" Sense Auto Roller\\\")),\\n        string(abi.encodePacked(_target.symbol(), \\\"-sAR\\\"))\\n    ) {\\n        divider       = _divider;\\n        periphery     = PeripheryLike(_periphery);\\n        spaceFactory  = SpaceFactoryLike(_spaceFactory);\\n        balancerVault = BalancerVault(_balancerVault);\\n\\n        // Allow the Divder to move this contract's Target for PT/YT issuance.\\n        _target.safeApprove(address(_divider), type(uint256).max);\\n\\n        // Allow Balancer to move this contract's Target for Space pools joins.\\n        _target.safeApprove(address(_balancerVault), type(uint256).max);\\n\\n        uint256 scalingFactor = 10**(18 - decimals);\\n\\n        minSwapAmount = (periphery.MIN_YT_SWAP_IN() - 1) / scalingFactor + 1; // Rounds up to cover low decimal tokens.\\n        maxError      = (1e7 - 1) / scalingFactor + 1;\\n        firstDeposit  = (0.01e18 - 1) / scalingFactor + 1;\\n\\n        adapter = _adapter;\\n        ifee    = _adapter.ifee(); // Assumption: ifee will not change. Don't break this assumption and expect good things.\\n        owner   = msg.sender;\\n        utils   = _utils;\\n        rewardRecipient = _rewardRecipient;\\n    }\\n\\n    /* ========== SERIES MANAGEMENT ========== */\\n\\n    /// @notice Roll into the next Series if there isn't an active series and the cooldown period has elapsed.\\n    function roll() external {\\n        if (maturity != MATURITY_NOT_SET) revert RollWindowNotOpen();\\n\\n        if (lastSettle == 0) {\\n            // If this is the first roll, lock some shares in by minting them for the zero address.\\n            // This prevents the contract from reaching an empty state during future active periods.\\n            deposit(firstDeposit, address(0));\\n        } else if (lastSettle + cooldown > block.timestamp) {\\n            revert RollWindowNotOpen();\\n        }\\n\\n        lastRoller = msg.sender;\\n        adapter.openSponsorWindow();\\n    }\\n\\n    /// @notice Sponsor a new Series, issue PTs, and migrate liquidity into the new Space pool.\\n    /// @dev We only expect this function to be called by this roller's adapter in the callback triggered within the adapter.openSponsorWindow call.\\n    ///      Assumption: all of this Vault's LP shares will have been exited before this function is called.\\n    /// @param stake the adapter's stake token address.\\n    /// @param stakeSize the adapter's stake size.\\n    function onSponsorWindowOpened(ERC20 stake, uint256 stakeSize) external {\\n        if (msg.sender != address(adapter)) revert OnlyAdapter();\\n\\n        stake.safeTransferFrom(lastRoller, address(this), stakeSize);\\n\\n        // Allow the Periphery to move stake for sponsoring the Series.\\n        stake.safeApprove(address(periphery), stakeSize);\\n\\n        uint256 _maturity = utils.getFutureMaturity(targetDuration);\\n\\n        // Assign Series data.\\n        (ERC20 _pt, YTLike _yt) = periphery.sponsorSeries(address(adapter), _maturity, true);\\n        (Space _space, bytes32 _poolId, uint256 _pti, uint256 _initScale) = utils.getSpaceData(periphery, OwnedAdapterLike(msg.sender), _maturity);\\n\\n        // Allow Balancer to move the new PTs for joins & swaps.\\n        _pt.approve(address(balancerVault), type(uint256).max);\\n\\n        // Allow Periphery to move the new YTs for swaps.\\n        _yt.approve(address(periphery), type(uint256).max);\\n\\n        ERC20 _asset = asset;\\n\\n        ERC20[] memory tokens = new ERC20[](2);\\n        tokens[1 - _pti] = _asset;\\n        tokens[_pti] = _pt;\\n\\n        uint256 targetBal = _asset.balanceOf(address(this));\\n\\n        // Get the reserve balances that would imply the given targetedRate in the Space pool,\\n        // assuming that we we're going to deposit the amount of Target currently in this contract.\\n        // In other words, this function simulating the reserve balances that would result from the actions:\\n        // 1) Use the some Target to issue PTs/YTs\\n        // 2) Deposit some amount of Target\\n        // 3) Swap PTs into the pool to initialize the targeted rate\\n        // 4) Deposit the rest of the PTs and Target in this contract (which remain in the exact ratio the pool expects)\\n        // Since we're determining the resulting reserve balances of these operations, we can issue exactly the amount of PTs we'll need to keep the ratio in the pool.\\n        (uint256 eqPTReserves, uint256 eqTargetReserves) = _space.getEQReserves(\\n            targetedRate < 0.01e18 ? 0.01e18 : targetedRate, // Don't let the pool start below 0.01% stretched yield\\n            _maturity,\\n            0, // PT reserves, starting with 0\\n            targetBal, // Target reserves, starting with the entire Target balance in this contract.\\n            targetBal.mulWadDown(_initScale), // Total supply, starting with Target * initScale, since that's the BPT supply if once deposit all of the Target.\\n            _space.g2() // Space fee, g2 because the swap we'll make to initialize these reserve balances is PT -> Target (see https://yield.is/YieldSpace.pdf section \\\"5 Fees\\\").\\n        );\\n\\n        // Calculate & issue an amount of PTs, such that all PTs are used to add liquidity while preserving the PT:Target reserve ratio in the Space Pool.\\n        uint256 targetForIssuance = _getTargetForIssuance(eqPTReserves, eqTargetReserves, targetBal, _initScale);\\n        divider.issue(address(adapter), _maturity, targetForIssuance);\\n\\n        uint256[] memory balances = new uint256[](2);\\n        balances[1 - _pti] = targetBal - targetForIssuance;\\n\\n        // Initialize the targeted rate in the Space pool with a join, a swap, and another join.\\n        _joinPool(\\n            _poolId,\\n            BalancerVault.JoinPoolRequest({\\n                assets: tokens,\\n                maxAmountsIn: balances,\\n                userData: abi.encode(balances, 0), // No min BPT out: first join.\\n                fromInternalBalance: false\\n            })\\n        );\\n        _swap(\\n            BalancerVault.SingleSwap({\\n                poolId: _poolId,\\n                kind: BalancerVault.SwapKind.GIVEN_IN,\\n                assetIn: address(_pt),\\n                assetOut: address(tokens[1 - _pti]),\\n                amount: eqPTReserves.mulDivDown(balances[1 - _pti], targetBal),\\n                userData: hex\\\"\\\"\\n            })\\n        );\\n\\n        balances[_pti    ] = _pt.balanceOf(address(this));\\n        balances[1 - _pti] = _asset.balanceOf(address(this));\\n\\n        _joinPool(\\n            _poolId,\\n            BalancerVault.JoinPoolRequest({\\n                assets: tokens,\\n                maxAmountsIn: balances,\\n                userData: abi.encode(balances, 0), // No min BPT out: the pool was created in this tx and the join can't be sandwiched.\\n                fromInternalBalance: false\\n            })\\n        );\\n\\n        // Cache Series data.\\n        space  = _space;\\n        poolId = _poolId;\\n        pt     = _pt;\\n        yt     = _yt;\\n\\n        // Combined single SSTORE.\\n        initScale = _initScale;\\n        maturity  = _maturity; // OK until Feb 07, 2106\\n        pti       = _pti;\\n\\n        emit Rolled(_maturity, uint256(_initScale), address(_space), msg.sender);\\n    }\\n\\n    /// @notice Settle the active Series, transfer stake and ifees to the settler, and enter a cooldown phase.\\n    /// @dev Because the auto-roller is the series sponsor from the Divider's perspective, this.settle is the only entrypoint for athe lastRoller to settle during the series' sponsor window.\\n    ///      More info on the series lifecylce: https://docs.sense.finance/docs/series-lifecycle-detail/#phase-3-settling.\\n    function settle() public {\\n        if(msg.sender != lastRoller) revert InvalidSettler();\\n\\n        uint256 assetBalPre = asset.balanceOf(address(this));\\n        divider.settleSeries(address(adapter), maturity); // Settlement will fail if maturity hasn't been reached.\\n        uint256 assetBalPost = asset.balanceOf(address(this));\\n\\n        asset.safeTransfer(msg.sender, assetBalPost - assetBalPre); // Send issuance fees to the sender.\\n\\n        (, address stake, uint256 stakeSize) = adapter.getStakeAndTarget();\\n        if (stake != address(asset)) {\\n            ERC20(stake).safeTransfer(msg.sender, stakeSize);\\n        }\\n\\n        startCooldown();\\n    }\\n\\n    /// @notice Enter a cooldown phase where users can redeem without slippage. Often this will be initiated by this.settle,\\n    ///         but it can be called externally if the Series was settled externally.\\n    function startCooldown() public {\\n        require(divider.mscale(address(adapter), maturity) != 0);\\n\\n        ERC20[] memory tokens = new ERC20[](2);\\n        tokens[1 - pti] = asset;\\n        tokens[pti    ] = pt;\\n\\n        _exitPool(\\n            poolId,\\n            BalancerVault.ExitPoolRequest({\\n                assets: tokens,\\n                minAmountsOut: new uint256[](2),\\n                userData: abi.encode(space.balanceOf(address(this))),\\n                toInternalBalance: false\\n            })\\n        );\\n\\n        divider.redeem(address(adapter), maturity, pt.balanceOf(address(this))); // Burns the PTs.\\n        yt.collect(); // Burns the YTs.\\n\\n        // Calculate the initial market fixed rate for the upcoming series, using the historical avg Target rate across the previous series.\\n        targetedRate = utils.getNewTargetedRate(targetedRate, address(adapter), maturity, space);\\n\\n        maturity   = MATURITY_NOT_SET;\\n        lastSettle = uint32(block.timestamp);\\n        delete pt; delete yt; delete space; delete pti; delete poolId; delete initScale; // Re-set variables to defaults, collect gas refund.\\n    }\\n\\n    /* ========== 4626 SPEC ========== */\\n    // see: https://eips.ethereum.org/EIPS/eip-4626\\n\\n    /// @dev Collect asset from roller's YT balance & densify shares before depositing\\n    function deposit(uint256 assets, address receiver) public override returns (uint256) {\\n        if (maturity != MATURITY_NOT_SET) yt.collect();\\n        return super.deposit(assets, receiver);\\n    }\\n\\n    /// @dev Collect asset from roller's YT balance & densify shares before minting\\n    function mint(uint256 shares, address receiver) public override returns (uint256) {\\n        if (maturity != MATURITY_NOT_SET) yt.collect();\\n        return super.mint(shares, receiver);\\n    }\\n\\n    function redeem(uint256 shares, address receiver, address owner) public override returns (uint256) {\\n        if (maturity != MATURITY_NOT_SET) yt.collect();\\n        return super.redeem(shares, receiver, owner);\\n    }\\n\\n    function withdraw(uint256 assets, address receiver, address owner) public override returns (uint256) {\\n        if (maturity != MATURITY_NOT_SET) yt.collect();\\n        return super.withdraw(assets, receiver, owner);\\n    }\\n\\n    /// @dev exit LP shares commensurate the given number of shares, and sell the excess PTs or YTs into Target if possible.\\n    function beforeWithdraw(uint256, uint256 shares) internal override {\\n        if (maturity != MATURITY_NOT_SET) {\\n            (uint256 excessBal, bool isExcessPTs) = _exitAndCombine(shares);\\n\\n            if (excessBal < minSwapAmount) return;\\n\\n            if (isExcessPTs) {\\n                _swap(\\n                    BalancerVault.SingleSwap({\\n                        poolId: poolId,\\n                        kind: BalancerVault.SwapKind.GIVEN_IN,\\n                        assetIn: address(pt),\\n                        assetOut: address(asset),\\n                        amount: excessBal,\\n                        userData: hex\\\"\\\"\\n                    })\\n                );\\n            } else {\\n                periphery.swapYTsForTarget(address(adapter), maturity, excessBal); // Swapping YTs will fail if there isn't enough liquidity.\\n            }\\n        }\\n    }\\n\\n    /// @dev Joins the Space pool, issuing PTs in order to match the current pool's ratio of Target:PT\\n    function afterDeposit(uint256, uint256 shares) internal override {\\n        if (maturity != MATURITY_NOT_SET) {\\n            uint256 _supply = totalSupply; // Saves extra SLOADs.\\n            bytes32 _poolId = poolId;\\n            uint256 _pti    = pti;\\n\\n            (ERC20[] memory tokens, uint256[] memory balances, ) = balancerVault.getPoolTokens(_poolId);\\n\\n            uint256 assetBal = asset.balanceOf(address(this));\\n            uint256 targetToJoin = _supply - shares == 0 ? // _supply - shares b/c this is after minting new shares.\\n                shares.mulDivUp(balances[1 - _pti], space.adjustedTotalSupply()) :\\n                assetBal - _getTargetForIssuance(balances[_pti], balances[1 - _pti], assetBal, adapter.scaleStored());\\n\\n            balances[1 - _pti] = targetToJoin;\\n\\n            if (assetBal - targetToJoin > 0) { // Assumption: this is false if Space has only Target liquidity.\\n                balances[_pti] = divider.issue(address(adapter), maturity, assetBal - targetToJoin);\\n            }\\n\\n            _joinPool(\\n                _poolId,\\n                BalancerVault.JoinPoolRequest({\\n                    assets: tokens,\\n                    maxAmountsIn: balances,\\n                    userData: abi.encode(balances, 0),\\n                    fromInternalBalance: false\\n                })\\n            );\\n        }\\n    }\\n\\n    /// @notice Calculates the total assets of this vault using the current spot prices, with no regard for slippage.\\n    function totalAssets() public view override returns (uint256) {\\n        if (maturity == MATURITY_NOT_SET) {\\n            return asset.balanceOf(address(this));\\n        }\\n        else {\\n            Space _space = space;\\n            (uint256 ptReserves, uint256 targetReserves) = _getSpaceReserves();\\n\\n            (uint256 targetBal, uint256 ptBal, uint256 ytBal, ) = _decomposeShares(ptReserves, targetReserves, totalSupply, true);\\n\\n            uint256 ptSpotPrice = _space.getPriceFromImpliedRate(\\n                (ptReserves + _space.adjustedTotalSupply()).divWadDown(targetReserves.mulWadDown(initScale)) - 1e18\\n            ); // PT price in Target.\\n\\n            uint256 scale = adapter.scaleStored();\\n\\n            if (ptBal >= ytBal) {\\n                // Target + combined PTs/YTs + PT spot value in Target.\\n                return targetBal + ytBal.divWadDown(scale) + ptSpotPrice.mulWadDown(ptBal - ytBal);\\n            } else {\\n                uint256 ytSpotPrice = (1e18 - ptSpotPrice.mulWadDown(scale)).divWadDown(scale);\\n\\n                // Target + combined PTs/YTs + YT spot value in Target.\\n                return targetBal + ptBal.divWadDown(scale) + ytSpotPrice.mulWadDown(ytBal - ptBal);\\n            }\\n        }\\n    }\\n\\n    /// @notice The same as convertToShares, except that slippage is considered.\\n    /// @dev Preview the number of new LP shares that would be minted by joining with the given amount of Target, then use that\\n    ///      as a percentage of the total number of LP shares held in this contract to preview the number of new roller shares.\\n    function previewDeposit(uint256 assets) public view override returns (uint256) {\\n        if (maturity == MATURITY_NOT_SET) {\\n            return super.previewDeposit(assets);\\n        } else {\\n            Space _space = space;\\n            (uint256 ptReserves, uint256 targetReserves) = _getSpaceReserves();\\n\\n            // Calculate how much Target we'll end up joining the pool with, and use that to preview minted LP shares.\\n            uint256 previewedLPBal = (assets - _getTargetForIssuance(ptReserves, targetReserves, assets, adapter.scaleStored()))\\n                .mulDivDown(_space.adjustedTotalSupply(), targetReserves);\\n\\n            uint256 assetBal = asset.balanceOf(address(this));\\n            uint256 assetBalLP = space.balanceOf(address(this)).mulDivDown(assets, previewedLPBal);\\n            uint256 assetBalPT = pt.balanceOf(address(this)).divWadUp(adapter.scaleStored().mulWadDown(1e18 - ifee));\\n\\n            // Shares represent proportional ownership of LP shares the vault holds.\\n            return previewedLPBal.mulDivDown(totalSupply, _space.balanceOf(address(this)))\\n                .mulDivDown(assetBalLP, assetBalPT + assetBalLP + assetBal);\\n        }\\n    }\\n\\n    /// @dev Preview the amount of Target needed to mint the given number of shares by determining how much of\\n    ///      each asset in this contract the given number of shares represent, then conver that all into Target.\\n    function previewMint(uint256 shares) public view override returns (uint256) {\\n        if (maturity == MATURITY_NOT_SET) {\\n            return super.previewMint(shares);\\n        } else {\\n            (uint256 ptReserves, uint256 targetReserves) = _getSpaceReserves();\\n\\n            (uint256 targetToJoin, uint256 ptsToJoin, , ) = _decomposeShares(ptReserves, targetReserves, shares, true);\\n\\n            return targetToJoin + ptsToJoin.divWadUp(adapter.scaleStored().mulWadDown(1e18 - ifee)) + 1; // targetToJoin + targetToIssue\\n        }\\n    }\\n\\n    /// @notice The same as convertToAssets, except that slippage is considered.\\n    function previewRedeem(uint256 shares) public view override returns (uint256) {\\n        if (maturity == MATURITY_NOT_SET) {\\n            return super.previewRedeem(shares);\\n        } else {\\n            (uint256 ptReserves, uint256 targetReserves) = _getSpaceReserves();\\n\\n            (uint256 targetBal, uint256 ptBal, uint256 ytBal, uint256 lpBal) = _decomposeShares(ptReserves, targetReserves, shares, false);\\n\\n            uint256 scale = adapter.scaleStored();\\n\\n            ptReserves     = ptReserves - ptBal;\\n            targetReserves = targetReserves - targetBal;\\n\\n            // Adjust balances for loose asset share.\\n            ptBal     = ptBal     + shares.mulDivDown(pt.balanceOf(address(this)), totalSupply);\\n            targetBal = targetBal + shares.mulDivDown(asset.balanceOf(address(this)), totalSupply);\\n            uint256 spaceSupply = space.adjustedTotalSupply() - lpBal;\\n\\n            if (ptBal > ytBal) {\\n                unchecked {\\n                    // If there isn't enough liquidity to sell all of the PTs, the swap preview will fail.\\n                    uint256 ptsToSell = ptBal - ytBal;\\n\\n                    uint256 targetOut = ptsToSell > minSwapAmount ?\\n                        space.onSwapPreview(\\n                            true,\\n                            true,\\n                            ptsToSell,\\n                            ptReserves,\\n                            targetReserves,\\n                            spaceSupply,\\n                            scale\\n                        ) : 0;\\n\\n                    // target + combined PTs/YTs + sold PTs - buffer for pow of discrepencies.\\n                    return targetBal + ytBal.divWadDown(scale) + targetOut - maxError;\\n                }\\n            } else {\\n                unchecked {\\n                    // Safety: an inequality check is done before ytBal - ptBal.\\n                    //         shares must be lte total supply, so ptReserves & targetReserves wil always be gte ptBal & targetBal.\\n                    uint256 ytsToSell = ytBal - ptBal;\\n\\n                    // Target from combining YTs with PTs - target needed to buy PTs.\\n                    uint256 targetOut = ytsToSell > minSwapAmount ?\\n                        ytsToSell.divWadDown(scale) - space.onSwapPreview(\\n                            false,\\n                            false,\\n                            ytsToSell,\\n                            targetReserves,\\n                            ptReserves,\\n                            spaceSupply,\\n                            scale\\n                        ) : 0;\\n\\n                    // target + combined PTs/YTs + sold YTs - buffer for pow of discrepencies.\\n                    return targetBal + ptBal.divWadDown(scale) + targetOut - maxError;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Amount of shares needed to redeem the given assets, erring on the side of overestimation.\\n    ///         The calculation for previewWithdraw is quite imprecise and expensive, so previewRedeem & redeem\\n    ///         should be favored over previewWithdraw & withdraw.\\n    function previewWithdraw(uint256 assets) public view override returns (uint256) {\\n        if (maturity == MATURITY_NOT_SET) {\\n            return super.previewWithdraw(assets);\\n        } else {\\n            uint256 _supply = totalSupply - firstDeposit;\\n\\n            int256 prevGuess  = _min(assets, _supply).safeCastToInt();\\n            int256 prevAnswer = previewRedeem(prevGuess.safeCastToUint()).safeCastToInt() - assets.safeCastToInt();\\n\\n            int256 guess = prevGuess * WITHDRAWAL_GUESS_OFFSET / 1e18;\\n\\n            int256 supply = _supply.safeCastToInt();\\n\\n            // Find the root or get very close to it using the secant method, which is slightly more efficient than Newton's\\n            // method if the cost of evaluating f and f' is similar.\\n            for (uint256 i = 0; i < 20;) { // 20 chosen as a safe bound for convergence from practical trials.\\n                if (guess > supply) {\\n                    guess = supply;\\n                }\\n                int256 answer = previewRedeem(guess.safeCastToUint()).safeCastToInt() - assets.safeCastToInt();\\n\\n                if (answer > 0 && answer <= assets.mulWadDown(0.001e18).safeCastToInt() || (prevAnswer == answer)) { // Err on the side of overestimating shares needed. Could reduce precision for gas efficiency.\\n                    break;\\n                }\\n\\n                if (guess == supply && answer < 0) revert InsufficientLiquidity();\\n\\n                int256 nextGuess = guess - (answer * (guess - prevGuess) / (answer - prevAnswer));\\n                prevGuess  = guess;\\n                prevAnswer = answer;\\n                guess      = nextGuess;\\n\\n                unchecked { ++i; }\\n            }\\n\\n            return guess.safeCastToUint() + maxError; // Buffer for pow discrepancies.\\n        }\\n    }\\n\\n    function maxWithdraw(address owner) public view override returns (uint256) {\\n        if (maturity == MATURITY_NOT_SET) {\\n            return super.maxWithdraw(owner);\\n        } else {\\n            return previewRedeem(maxRedeem(owner));\\n        }\\n    }\\n\\n    /// @notice Maximum number of shares the given owner can redeem, given Space pool liquidity constraints and the maxRate guard.\\n    function maxRedeem(address owner) public view override returns (uint256) { // No idiosyncratic owner restrictions.\\n        if (maturity == MATURITY_NOT_SET) {\\n            return super.maxRedeem(owner);\\n        } else {\\n            uint256 shares = balanceOf[owner];\\n\\n            (uint256 ptReserves, uint256 targetReserves) = _getSpaceReserves();\\n\\n            (uint256 targetBal, uint256 ptBal, uint256 ytBal, uint256 lpBal) = _decomposeShares(ptReserves, targetReserves, shares, false);\\n\\n            ptReserves     = ptReserves - ptBal;\\n            targetReserves = targetReserves - targetBal;\\n\\n            ptBal     = ptBal     + shares.mulDivDown(pt.balanceOf(address(this)), totalSupply);\\n            targetBal = targetBal + shares.mulDivDown(asset.balanceOf(address(this)), totalSupply);\\n            uint256 spaceSupply = space.adjustedTotalSupply() - lpBal;\\n\\n            bool isExcessPTs = ptBal > ytBal;\\n            uint256 diff = isExcessPTs ? ptBal - ytBal : ytBal - ptBal;\\n\\n            if (isExcessPTs) {\\n                uint256 maxPTSale = _maxPTSell(ptReserves, targetReserves, spaceSupply);\\n\\n                if (maxPTSale >= diff) {\\n                    // We have enough liquidity to handle the sale.\\n                    return shares;\\n                } else {\\n                    // For every unit of LP Share, the excess PT balance grows by \\\"hole\\\".\\n                    uint256 hole = diff.divWadDown(lpBal);\\n\\n                    // Determine how many shares we can redeem without exceeding sell limits.\\n                    return maxPTSale.divWadDown(hole).mulDivDown(totalSupply, space.balanceOf(address(this)));\\n                }\\n            } else {\\n                if (ptReserves >= diff) { // We can redeem YTs up to the point where there are PTs in Space to swap for.\\n                    // We have enough liquidity to handle the sale.\\n                    return shares;\\n                } else {\\n                    // For every unit of LP Share, the excess YT balance grows by \\\"hole\\\".\\n                    uint256 hole = diff.divWadDown(lpBal);\\n\\n                    // Determine how many shares we can redeem without exceeding sell limits.\\n                    return ptReserves.divWadDown(hole).mulDivDown(totalSupply, space.balanceOf(address(this)));\\n                }\\n            }\\n        }\\n    }\\n\\n    /* ========== 4626 EXTENSIONS ========== */\\n\\n    /// @notice Quick exit into the constituent assets.\\n    /// @param shares Number of shares to eject with.\\n    /// @param receiver Destination address for the constituent assets.\\n    /// @param owner Onwer of the shares.\\n    /// @return assets Amount of asset redeemable by the given number of shares.\\n    /// @return excessBal Amount of excess PT or YT redeemable by the given number of shares.\\n    /// @return isExcessPTs Whether the excess token is a YT or PT.\\n    function eject(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public returns (uint256 assets, uint256 excessBal, bool isExcessPTs) {\\n        if (maturity == MATURITY_NOT_SET) revert ActivePhaseOnly();\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        yt.collect();\\n\\n        uint256 assetBalPre = asset.balanceOf(address(this));\\n        assets = shares.mulDivDown(assetBalPre, totalSupply);\\n        (excessBal, isExcessPTs) = _exitAndCombine(shares);\\n\\n        _burn(owner, shares); // Burn after percent ownership is determined in _exitAndCombine.\\n\\n        if (isExcessPTs) {\\n            pt.transfer(receiver, excessBal);\\n        } else {\\n            yt.transfer(receiver, excessBal);\\n        }\\n\\n        asset.transfer(receiver, assets = assets + asset.balanceOf(address(this)) - assetBalPre);\\n        emit Ejected(msg.sender, receiver, owner, assets, shares,\\n            isExcessPTs ? excessBal : 0,\\n            isExcessPTs ? 0 : excessBal\\n        );\\n    }\\n\\n    /* ========== GENERAL UTILS ========== */\\n\\n    /// @dev Exit Assets from the Space pool and combine the PTs with YTs we have reserved for the given number of shares.\\n    /// @param shares number of shares to exit and combine with.\\n    /// @return excessBal Amount of excess PT or YT redeemable by the given number of shares.\\n    /// @return isExcessPTs Whether the excess token is a YT or PT.\\n    function _exitAndCombine(uint256 shares) internal returns (uint256, bool) {\\n        uint256 supply = totalSupply; // Save extra SLOAD.\\n\\n        uint256 lpBal      = shares.mulDivDown(space.balanceOf(address(this)), supply);\\n        uint256 totalPTBal = pt.balanceOf(address(this));\\n        uint256 ptShare    = shares.mulDivDown(totalPTBal, supply);\\n\\n        ERC20[] memory tokens = new ERC20[](2);\\n        tokens[1 - pti] = asset;\\n        tokens[pti    ] = pt;\\n\\n        _exitPool(\\n            poolId,\\n            BalancerVault.ExitPoolRequest({\\n                assets: tokens,\\n                minAmountsOut: new uint256[](2),\\n                userData: abi.encode(lpBal),\\n                toInternalBalance: false\\n            })\\n        );\\n\\n        ptShare += pt.balanceOf(address(this)) - totalPTBal;\\n        uint256 ytBal = shares.mulDivDown(yt.balanceOf(address(this)), supply);\\n        unchecked {\\n            // Safety: an inequality check is done before subtraction.\\n            if (ptShare > ytBal) {\\n                divider.combine(address(adapter), maturity, ytBal);\\n                return (ptShare - ytBal, true);\\n            } else { // Set excess PTs to false if the balances are exactly equal.\\n                divider.combine(address(adapter), maturity, ptShare);\\n                return (ytBal - ptShare, false);\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfer any token not included in the set {asset,yt,pt,space} to the rewards recipient.\\n    /// @param coin address of the coin to transfer out.\\n    function claimRewards(ERC20 coin) external nonReentrant {\\n        require(coin != asset);\\n        if (maturity != MATURITY_NOT_SET) {\\n            require(coin != ERC20(address(yt)) && coin != pt && coin != ERC20(address(space)));\\n        }\\n        coin.safeTransfer(rewardRecipient, coin.balanceOf(address(this)));\\n    }\\n\\n    /* ========== BALANCER UTILS ========== */\\n\\n    function _joinPool(bytes32 _poolId, BalancerVault.JoinPoolRequest memory request) internal {\\n        balancerVault.joinPool(_poolId, address(this), address(this), request);\\n    }\\n\\n    function _exitPool(bytes32 _poolId, BalancerVault.ExitPoolRequest memory request) internal {\\n        balancerVault.exitPool(_poolId, address(this), payable(address(this)), request);\\n    }\\n\\n    function _swap(BalancerVault.SingleSwap memory request) internal {\\n        BalancerVault.FundManagement memory funds = BalancerVault.FundManagement({\\n            sender: address(this),\\n            fromInternalBalance: false,\\n            recipient: payable(address(this)),\\n            toInternalBalance: false\\n        });\\n\\n        balancerVault.swap(request, funds, 0, type(uint256).max);\\n    }\\n\\n    /* ========== NUMERICAL UTILS ========== */\\n\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    /* ========== INTERNAL VIEWS ========== */\\n\\n    /// @dev Calculates the amount of Target needed for issuance such that the PT:Target ratio in\\n    ///      the Space pool will be preserved after issuing and joining issued PTs and remaining Target.\\n    /// @return asset Amount of Target that should be used for issuance.\\n    function _getTargetForIssuance(uint256 ptReserves, uint256 targetReserves, uint256 targetBal, uint256 scale)\\n        internal view returns (uint256)\\n    {\\n        return targetBal.mulWadUp(ptReserves.divWadUp(\\n            scale.mulWadDown(1e18 - ifee).mulWadDown(targetReserves) + ptReserves\\n        ));\\n    }\\n\\n    /// @dev Get PT and Target reserve balances for the current Space pool.\\n    /// @return ptReserves PT reserve amount.\\n    /// @return targetReserves Target reserve amount.\\n    function _getSpaceReserves() internal view returns (uint256, uint256) {\\n        (, uint256[] memory balances, ) = balancerVault.getPoolTokens(poolId);\\n        uint256 _pti = pti;\\n        return (balances[_pti], balances[1 - _pti]);\\n    }\\n\\n    /// @dev DecomposeShares works to break shares into their constituent parts,\\n    ///      and also preview the assets required to mint a given number of shares.\\n    /// @return targetAmount Target the number of shares has a right to.\\n    /// @return ptAmount PTs the number of shares has a right to.\\n    /// @return ytAmount YTs the number of shares has a right to.\\n    /// @return lpAmount Space LP shares the number of shares has a right to.\\n    function _decomposeShares(uint256 ptReserves, uint256 targetReserves, uint256 shares, bool withLoose)\\n        internal view returns (uint256, uint256, uint256, uint256)\\n    {\\n        uint256 supply      = totalSupply;\\n        uint256 totalLPBal  = space.balanceOf(address(this));\\n        uint256 spaceSupply = space.adjustedTotalSupply();\\n\\n        // Shares have a right to a portion of the PTs/asset floating around unencombered in this contract.\\n        return (\\n            shares.mulDivDown(totalLPBal.mulDivUp(targetReserves, spaceSupply) + (withLoose ? asset.balanceOf(address(this)) : 0), supply),\\n            shares.mulDivDown(totalLPBal.mulDivUp(ptReserves, spaceSupply) + (withLoose ? pt.balanceOf(address(this)) : 0), supply),\\n            shares.mulDivDown(yt.balanceOf(address(this)), supply),\\n            shares.mulDivDown(totalLPBal, supply)\\n        );\\n    }\\n\\n    /* ========== SPACE POOL SOLVERS ========== */\\n\\n    /// @notice Determine the maximum number of PTs we can sell into the current space pool without\\n    ///         exceeding the current `maxRate`.\\n    /// @return ptAmount Maximum number of PTs.\\n    function _maxPTSell(uint256 ptReserves, uint256 targetReserves, uint256 spaceSupply) internal view returns (uint256) {\\n        (uint256 eqPTReserves, ) = space.getEQReserves(\\n            maxRate, // Max acceptable implied rate.\\n            maturity,\\n            ptReserves,\\n            targetReserves,\\n            spaceSupply,\\n            space.g2()\\n        );\\n\\n        return ptReserves >= eqPTReserves ? 0 : eqPTReserves - ptReserves; // Edge case: the pool is already above the max rate.\\n    }\\n\\n    /* ========== ADMIN ========== */\\n\\n    /// @notice Set address-based admin params, only callable by the owner.\\n    /// @param what Admin param to update.\\n    /// @param data Address to set the param to.\\n    function setParam(bytes32 what, address data) external {\\n        require(msg.sender == owner);\\n        if (what == \\\"SPACE_FACTORY\\\") spaceFactory = SpaceFactoryLike(data);\\n        else if (what == \\\"PERIPHERY\\\") periphery = PeripheryLike(data);\\n        else if (what == \\\"OWNER\\\") owner = data;\\n        else revert UnrecognizedParam(what);\\n        emit ParamChanged(what, data);\\n    }\\n\\n    /// @notice Set uint-based admin params, only callable by the owner.\\n    /// @param what Admin param to update.\\n    /// @param data Uint to set the param to.\\n    function setParam(bytes32 what, uint256 data) external {\\n        require(msg.sender == owner);\\n        if (what == \\\"MAX_RATE\\\") maxRate = data;\\n        else if (what == \\\"TARGET_DURATION\\\") targetDuration = data;\\n        else if (what == \\\"COOLDOWN\\\") {\\n            require(lastSettle == 0 || maturity != MATURITY_NOT_SET); // Can't update cooldown during cooldown period.\\n            cooldown = data;\\n        }\\n        else revert UnrecognizedParam(what);\\n        emit ParamChanged(what, data);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event ParamChanged(bytes32 what, address newData);\\n    event ParamChanged(bytes32 what, uint256 newData);\\n\\n    event Rolled(uint256 nextMaturity, uint256 initScale, address space, address roller);\\n    event Ejected(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares,\\n        uint256 pts,\\n        uint256 yts\\n    );\\n}\\n\\ncontract RollerUtils {\\n    using FixedPointMathLib for uint256;\\n\\n    uint256 internal constant SECONDS_PER_YEAR = 31536000;\\n    uint256 internal constant ONE = 1e18;\\n\\n    address internal immutable divider;\\n\\n    constructor(address _divider) { divider = _divider; }\\n\\n    /// @notice Calculate a maturity timestamp around x months in the future on exactly the top of the month.\\n    /// @param monthsForward Number of months in to advance forward.\\n    /// @return timestamp The timestamp around the number of months forward given, exactly at 00:00 UTC on the top of the month.\\n    function getFutureMaturity(uint256 monthsForward) public view returns (uint256) {\\n        (uint256 year, uint256 month, ) = DateTime.timestampToDate(DateTime.addMonths(block.timestamp, monthsForward));\\n        return DateTime.timestampFromDateTime(year, month, 1 /* top of the month */, 0, 0, 0);\\n    }\\n\\n    /// @notice Calculate a maturity timestamp around x months in the future on exactly the top of the month.\\n    /// @param periphery Currently active Sense Periphery contract.\\n    /// @param adapter Adapter associated with the Series who's Space data this function is fetching.\\n    /// @param maturity Maturity associated with the Series who's Space data this function is fetching.\\n    /// @return space Space pool object associated with the given adapter and maturity.\\n    /// @return poolId Balancer pool ID associated with the Space pool.\\n    /// @return pti Index of the PT token in the Space pool.\\n    /// @return scale Current adapter scale value.\\n    function getSpaceData(PeripheryLike periphery, OwnedAdapterLike adapter, uint256 maturity)\\n        public returns (Space, bytes32, uint256, uint256)\\n    {\\n        Space _space = periphery.spaceFactory().pools(address(adapter), maturity);\\n        return (_space, _space.getPoolId(), _space.pti(), adapter.scale());\\n    }\\n\\n    /// @notice Calculate the APY implied by the change in scale over the Series term (from issuance to maturity), and stretch it to the Space pools' TS period.\\n    /// @ param fallbackTargetedRate Optional Target rate to fallback on if nothing can be computed.\\n    /// @param adapter Adapter associated with the matured Series to analyze.\\n    /// @param prevMaturity Maturity for the maturied Series to analyze.\\n    /// @param space Maturity associated with the Series who's Space data this function is fetching.\\n    /// @return stretchedRate Rate implied by the previous Series stretched to the Space pool's timestretch period.\\n    function getNewTargetedRate(uint256 /* fallbackTargetedRate */, address adapter, uint256 prevMaturity, Space space) public returns (uint256) {\\n        (, uint48 prevIssuance, , , , , uint256 iscale, uint256 mscale, ) = DividerLike(divider).series(adapter, prevMaturity);\\n\\n        require(mscale != 0);\\n\\n        if (mscale <= iscale) return 0;\\n\\n        // Calculate the rate implied via the growth in scale over the previous Series term.\\n        uint256 rate = (_powWad(\\n            (mscale - iscale).divWadDown(iscale) + ONE, ONE.divWadDown((prevMaturity - prevIssuance) * ONE)\\n        ) - ONE).mulWadDown(SECONDS_PER_YEAR * ONE);\\n\\n        // Stretch the targeted rate to match the Space pool's timeshift period.\\n        // e.g. if the timestretch is 1/12 years in seconds, then the rate will be transformed from a yearly rate to a 12-year rate.\\n        return _powWad(rate + ONE, ONE.divWadDown(space.ts().mulWadDown(SECONDS_PER_YEAR * ONE))) - ONE;\\n    }\\n\\n    /// @dev Safe wad pow function for uint256s.\\n    function _powWad(uint256 x, uint256 y) internal pure returns (uint256) {\\n        require(x < 1 << 255);\\n        require(y < 1 << 255);\\n\\n        return uint256(FixedPointMathLib.powWad(int256(x), int256(y))); // Assumption: x cannot be negative so this result will never be.\\n    }\\n}\",\"keccak256\":\"0x4ff0f6baf6cab5cbacdfd1bb331699ce4c2f0a14ee1c819725e00114988dca44\",\"license\":\"AGPL-3.0-only\"},\"lib/auto-roller/src/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\nlibrary SafeCast {\\n    function safeCastTo216(uint256 x) internal pure returns (uint216 y) {\\n        require(x < 1 << 216);\\n\\n        y = uint216(x);\\n    }\\n\\n    function safeCastToInt(uint256 x) internal pure returns (int256 y) {\\n        require(x < 1 << 255);\\n\\n        y = int256(x);\\n    }\\n\\n    function safeCastToUint(int256 x) internal pure returns (uint256 y) {\\n        require(x >= 0);\\n\\n        y = uint256(x);\\n    }\\n}\",\"keccak256\":\"0xdbcb6fd4bd8a7328984893bc6c322bf7918dadb5803cf659603644c2b098939a\",\"license\":\"AGPL-3.0-only\"},\"lib/auto-roller/src/external/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n/// @author Taken from: https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n\\n// ----------------------------------------------------------------------------\\n// DateTime Library v2.0\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateTime {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function _getDaysInMonth(uint256 year, uint256 month) internal pure returns (uint256 daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function addMonths(uint256 timestamp, uint256 _months) internal pure returns (uint256 newTimestamp) {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(uint256 timestamp, uint256 _seconds) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subSeconds(uint256 timestamp, uint256 _seconds) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x13cd037597eb601de79d6ef168ed1e5a736f7f92b3bb405703a43b49005c70ab\",\"license\":\"AGPL-3.0-only\"},\"lib/auto-roller/src/interfaces/BalancerVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\n\\ninterface BalancerVault {\\n    struct JoinPoolRequest {\\n        ERC20[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n    struct ExitPoolRequest {\\n        ERC20[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        address assetIn;\\n        address assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            ERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 maxBlockNumber\\n        );\\n\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    function getProtocolFeesCollector() external returns (address);\\n    function getAuthorizer() external returns (address);\\n}\",\"keccak256\":\"0x7ad26765e03b7542cc034a70e20dd81f13b4a5c432cea89849d9231c45f78cd7\",\"license\":\"AGPL-3.0-only\"},\"lib/auto-roller/src/interfaces/Space.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\n\\nimport { BalancerVault } from \\\"./BalancerVault.sol\\\";\\n\\ninterface Space {\\n    function getPoolId() external view returns (bytes32);\\n    function totalSupply() external view returns (uint256);\\n    function pti() external view returns (uint256);\\n    function ts() external view returns (uint256);\\n    function g2() external view returns (uint256);\\n    \\n    struct SwapRequest {\\n        BalancerVault.SwapKind kind;\\n        ERC20 tokenIn;\\n        ERC20 tokenOut;\\n        uint256 amount;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 lastChangeBlock;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) \\n    external \\n    view // This is a lie. But it indeed will only mutate storage if called by the Balancer Vault, so it's true for our purposes here.\\n    returns (uint256);\\n\\n    function balanceOf(address user) external view returns (uint256 amount);\\n    function getPriceFromImpliedRate(uint256 impliedRate) external view returns (uint256 pTPriceInTarget);\\n    function adjustedTotalSupply() external view returns (uint256 supply);\\n    \\n    function getEQReserves(\\n        uint256 stretchedRate,\\n        uint256 maturity,\\n        uint256 ptReserves,\\n        uint256 targetReserves,\\n        uint256 totalSupply,\\n        uint256 initScale\\n    ) external view returns (\\n        uint256 eqPTReserves,\\n        uint256 eqTargetReserves\\n    );\\n\\n    function onSwapPreview(\\n        bool ptIn,\\n        bool givenIn,\\n        uint256 amountDelta,\\n        uint256 reservesTokenIn,\\n        uint256 reservesTokenOut,\\n        uint256 totalSupply,\\n        uint256 scale\\n    ) external view returns (uint256);\\n}\",\"keccak256\":\"0xaeac43e1355662d9b625ae62df444a293ef9391837e0fcc07c6ac9ffd59f8085\",\"license\":\"AGPL-3.0-only\"},\"solmate/src/mixins/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"../utils/FixedPointMathLib.sol\\\";\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626 is ERC20 {\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ERC20 public immutable asset;\\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol, _asset.decimals()) {\\n        asset = _asset;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n        // Check for rounding error since we round down in previewDeposit.\\n        require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 shares) {\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return convertToAssets(shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf[owner]);\\n    }\\n\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\\n\\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa0e0c28a727524fa94e7e6c1f4c793a6bd1e6d1bc652b7b02b343ebaf4cd774b\",\"license\":\"MIT\"},\"solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x43aa1509bb753f053143530705d9c4eee415691d26a4779769bf028a74e6ac69\",\"license\":\"MIT\"},\"solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    function powWad(int256 x, int256 y) internal pure returns (int256) {\\n        // Equivalent to x to the power of y because x ** y = (e ** ln(x)) ** y = e ** (ln(x) * y)\\n        return expWad((lnWad(x) * y) / int256(WAD)); // Using ln(x) means x must be greater than 0.\\n    }\\n\\n    function expWad(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            // When the result is < 0.5 we return zero. This happens when\\n            // x <= floor(log(0.5e18) * 1e18) ~ -42e18\\n            if (x <= -42139678854452767551) return 0;\\n\\n            // When the result is > (2**255 - 1) / 1e18 we can not represent it as an\\n            // int. This happens when x >= floor(log((2**255 - 1) / 1e18) * 1e18) ~ 135.\\n            if (x >= 135305999368893231589) revert(\\\"EXP_OVERFLOW\\\");\\n\\n            // x is now in the range (-42, 136) * 1e18. Convert to (-42, 136) * 2**96\\n            // for more intermediate precision and a binary basis. This base conversion\\n            // is a multiplication by 1e18 / 2**96 = 5**18 / 2**78.\\n            x = (x << 78) / 5**18;\\n\\n            // Reduce range of x to (-\\u00bd ln 2, \\u00bd ln 2) * 2**96 by factoring out powers\\n            // of two such that exp(x) = exp(x') * 2**k, where k is an integer.\\n            // Solving this gives k = round(x / log(2)) and x' = x - k * log(2).\\n            int256 k = ((x << 96) / 54916777467707473351141471128 + 2**95) >> 96;\\n            x = x - k * 54916777467707473351141471128;\\n\\n            // k is in the range [-61, 195].\\n\\n            // Evaluate using a (6, 7)-term rational approximation.\\n            // p is made monic, we'll multiply by a scale factor later.\\n            int256 y = x + 1346386616545796478920950773328;\\n            y = ((y * x) >> 96) + 57155421227552351082224309758442;\\n            int256 p = y + x - 94201549194550492254356042504812;\\n            p = ((p * y) >> 96) + 28719021644029726153956944680412240;\\n            p = p * x + (4385272521454847904659076985693276 << 96);\\n\\n            // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n            int256 q = x - 2855989394907223263936484059900;\\n            q = ((q * x) >> 96) + 50020603652535783019961831881945;\\n            q = ((q * x) >> 96) - 533845033583426703283633433725380;\\n            q = ((q * x) >> 96) + 3604857256930695427073651918091429;\\n            q = ((q * x) >> 96) - 14423608567350463180887372962807573;\\n            q = ((q * x) >> 96) + 26449188498355588339934803723976023;\\n\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial won't have zeros in the domain as all its roots are complex.\\n                // No scaling is necessary because p is already 2**96 too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r should be in the range (0.09, 0.25) * 2**96.\\n\\n            // We now need to multiply r by:\\n            // * the scale factor s = ~6.031367120.\\n            // * the 2**k factor from the range reduction.\\n            // * the 1e18 / 2**96 factor for base conversion.\\n            // We do this all at once, with an intermediate result in 2**213\\n            // basis, so the final right shift is always by a positive amount.\\n            r = int256((uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k));\\n        }\\n    }\\n\\n    function lnWad(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            require(x > 0, \\\"UNDEFINED\\\");\\n\\n            // We want to convert x from 10**18 fixed point to 2**96 fixed point.\\n            // We do this by multiplying by 2**96 / 10**18. But since\\n            // ln(x * C) = ln(x) + ln(C), we can simply do nothing here\\n            // and add ln(2**96 / 10**18) at the end.\\n\\n            // Reduce range of x to (1, 2) * 2**96\\n            // ln(2^k * x) = k * ln(2) + ln(x)\\n            int256 k = int256(log2(uint256(x))) - 96;\\n            x <<= uint256(159 - k);\\n            x = int256(uint256(x) >> 159);\\n\\n            // Evaluate using a (8, 8)-term rational approximation.\\n            // p is made monic, we will multiply by a scale factor later.\\n            int256 p = x + 3273285459638523848632254066296;\\n            p = ((p * x) >> 96) + 24828157081833163892658089445524;\\n            p = ((p * x) >> 96) + 43456485725739037958740375743393;\\n            p = ((p * x) >> 96) - 11111509109440967052023855526967;\\n            p = ((p * x) >> 96) - 45023709667254063763336534515857;\\n            p = ((p * x) >> 96) - 14706773417378608786704636184526;\\n            p = p * x - (795164235651350426258249787498 << 96);\\n\\n            // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n            // q is monic by convention.\\n            int256 q = x + 5573035233440673466300451813936;\\n            q = ((q * x) >> 96) + 71694874799317883764090561454958;\\n            q = ((q * x) >> 96) + 283447036172924575727196451306956;\\n            q = ((q * x) >> 96) + 401686690394027663651624208769553;\\n            q = ((q * x) >> 96) + 204048457590392012362485061816622;\\n            q = ((q * x) >> 96) + 31853899698501571402653359427138;\\n            q = ((q * x) >> 96) + 909429971244387300277376558375;\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial is known not to have zeros in the domain.\\n                // No scaling required because p is already 2**96 too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r is in the range (0, 0.125) * 2**96\\n\\n            // Finalization, we need to:\\n            // * multiply by the scale factor s = 5.549\\u2026\\n            // * add ln(2**96 / 10**18)\\n            // * add k * ln(2)\\n            // * multiply by 10**18 / 2**96 = 5**18 >> 78\\n\\n            // mul s * 5e18 * 2**96, base is now 5**18 * 2**192\\n            r *= 1677202110996718588342820967067443963516166;\\n            // add ln(2) * k * 5e18 * 2**192\\n            r += 16597577552685614221487285958193947469193820559219878177908093499208371 * k;\\n            // add ln(2**96 / 10**18) * 5e18 * 2**192\\n            r += 600920179829731861736702779321621459595472258049074101567377883020018308;\\n            // base conversion: mul 2**18 / 2**192\\n            r >>= 174;\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        require(x > 0, \\\"UNDEFINED\\\");\\n\\n        assembly {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            r := or(r, shl(2, lt(0xf, shr(r, x))))\\n            r := or(r, shl(1, lt(0x3, shr(r, x))))\\n            r := or(r, lt(0x1, shr(r, x)))\\n        }\\n    }\\n\\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            // z will equal 0 if y is 0, unlike in Solidity where it will revert.\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            // z will equal 0 if y is 0, unlike in Solidity where it will revert.\\n            z := div(x, y)\\n        }\\n    }\\n\\n    /// @dev Will return 0 instead of reverting if y is zero.\\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            // Add 1 to x * y if x % y > 0.\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0bf1d4f3999a4471e0fded0a2f67e7fe328e2a27385348571b1fc0a8d9c9f62e\",\"license\":\"MIT\"},\"solmate/src/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private locked = 1;\\n\\n    modifier nonReentrant() virtual {\\n        require(locked == 1, \\\"REENTRANCY\\\");\\n\\n        locked = 2;\\n\\n        _;\\n\\n        locked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa0e50a0f232da7f289430601ba927c315266b20ec739761430b0fde926fefe55\",\"license\":\"MIT\"},\"solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Caution! This library won't check that a token has code, responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // We'll write our calldata to this slot below, but restore it later.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(0, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(4, from) // Append the \\\"from\\\" argument.\\n            mstore(36, to) // Append the \\\"to\\\" argument.\\n            mstore(68, amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because that's the total length of our calldata (4 + 32 * 3)\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                call(gas(), token, 0, 0, 100, 0, 32)\\n            )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // We'll write our calldata to this slot below, but restore it later.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(0, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(4, to) // Append the \\\"to\\\" argument.\\n            mstore(36, amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because that's the total length of our calldata (4 + 32 * 2)\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                call(gas(), token, 0, 0, 68, 0, 32)\\n            )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // We'll write our calldata to this slot below, but restore it later.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(0, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(4, to) // Append the \\\"to\\\" argument.\\n            mstore(36, amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because that's the total length of our calldata (4 + 32 * 2)\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                call(gas(), token, 0, 0, 68, 0, 32)\\n            )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f2e1158c68c1f3d15b80e8a7dd92b6849f873066969562ad33c0abb80e536ff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161132438038061132483398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161129961008b600039600061033a01526112996000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063457e79fe146100465780635c25b08314610088578063afb9eaef146100a9575b600080fd5b610059610054366004610ee9565b6100bc565b604080516001600160a01b03909516855260208501939093529183015260608201526080015b60405180910390f35b61009b610096366004610f2a565b6102d6565b60405190815260200161007f565b61009b6100b7366004610f43565b61030b565b6000806000806000876001600160a01b031663857bee5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610102573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101269190610f8d565b604051638f38a55560e01b81526001600160a01b038981166004830152602482018990529190911690638f38a55590604401602060405180830381865afa158015610175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101999190610f8d565b905080816001600160a01b03166338fff2d06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fe9190610fb1565b826001600160a01b0316636f4830316040518163ffffffff1660e01b8152600401602060405180830381865afa15801561023c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102609190610fb1565b896001600160a01b031663f51e181a6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156102a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c49190610fb1565b94509450945094505093509350935093565b60008060006102ed6102e84286610513565b6105ea565b509150915061030382826001600080600061060b565b949350505050565b604051630448e98560e11b81526001600160a01b038481166004830152602482018490526000918291829182917f00000000000000000000000000000000000000000000000000000000000000001690630891d30a90604401610120604051808303816000875af1158015610384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a89190610fda565b509750975050505050935050806000036103c157600080fd5b8181116103d45760009350505050610303565b60006104666103ef670de0b6b3a76400006301e133806110a3565b670de0b6b3a7640000610456816104108861040a818a6110c2565b90610667565b61041a91906110d9565b610451670de0b6b3a764000061043865ffffffffffff8c168f6110c2565b61044291906110a3565b670de0b6b3a764000090610667565b610685565b61046091906110c2565b906106b1565b9050670de0b6b3a76400006104fc61047e82846110d9565b61045161044261049a670de0b6b3a76400006301e133806110a3565b8b6001600160a01b031663e86d60bf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104609190610fb1565b61050691906110c2565b9998505050505050505050565b600080808061052d6105286201518088611107565b6106c6565b9194509250905061053e85836110d9565b9150600c61054d6001846110c2565b6105579190611107565b61056190846110d9565b9250600c6105706001846110c2565b61057a919061111b565b6105859060016110d9565b91506000610593848461083a565b9050808211156105a1578091505b6105ae620151808861111b565b620151806105bd8686866108c0565b6105c791906110a3565b6105d191906110d9565b9450868510156105e057600080fd5b5050505092915050565b600080806105fe6105286201518086611107565b9196909550909350915050565b600081610619603c856110a3565b610625610e10876110a3565b620151806106348b8b8b6108c0565b61063e91906110a3565b61064891906110d9565b61065291906110d9565b61065c91906110d9565b979650505050505050565b600061067c83670de0b6b3a7640000846109fd565b90505b92915050565b6000600160ff1b831061069757600080fd5b600160ff1b82106106a757600080fd5b61067c8383610a1c565b600061067c8383670de0b6b3a76400006109fd565b60008080838162253d8c6106dd8362010bd961112f565b6106e7919061112f565b9050600062023ab16106fa83600461116f565b61070491906111f6565b905060046107158262023ab161116f565b61072090600361112f565b61072a91906111f6565b6107349083611224565b9150600062164b0961074784600161112f565b61075390610fa061116f565b61075d91906111f6565b9050600461076d826105b561116f565b61077791906111f6565b6107819084611224565b61078c90601f61112f565b9250600061098f61079e85605061116f565b6107a891906111f6565b9050600060506107ba8361098f61116f565b6107c491906111f6565b6107ce9086611224565b90506107db600b836111f6565b94506107e885600c61116f565b6107f383600261112f565b6107fd9190611224565b9150848361080c603187611224565b61081790606461116f565b610821919061112f565b61082b919061112f565b9a919950975095505050505050565b6000816001148061084b5750816003145b806108565750816005145b806108615750816007145b8061086c5750816008145b80610877575081600a145b80610882575081600c145b1561088f5750601f61067f565b8160021461089f5750601e61067f565b6108a883610a4d565b6108b357601c6108b6565b601d5b60ff169392505050565b60006107b28410156108d157600080fd5b838383600062253d8c60046064600c6108eb600e88611224565b6108f591906111f6565b6109018861132461112f565b61090b919061112f565b61091591906111f6565b61092090600361116f565b61092a91906111f6565b600c80610938600e88611224565b61094291906111f6565b61094d90600c61116f565b610958600288611224565b6109629190611224565b61096e9061016f61116f565b61097891906111f6565b6004600c610987600e89611224565b61099191906111f6565b61099d896112c061112f565b6109a7919061112f565b6109b3906105b561116f565b6109bd91906111f6565b6109c9617d4b87611224565b6109d3919061112f565b6109dd919061112f565b6109e79190611224565b6109f19190611224565b98975050505050505050565b828202811515841585830485141716610a1557600080fd5b0492915050565b600061067c670de0b6b3a764000083610a3486610a89565b610a3e919061116f565b610a4891906111f6565b610c6f565b6000610a5a60048361111b565b158015610a705750610a6d60648361111b565b15155b8061067f5750610a826101908361111b565b1592915050565b6000808213610acb5760405162461bcd60e51b815260206004820152600960248201526815539111519253915160ba1b60448201526064015b60405180910390fd5b60006060610ad884610e29565b03609f8181039490941b90931c6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd19019091027ffffffffffffffff5f6af8f7b3396644f18e157960000000000000000000000000105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b393909302929092017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e198213610c8a57506000919050565b680755bf798b4a1bf1e58212610cd15760405162461bcd60e51b815260206004820152600c60248201526b4558505f4f564552464c4f5760a01b6044820152606401610ac2565b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056b80000000000000000000000001901d6bb17217f7d1cf79abc9e3b39881029093036c240c330e9fb2d9cbaf0fd5aafb1981018102606090811d6d0277594991cfc85f6e2461837cd9018202811d6d1a521255e34f6a5061b25ef1c9c319018202811d6db1bbb201f443cf962f1a1d3db4a5018202811d6e02c72388d9f74f51a9331fed693f1419018202811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765084018402831d9081019084016d01d3967ed30fc4f89c02bab5708119010290911d6e0587f503bb6ea29d25fcb7401964500190910279d835ebba824c98fb31b83b2ca45c000000000000000000000000010574029d9dc38563c32e5c2f6dc192ee70ef65f9978af30260c3939093039290921c92915050565b6000808211610e665760405162461bcd60e51b815260206004820152600960248201526815539111519253915160ba1b6044820152606401610ac2565b5060016fffffffffffffffffffffffffffffffff821160071b82811c67ffffffffffffffff1060061b1782811c63ffffffff1060051b1782811c61ffff1060041b1782811c60ff10600390811b90911783811c600f1060021b1783811c909110821b1791821c111790565b6001600160a01b0381168114610ee657600080fd5b50565b600080600060608486031215610efe57600080fd5b8335610f0981610ed1565b92506020840135610f1981610ed1565b929592945050506040919091013590565b600060208284031215610f3c57600080fd5b5035919050565b60008060008060808587031215610f5957600080fd5b843593506020850135610f6b81610ed1565b9250604085013591506060850135610f8281610ed1565b939692955090935050565b600060208284031215610f9f57600080fd5b8151610faa81610ed1565b9392505050565b600060208284031215610fc357600080fd5b5051919050565b8051610fd581610ed1565b919050565b60008060008060008060008060006101208a8c031215610ff957600080fd5b895161100481610ed1565b60208b015190995065ffffffffffff8116811461102057600080fd5b60408b015190985061103181610ed1565b60608b01519097506bffffffffffffffffffffffff8116811461105357600080fd5b955061106160808b01610fca565b945060a08a0151935060c08a0151925060e08a015191506101008a015190509295985092959850929598565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156110bd576110bd61108d565b500290565b6000828210156110d4576110d461108d565b500390565b600082198211156110ec576110ec61108d565b500190565b634e487b7160e01b600052601260045260246000fd5b600082611116576111166110f1565b500490565b60008261112a5761112a6110f1565b500690565b6000808212826001600160ff1b03038413811516156111505761115061108d565b600160ff1b83900384128116156111695761116961108d565b50500190565b60006001600160ff1b036000841360008413858304851182821616156111975761119761108d565b600160ff1b60008712828116878305891216156111b6576111b661108d565b600087129250878205871284841616156111d2576111d261108d565b878505871281841616156111e8576111e861108d565b505050929093029392505050565b600082611205576112056110f1565b600160ff1b82146000198414161561121f5761121f61108d565b500590565b60008083128015600160ff1b8501841216156112425761124261108d565b836001600160ff1b0301831381161561125d5761125d61108d565b5050039056fea2646970667358221220f4e0a5a752a81794c54c353ea9b97beb7492e7dc4fa27fe73b2f2db53641f44964736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063457e79fe146100465780635c25b08314610088578063afb9eaef146100a9575b600080fd5b610059610054366004610ee9565b6100bc565b604080516001600160a01b03909516855260208501939093529183015260608201526080015b60405180910390f35b61009b610096366004610f2a565b6102d6565b60405190815260200161007f565b61009b6100b7366004610f43565b61030b565b6000806000806000876001600160a01b031663857bee5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610102573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101269190610f8d565b604051638f38a55560e01b81526001600160a01b038981166004830152602482018990529190911690638f38a55590604401602060405180830381865afa158015610175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101999190610f8d565b905080816001600160a01b03166338fff2d06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fe9190610fb1565b826001600160a01b0316636f4830316040518163ffffffff1660e01b8152600401602060405180830381865afa15801561023c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102609190610fb1565b896001600160a01b031663f51e181a6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156102a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c49190610fb1565b94509450945094505093509350935093565b60008060006102ed6102e84286610513565b6105ea565b509150915061030382826001600080600061060b565b949350505050565b604051630448e98560e11b81526001600160a01b038481166004830152602482018490526000918291829182917f00000000000000000000000000000000000000000000000000000000000000001690630891d30a90604401610120604051808303816000875af1158015610384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a89190610fda565b509750975050505050935050806000036103c157600080fd5b8181116103d45760009350505050610303565b60006104666103ef670de0b6b3a76400006301e133806110a3565b670de0b6b3a7640000610456816104108861040a818a6110c2565b90610667565b61041a91906110d9565b610451670de0b6b3a764000061043865ffffffffffff8c168f6110c2565b61044291906110a3565b670de0b6b3a764000090610667565b610685565b61046091906110c2565b906106b1565b9050670de0b6b3a76400006104fc61047e82846110d9565b61045161044261049a670de0b6b3a76400006301e133806110a3565b8b6001600160a01b031663e86d60bf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104609190610fb1565b61050691906110c2565b9998505050505050505050565b600080808061052d6105286201518088611107565b6106c6565b9194509250905061053e85836110d9565b9150600c61054d6001846110c2565b6105579190611107565b61056190846110d9565b9250600c6105706001846110c2565b61057a919061111b565b6105859060016110d9565b91506000610593848461083a565b9050808211156105a1578091505b6105ae620151808861111b565b620151806105bd8686866108c0565b6105c791906110a3565b6105d191906110d9565b9450868510156105e057600080fd5b5050505092915050565b600080806105fe6105286201518086611107565b9196909550909350915050565b600081610619603c856110a3565b610625610e10876110a3565b620151806106348b8b8b6108c0565b61063e91906110a3565b61064891906110d9565b61065291906110d9565b61065c91906110d9565b979650505050505050565b600061067c83670de0b6b3a7640000846109fd565b90505b92915050565b6000600160ff1b831061069757600080fd5b600160ff1b82106106a757600080fd5b61067c8383610a1c565b600061067c8383670de0b6b3a76400006109fd565b60008080838162253d8c6106dd8362010bd961112f565b6106e7919061112f565b9050600062023ab16106fa83600461116f565b61070491906111f6565b905060046107158262023ab161116f565b61072090600361112f565b61072a91906111f6565b6107349083611224565b9150600062164b0961074784600161112f565b61075390610fa061116f565b61075d91906111f6565b9050600461076d826105b561116f565b61077791906111f6565b6107819084611224565b61078c90601f61112f565b9250600061098f61079e85605061116f565b6107a891906111f6565b9050600060506107ba8361098f61116f565b6107c491906111f6565b6107ce9086611224565b90506107db600b836111f6565b94506107e885600c61116f565b6107f383600261112f565b6107fd9190611224565b9150848361080c603187611224565b61081790606461116f565b610821919061112f565b61082b919061112f565b9a919950975095505050505050565b6000816001148061084b5750816003145b806108565750816005145b806108615750816007145b8061086c5750816008145b80610877575081600a145b80610882575081600c145b1561088f5750601f61067f565b8160021461089f5750601e61067f565b6108a883610a4d565b6108b357601c6108b6565b601d5b60ff169392505050565b60006107b28410156108d157600080fd5b838383600062253d8c60046064600c6108eb600e88611224565b6108f591906111f6565b6109018861132461112f565b61090b919061112f565b61091591906111f6565b61092090600361116f565b61092a91906111f6565b600c80610938600e88611224565b61094291906111f6565b61094d90600c61116f565b610958600288611224565b6109629190611224565b61096e9061016f61116f565b61097891906111f6565b6004600c610987600e89611224565b61099191906111f6565b61099d896112c061112f565b6109a7919061112f565b6109b3906105b561116f565b6109bd91906111f6565b6109c9617d4b87611224565b6109d3919061112f565b6109dd919061112f565b6109e79190611224565b6109f19190611224565b98975050505050505050565b828202811515841585830485141716610a1557600080fd5b0492915050565b600061067c670de0b6b3a764000083610a3486610a89565b610a3e919061116f565b610a4891906111f6565b610c6f565b6000610a5a60048361111b565b158015610a705750610a6d60648361111b565b15155b8061067f5750610a826101908361111b565b1592915050565b6000808213610acb5760405162461bcd60e51b815260206004820152600960248201526815539111519253915160ba1b60448201526064015b60405180910390fd5b60006060610ad884610e29565b03609f8181039490941b90931c6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd19019091027ffffffffffffffff5f6af8f7b3396644f18e157960000000000000000000000000105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b393909302929092017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e198213610c8a57506000919050565b680755bf798b4a1bf1e58212610cd15760405162461bcd60e51b815260206004820152600c60248201526b4558505f4f564552464c4f5760a01b6044820152606401610ac2565b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056b80000000000000000000000001901d6bb17217f7d1cf79abc9e3b39881029093036c240c330e9fb2d9cbaf0fd5aafb1981018102606090811d6d0277594991cfc85f6e2461837cd9018202811d6d1a521255e34f6a5061b25ef1c9c319018202811d6db1bbb201f443cf962f1a1d3db4a5018202811d6e02c72388d9f74f51a9331fed693f1419018202811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765084018402831d9081019084016d01d3967ed30fc4f89c02bab5708119010290911d6e0587f503bb6ea29d25fcb7401964500190910279d835ebba824c98fb31b83b2ca45c000000000000000000000000010574029d9dc38563c32e5c2f6dc192ee70ef65f9978af30260c3939093039290921c92915050565b6000808211610e665760405162461bcd60e51b815260206004820152600960248201526815539111519253915160ba1b6044820152606401610ac2565b5060016fffffffffffffffffffffffffffffffff821160071b82811c67ffffffffffffffff1060061b1782811c63ffffffff1060051b1782811c61ffff1060041b1782811c60ff10600390811b90911783811c600f1060021b1783811c909110821b1791821c111790565b6001600160a01b0381168114610ee657600080fd5b50565b600080600060608486031215610efe57600080fd5b8335610f0981610ed1565b92506020840135610f1981610ed1565b929592945050506040919091013590565b600060208284031215610f3c57600080fd5b5035919050565b60008060008060808587031215610f5957600080fd5b843593506020850135610f6b81610ed1565b9250604085013591506060850135610f8281610ed1565b939692955090935050565b600060208284031215610f9f57600080fd5b8151610faa81610ed1565b9392505050565b600060208284031215610fc357600080fd5b5051919050565b8051610fd581610ed1565b919050565b60008060008060008060008060006101208a8c031215610ff957600080fd5b895161100481610ed1565b60208b015190995065ffffffffffff8116811461102057600080fd5b60408b015190985061103181610ed1565b60608b01519097506bffffffffffffffffffffffff8116811461105357600080fd5b955061106160808b01610fca565b945060a08a0151935060c08a0151925060e08a015191506101008a015190509295985092959850929598565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156110bd576110bd61108d565b500290565b6000828210156110d4576110d461108d565b500390565b600082198211156110ec576110ec61108d565b500190565b634e487b7160e01b600052601260045260246000fd5b600082611116576111166110f1565b500490565b60008261112a5761112a6110f1565b500690565b6000808212826001600160ff1b03038413811516156111505761115061108d565b600160ff1b83900384128116156111695761116961108d565b50500190565b60006001600160ff1b036000841360008413858304851182821616156111975761119761108d565b600160ff1b60008712828116878305891216156111b6576111b661108d565b600087129250878205871284841616156111d2576111d261108d565b878505871281841616156111e8576111e861108d565b505050929093029392505050565b600082611205576112056110f1565b600160ff1b82146000198414161561121f5761121f61108d565b500590565b60008083128015600160ff1b8501841216156112425761124261108d565b836001600160ff1b0301831381161561125d5761125d61108d565b5050039056fea2646970667358221220f4e0a5a752a81794c54c353ea9b97beb7492e7dc4fa27fe73b2f2db53641f44964736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getFutureMaturity(uint256)": {
        "params": {
          "monthsForward": "Number of months in to advance forward."
        },
        "returns": {
          "_0": "timestamp The timestamp around the number of months forward given, exactly at 00:00 UTC on the top of the month."
        }
      },
      "getNewTargetedRate(uint256,address,uint256,address)": {
        "params": {
          "adapter": "Adapter associated with the matured Series to analyze.",
          "prevMaturity": "Maturity for the maturied Series to analyze.",
          "space": "Maturity associated with the Series who's Space data this function is fetching."
        },
        "returns": {
          "_0": "stretchedRate Rate implied by the previous Series stretched to the Space pool's timestretch period."
        }
      },
      "getSpaceData(address,address,uint256)": {
        "params": {
          "adapter": "Adapter associated with the Series who's Space data this function is fetching.",
          "maturity": "Maturity associated with the Series who's Space data this function is fetching.",
          "periphery": "Currently active Sense Periphery contract."
        },
        "returns": {
          "_0": "space Space pool object associated with the given adapter and maturity.",
          "_1": "poolId Balancer pool ID associated with the Space pool.",
          "_2": "pti Index of the PT token in the Space pool.",
          "_3": "scale Current adapter scale value."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getFutureMaturity(uint256)": {
        "notice": "Calculate a maturity timestamp around x months in the future on exactly the top of the month."
      },
      "getNewTargetedRate(uint256,address,uint256,address)": {
        "notice": "Calculate the APY implied by the change in scale over the Series term (from issuance to maturity), and stretch it to the Space pools' TS period. param fallbackTargetedRate Optional Target rate to fallback on if nothing can be computed."
      },
      "getSpaceData(address,address,uint256)": {
        "notice": "Calculate a maturity timestamp around x months in the future on exactly the top of the month."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}