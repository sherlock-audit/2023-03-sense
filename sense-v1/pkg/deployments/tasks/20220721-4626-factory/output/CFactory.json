{
  "address": "0x3Aee253FB4B21aD4f42c05414E05Aa04238Df372",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_divider",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stake",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stakeSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minm",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxm",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "ifee",
              "type": "uint128"
            },
            {
              "internalType": "uint16",
              "name": "mode",
              "type": "uint16"
            },
            {
              "internalType": "uint64",
              "name": "tilt",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "guard",
              "type": "uint256"
            }
          ],
          "internalType": "struct BaseFactory.FactoryParams",
          "name": "_factoryParams",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_reward",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPeriphery",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TargetNotSupported",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "UserTrustUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMPTROLLER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_LEVEL",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_USD_PRICEFEED",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "deployAdapter",
      "outputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "divider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryParams",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stake",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxm",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "ifee",
          "type": "uint128"
        },
        {
          "internalType": "uint16",
          "name": "mode",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "tilt",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "guard",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTrusted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reward",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        }
      ],
      "name": "setClaimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "setIsTrusted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "setRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x460351707e0be3fbd21fe26ac8362bd497d4d40c0fb1ccf5649261a0fabdb820",
  "receipt": {
    "to": null,
    "from": "0x59A181710F926Eae6FddfbF27a14259E8DD00cA2",
    "contractAddress": "0x3Aee253FB4B21aD4f42c05414E05Aa04238Df372",
    "transactionIndex": 27,
    "gasUsed": "4668276",
    "logsBloom": "0x
    "blockHash": "0x2503206408515a8f03355a3621ebb4e75085ef0291fa9807d5bf594d70b51e7a",
    "transactionHash": "0x460351707e0be3fbd21fe26ac8362bd497d4d40c0fb1ccf5649261a0fabdb820",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 15408349,
        "transactionHash": "0x460351707e0be3fbd21fe26ac8362bd497d4d40c0fb1ccf5649261a0fabdb820",
        "address": "0x3Aee253FB4B21aD4f42c05414E05Aa04238Df372",
        "topics": [
          "0xe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986",
          "0x00000000000000000000000059a181710f926eae6fddfbf27a14259e8dd00ca2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 31,
        "blockHash": "0x2503206408515a8f03355a3621ebb4e75085ef0291fa9807d5bf594d70b51e7a"
      }
    ],
    "blockNumber": 15408349,
    "cumulativeGasUsed": "6460347",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x86bA3E96Be68563E41c2f5769F1AF9fAf758e6E0",
    [
      "0x1887118E49e0F4A78Bd71B792a49dE03504A764D",
      "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
      "250000000000000000",
      "2629800",
      "315576000",
      "1000000000000000",
      0,
      0,
      "100000000000000000000000"
    ],
    "0xc00e94cb662c3520282e6f5717214004a7f26888"
  ],
  "numDeployments": 2,
  "solcInputHash": "1272f268ed0016603d4f4b050bcdcf1b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_divider\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxm\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"ifee\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"mode\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"tilt\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"guard\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseFactory.FactoryParams\",\"name\":\"_factoryParams\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPeriphery\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetNotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"UserTrustUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_LEVEL\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_USD_PRICEFEED\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"deployAdapter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxm\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"ifee\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"mode\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"tilt\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"guard\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTrusted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"setClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"setIsTrusted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setClaimer(address,address)\":{\"params\":{\"_claimer\":\"New claimer contract address\"}},\"setRewardToken(address,address)\":{\"params\":{\"_adapter\":\"address of adapter to update the reward token on\",\"_rewardToken\":\"address of reward token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DEFAULT_LEVEL()\":{\"notice\":\"Sets level to `31` by default, which keeps all Divider lifecycle methods public (`issue`, `combine`, `collect`, etc), but not the `onRedeem` hook.\"},\"divider()\":{\"notice\":\"Sense core Divider address\"},\"factoryParams()\":{\"notice\":\"params for adapters deployed with this factory\"},\"setClaimer(address,address)\":{\"notice\":\"Sets `claimer` for a given adapter\"},\"setRewardToken(address,address)\":{\"notice\":\"Update reward token for given adapter\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sense-finance/v1-core/src/adapters/implementations/compound/CFactory.sol\":\"CFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":15000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0240f7703cff32a61ee3e9fbb339e09a944260432a9ef37debf3692b1a6c8049\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/Bytes32AddressLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Library for converting between addresses and bytes32 values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/Bytes32AddressLib.sol)\\nlibrary Bytes32AddressLib {\\n    function fromLast20Bytes(bytes32 bytesValue) internal pure returns (address) {\\n        return address(uint160(uint256(bytesValue)));\\n    }\\n\\n    function fillLast12Bytes(address addressValue) internal pure returns (bytes32) {\\n        return bytes32(bytes20(addressValue));\\n    }\\n}\\n\",\"keccak256\":\"0x2afc1acba8a77555e061420cab585a5bd4f030c3ad0ac3e0066dbb55e3a8adff\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private locked = 1;\\n\\n    modifier nonReentrant() {\\n        require(locked == 1, \\\"REENTRANCY\\\");\\n\\n        locked = 2;\\n\\n        _;\\n\\n        locked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0xedbae9363161b25063b9653299e38f29481f512de88011613f514d23cd6817ee\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    event Debug(bool one, bool two, uint256 retsize);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf3c37dad1c92b696ffb8b4532527514f8c8a31a4732c6f61815a4fe5f5ce8725\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/Divider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { ReentrancyGuard } from \\\"@rari-capital/solmate/src/utils/ReentrancyGuard.sol\\\";\\nimport { DateTime } from \\\"./external/DateTime.sol\\\";\\nimport { FixedMath } from \\\"./external/FixedMath.sol\\\";\\n\\n// Internal references\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\nimport { Levels } from \\\"@sense-finance/v1-utils/src/libs/Levels.sol\\\";\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\nimport { YT } from \\\"./tokens/YT.sol\\\";\\nimport { Token } from \\\"./tokens/Token.sol\\\";\\nimport { BaseAdapter as Adapter } from \\\"./adapters/abstract/BaseAdapter.sol\\\";\\n\\n/// @title Sense Divider: Divide Assets in Two\\n/// @author fedealconada + jparklev\\n/// @notice You can use this contract to issue, combine, and redeem Sense ERC20 Principal and Yield Tokens\\ncontract Divider is Trust, ReentrancyGuard, Pausable {\\n    using SafeTransferLib for ERC20;\\n    using FixedMath for uint256;\\n    using Levels for uint256;\\n\\n    /* ========== PUBLIC CONSTANTS ========== */\\n\\n    /// @notice Buffer before and after the actual maturity in which only the sponsor can settle the Series\\n    uint256 public constant SPONSOR_WINDOW = 3 hours;\\n\\n    /// @notice Buffer after the sponsor window in which anyone can settle the Series\\n    uint256 public constant SETTLEMENT_WINDOW = 3 hours;\\n\\n    /// @notice 5% issuance fee cap\\n    uint256 public constant ISSUANCE_FEE_CAP = 0.05e18;\\n\\n    /* ========== PUBLIC MUTABLE STORAGE ========== */\\n\\n    address public periphery;\\n\\n    /// @notice Sense community multisig\\n    address public immutable cup;\\n\\n    /// @notice Principal/Yield tokens deployer\\n    address public immutable tokenHandler;\\n\\n    /// @notice Permissionless flag\\n    bool public permissionless;\\n\\n    /// @notice Guarded launch flag\\n    bool public guarded = true;\\n\\n    /// @notice Number of adapters (including turned off)\\n    uint248 public adapterCounter;\\n\\n    /// @notice adapter ID -> adapter address\\n    mapping(uint256 => address) public adapterAddresses;\\n\\n    /// @notice adapter data\\n    mapping(address => AdapterMeta) public adapterMeta;\\n\\n    /// @notice adapter -> maturity -> Series\\n    mapping(address => mapping(uint256 => Series)) public series;\\n\\n    /// @notice adapter -> maturity -> user -> lscale (last scale)\\n    mapping(address => mapping(uint256 => mapping(address => uint256))) public lscales;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct Series {\\n        // Principal ERC20 token\\n        address pt;\\n        // Timestamp of series initialization\\n        uint48 issuance;\\n        // Yield ERC20 token\\n        address yt;\\n        // % of underlying principal initially reserved for Yield\\n        uint96 tilt;\\n        // Actor who initialized the Series\\n        address sponsor;\\n        // Tracks fees due to the series' settler\\n        uint256 reward;\\n        // Scale at issuance\\n        uint256 iscale;\\n        // Scale at maturity\\n        uint256 mscale;\\n        // Max scale value from this series' lifetime\\n        uint256 maxscale;\\n    }\\n\\n    struct AdapterMeta {\\n        // Adapter ID\\n        uint248 id;\\n        // Adapter enabled/disabled\\n        bool enabled;\\n        // Max amount of Target allowed to be issued\\n        uint256 guard;\\n        // Adapter level\\n        uint248 level;\\n    }\\n\\n    constructor(address _cup, address _tokenHandler) Trust(msg.sender) {\\n        cup = _cup;\\n        tokenHandler = _tokenHandler;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Enable an adapter\\n    /// @dev when permissionless is disabled, only the Periphery can onboard adapters\\n    /// @dev after permissionless is enabled, anyone can onboard adapters\\n    /// @param adapter Adapter's address\\n    function addAdapter(address adapter) external whenNotPaused {\\n        if (!permissionless && msg.sender != periphery) revert Errors.OnlyPermissionless();\\n        if (adapterMeta[adapter].id > 0 && !adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        _setAdapter(adapter, true);\\n    }\\n\\n    /// @notice Initializes a new Series\\n    /// @dev Deploys two ERC20 contracts, one for PTs and the other one for YTs\\n    /// @dev Transfers some fixed amount of stake asset to this contract\\n    /// @param adapter Adapter to associate with the Series\\n    /// @param maturity Maturity date for the new Series, in units of unix time\\n    /// @param sponsor Sponsor of the Series that puts up a token stake and receives the issuance fees\\n    function initSeries(\\n        address adapter,\\n        uint256 maturity,\\n        address sponsor\\n    ) external nonReentrant whenNotPaused returns (address pt, address yt) {\\n        if (periphery != msg.sender) revert Errors.OnlyPeriphery();\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (_exists(adapter, maturity)) revert Errors.DuplicateSeries();\\n        if (!_isValid(adapter, maturity)) revert Errors.InvalidMaturity();\\n\\n        // Transfer stake asset stake from caller to adapter\\n        (address target, address stake, uint256 stakeSize) = Adapter(adapter).getStakeAndTarget();\\n\\n        // Deploy Principal & Yield Tokens for this new Series\\n        (pt, yt) = TokenHandler(tokenHandler).deploy(adapter, adapterMeta[adapter].id, maturity);\\n\\n        // Initialize the new Series struct\\n        uint256 scale = Adapter(adapter).scale();\\n\\n        series[adapter][maturity].pt = pt;\\n        series[adapter][maturity].issuance = uint48(block.timestamp);\\n        series[adapter][maturity].yt = yt;\\n        series[adapter][maturity].tilt = uint96(Adapter(adapter).tilt());\\n        series[adapter][maturity].sponsor = sponsor;\\n        series[adapter][maturity].iscale = scale;\\n        series[adapter][maturity].maxscale = scale;\\n\\n        ERC20(stake).safeTransferFrom(msg.sender, adapter, stakeSize);\\n\\n        emit SeriesInitialized(adapter, maturity, pt, yt, sponsor, target);\\n    }\\n\\n    /// @notice Settles a Series and transfers the settlement reward to the caller\\n    /// @dev The Series' sponsor has a grace period where only they can settle the Series\\n    /// @dev After that, the reward becomes MEV\\n    /// @param adapter Adapter to associate with the Series\\n    /// @param maturity Maturity date for the new Series\\n    function settleSeries(address adapter, uint256 maturity) external nonReentrant whenNotPaused {\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n        if (_settled(adapter, maturity)) revert Errors.AlreadySettled();\\n        if (!_canBeSettled(adapter, maturity)) revert Errors.OutOfWindowBoundaries();\\n\\n        // The maturity scale value is all a Series needs for us to consider it \\\"settled\\\"\\n        uint256 mscale = Adapter(adapter).scale();\\n        series[adapter][maturity].mscale = mscale;\\n\\n        if (mscale > series[adapter][maturity].maxscale) {\\n            series[adapter][maturity].maxscale = mscale;\\n        }\\n\\n        // Reward the caller for doing the work of settling the Series at around the correct time\\n        (address target, address stake, uint256 stakeSize) = Adapter(adapter).getStakeAndTarget();\\n        ERC20(target).safeTransferFrom(adapter, msg.sender, series[adapter][maturity].reward);\\n        ERC20(stake).safeTransferFrom(adapter, msg.sender, stakeSize);\\n\\n        emit SeriesSettled(adapter, maturity, msg.sender);\\n    }\\n\\n    /// @notice Mint Principal & Yield Tokens of a specific Series\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series [unix time]\\n    /// @param tBal Balance of Target to deposit\\n    /// @dev The balance of PTs and YTs minted will be the same value in units of underlying (less fees)\\n    function issue(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 tBal\\n    ) external nonReentrant whenNotPaused returns (uint256 uBal) {\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n        if (_settled(adapter, maturity)) revert Errors.IssueOnSettle();\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.issueRestricted() && msg.sender != adapter) revert Errors.IssuanceRestricted();\\n\\n        ERC20 target = ERC20(Adapter(adapter).target());\\n\\n        // Take the issuance fee out of the deposited Target, and put it towards the settlement reward\\n        uint256 issuanceFee = Adapter(adapter).ifee();\\n        if (issuanceFee > ISSUANCE_FEE_CAP) revert Errors.IssuanceFeeCapExceeded();\\n        uint256 fee = tBal.fmul(issuanceFee);\\n\\n        unchecked {\\n            // Safety: bounded by the Target's total token supply\\n            series[adapter][maturity].reward += fee;\\n        }\\n        uint256 tBalSubFee = tBal - fee;\\n\\n        // Ensure the caller won't hit the issuance cap with this action\\n        unchecked {\\n            // Safety: bounded by the Target's total token supply\\n            if (guarded && target.balanceOf(adapter) + tBal > adapterMeta[address(adapter)].guard)\\n                revert Errors.GuardCapReached();\\n        }\\n\\n        // Update values on adapter\\n        Adapter(adapter).notify(msg.sender, tBalSubFee, true);\\n\\n        uint256 scale = level.collectDisabled() ? series[adapter][maturity].iscale : Adapter(adapter).scale();\\n\\n        // Determine the amount of Underlying equal to the Target being sent in (the principal)\\n        uBal = tBalSubFee.fmul(scale);\\n\\n        // If the caller has not collected on YT before, use the current scale, otherwise\\n        // use the harmonic mean of the last and the current scale value\\n        lscales[adapter][maturity][msg.sender] = lscales[adapter][maturity][msg.sender] == 0\\n            ? scale\\n            : _reweightLScale(\\n                adapter,\\n                maturity,\\n                YT(series[adapter][maturity].yt).balanceOf(msg.sender),\\n                uBal,\\n                msg.sender,\\n                scale\\n            );\\n\\n        // Mint equal amounts of PT and YT\\n        Token(series[adapter][maturity].pt).mint(msg.sender, uBal);\\n        YT(series[adapter][maturity].yt).mint(msg.sender, uBal);\\n\\n        target.safeTransferFrom(msg.sender, adapter, tBal);\\n\\n        emit Issued(adapter, maturity, uBal, msg.sender);\\n    }\\n\\n    /// @notice Reconstitute Target by burning PT and YT\\n    /// @dev Explicitly burns YTs before maturity, and implicitly does it at/after maturity through `_collect()`\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal Balance of PT and YT to burn\\n    function combine(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal\\n    ) external nonReentrant whenNotPaused returns (uint256 tBal) {\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.combineRestricted() && msg.sender != adapter) revert Errors.CombineRestricted();\\n\\n        // Burn the PT\\n        Token(series[adapter][maturity].pt).burn(msg.sender, uBal);\\n\\n        // Collect whatever excess is due\\n        uint256 collected = _collect(msg.sender, adapter, maturity, uBal, uBal, address(0));\\n\\n        uint256 cscale = series[adapter][maturity].mscale;\\n        bool settled = _settled(adapter, maturity);\\n        if (!settled) {\\n            // If it's not settled, then YT won't be burned automatically in `_collect()`\\n            YT(series[adapter][maturity].yt).burn(msg.sender, uBal);\\n            // If collect has been restricted, use the initial scale, otherwise use the current scale\\n            cscale = level.collectDisabled()\\n                ? series[adapter][maturity].iscale\\n                : lscales[adapter][maturity][msg.sender];\\n        }\\n\\n        // Convert from units of Underlying to units of Target\\n        tBal = uBal.fdiv(cscale);\\n        ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, msg.sender, tBal);\\n\\n        // Notify only when Series is not settled as when it is, the _collect() call above would trigger a _redeemYT which will call notify\\n        if (!settled) Adapter(adapter).notify(msg.sender, tBal, false);\\n        unchecked {\\n            // Safety: bounded by the Target's total token supply\\n            tBal += collected;\\n        }\\n        emit Combined(adapter, maturity, tBal, msg.sender);\\n    }\\n\\n    /// @notice Burn PT of a Series once it's been settled\\n    /// @dev The balance of redeemable Target is a function of the change in Scale\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal Amount of PT to burn, which should be equivalent to the amount of Underlying owed to the caller\\n    function redeem(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal\\n    ) external nonReentrant whenNotPaused returns (uint256 tBal) {\\n        // If a Series is settled, we know that it must have existed as well, so that check is unnecessary\\n        if (!_settled(adapter, maturity)) revert Errors.NotSettled();\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.redeemRestricted() && msg.sender == adapter) revert Errors.RedeemRestricted();\\n\\n        // Burn the caller's PT\\n        Token(series[adapter][maturity].pt).burn(msg.sender, uBal);\\n\\n        // Principal Token holder's share of the principal = (1 - part of the principal that belongs to Yield)\\n        uint256 zShare = FixedMath.WAD - series[adapter][maturity].tilt;\\n\\n        // If Principal Token are at a loss and Yield have some principal to help cover the shortfall,\\n        // take what we can from Yield Token's principal\\n        if (series[adapter][maturity].mscale.fdiv(series[adapter][maturity].maxscale) >= zShare) {\\n            tBal = (uBal * zShare) / series[adapter][maturity].mscale;\\n        } else {\\n            tBal = uBal.fdiv(series[adapter][maturity].maxscale);\\n        }\\n\\n        if (!level.redeemHookDisabled()) {\\n            Adapter(adapter).onRedeem(uBal, series[adapter][maturity].mscale, series[adapter][maturity].maxscale, tBal);\\n        }\\n\\n        ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, msg.sender, tBal);\\n        emit PTRedeemed(adapter, maturity, tBal);\\n    }\\n\\n    function collect(\\n        address usr,\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBalTransfer,\\n        address to\\n    ) external nonReentrant onlyYT(adapter, maturity) whenNotPaused returns (uint256 collected) {\\n        uint256 uBal = YT(msg.sender).balanceOf(usr);\\n        return _collect(usr, adapter, maturity, uBal, uBalTransfer > 0 ? uBalTransfer : uBal, to);\\n    }\\n\\n    /// @notice Collect YT excess before, at, or after maturity\\n    /// @dev If `to` is set, we copy the lscale value from usr to this address\\n    /// @param usr User who's collecting for their YTs\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal yield Token balance\\n    /// @param uBalTransfer original transfer value\\n    /// @param to address to set the lscale value from usr\\n    function _collect(\\n        address usr,\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal,\\n        uint256 uBalTransfer,\\n        address to\\n    ) internal returns (uint256 collected) {\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n\\n        // If the adapter is disabled, its Yield Token can only collect\\n        // if associated Series has been settled, which implies that an admin\\n        // has backfilled it\\n        if (!adapterMeta[adapter].enabled && !_settled(adapter, maturity)) revert Errors.InvalidAdapter();\\n\\n        Series memory _series = series[adapter][maturity];\\n\\n        // Get the scale value from the last time this holder collected (default to maturity)\\n        uint256 lscale = lscales[adapter][maturity][usr];\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.collectDisabled()) {\\n            // If this Series has been settled, we ensure everyone's YT will\\n            // collect yield accrued since issuance\\n            if (_settled(adapter, maturity)) {\\n                lscale = series[adapter][maturity].iscale;\\n                // If the Series is not settled, we ensure no collections can happen\\n            } else {\\n                return 0;\\n            }\\n        }\\n\\n        // If the Series has been settled, this should be their last collect, so redeem the user's Yield Tokens for them\\n        if (_settled(adapter, maturity)) {\\n            _redeemYT(usr, adapter, maturity, uBal);\\n        } else {\\n            // If we're not settled and we're past maturity + the sponsor window,\\n            // anyone can settle this Series so revert until someone does\\n            if (block.timestamp > maturity + SPONSOR_WINDOW) {\\n                revert Errors.CollectNotSettled();\\n                // Otherwise, this is a valid pre-settlement collect and we need to determine the scale value\\n            } else {\\n                uint256 cscale = Adapter(adapter).scale();\\n                // If this is larger than the largest scale we've seen for this Series, use it\\n                if (cscale > _series.maxscale) {\\n                    _series.maxscale = cscale;\\n                    lscales[adapter][maturity][usr] = cscale;\\n                    // If not, use the previously noted max scale value\\n                } else {\\n                    lscales[adapter][maturity][usr] = _series.maxscale;\\n                }\\n            }\\n        }\\n\\n        // Determine how much underlying has accrued since the last time this user collected, in units of Target.\\n        // (Or take the last time as issuance if they haven't yet)\\n        //\\n        // Reminder: `Underlying / Scale = Target`\\n        // So the following equation is saying, for some amount of Underlying `u`:\\n        // \\\"Balance of Target that equaled `u` at the last collection _minus_ Target that equals `u` now\\\"\\n        //\\n        // Because maxscale must be increasing, the Target balance needed to equal `u` decreases, and that \\\"excess\\\"\\n        // is what Yield holders are collecting\\n        uint256 tBalNow = uBal.fdivUp(_series.maxscale); // preventive round-up towards the protocol\\n        uint256 tBalPrev = uBal.fdiv(lscale);\\n        unchecked {\\n            collected = tBalPrev > tBalNow ? tBalPrev - tBalNow : 0;\\n        }\\n        ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, usr, collected);\\n        Adapter(adapter).notify(usr, collected, false); // Distribute reward tokens\\n\\n        // If this collect is a part of a token transfer to another address, set the receiver's\\n        // last collection to a synthetic scale weighted based on the scale on their last collect,\\n        // the time elapsed, and the current scale\\n        if (to != address(0)) {\\n            uint256 ytBal = YT(_series.yt).balanceOf(to);\\n            // If receiver holds yields, we set lscale to a computed \\\"synthetic\\\" lscales value that,\\n            // for the updated yield balance, still assigns the correct amount of yield.\\n            lscales[adapter][maturity][to] = ytBal > 0\\n                ? _reweightLScale(adapter, maturity, ytBal, uBalTransfer, to, _series.maxscale)\\n                : _series.maxscale;\\n            uint256 tBalTransfer = uBalTransfer.fdiv(_series.maxscale);\\n            Adapter(adapter).notify(usr, tBalTransfer, false);\\n            Adapter(adapter).notify(to, tBalTransfer, true);\\n        }\\n        series[adapter][maturity] = _series;\\n\\n        emit Collected(adapter, maturity, collected);\\n    }\\n\\n    /// @notice calculate the harmonic mean of the current scale and the last scale,\\n    /// weighted by amounts associated with each\\n    function _reweightLScale(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 ytBal,\\n        uint256 uBal,\\n        address receiver,\\n        uint256 scale\\n    ) internal view returns (uint256) {\\n        // Target Decimals * 18 Decimals [from fdiv] / (Target Decimals * 18 Decimals [from fdiv] / 18 Decimals)\\n        // = 18 Decimals, which is the standard for scale values\\n        return (ytBal + uBal).fdiv((ytBal.fdiv(lscales[adapter][maturity][receiver]) + uBal.fdiv(scale)));\\n    }\\n\\n    function _redeemYT(\\n        address usr,\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal\\n    ) internal {\\n        // Burn the users's YTs\\n        YT(series[adapter][maturity].yt).burn(usr, uBal);\\n\\n        // Default principal for a YT\\n        uint256 tBal = 0;\\n\\n        // Principal Token holder's share of the principal = (1 - part of the principal that belongs to Yield Tokens)\\n        uint256 zShare = FixedMath.WAD - series[adapter][maturity].tilt;\\n\\n        // If PTs are at a loss and YTs had their principal cut to help cover the shortfall,\\n        // calculate how much YTs have left\\n        if (series[adapter][maturity].mscale.fdiv(series[adapter][maturity].maxscale) >= zShare) {\\n            tBal = uBal.fdiv(series[adapter][maturity].maxscale) - (uBal * zShare) / series[adapter][maturity].mscale;\\n            ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, usr, tBal);\\n        }\\n\\n        // Always notify the Adapter of the full Target balance that will no longer\\n        // have its rewards distributed\\n        Adapter(adapter).notify(usr, uBal.fdivUp(series[adapter][maturity].maxscale), false);\\n\\n        emit YTRedeemed(adapter, maturity, tBal);\\n    }\\n\\n    /* ========== ADMIN ========== */\\n\\n    /// @notice Enable or disable a adapter\\n    /// @param adapter Adapter's address\\n    /// @param isOn Flag setting this adapter to enabled or disabled\\n    function setAdapter(address adapter, bool isOn) public requiresTrust {\\n        _setAdapter(adapter, isOn);\\n    }\\n\\n    /// @notice Set adapter's guard\\n    /// @param adapter Adapter address\\n    /// @param cap The max target that can be deposited on the Adapter\\n    function setGuard(address adapter, uint256 cap) external requiresTrust {\\n        adapterMeta[adapter].guard = cap;\\n        emit GuardChanged(adapter, cap);\\n    }\\n\\n    /// @notice Set guarded mode\\n    /// @param _guarded bool\\n    function setGuarded(bool _guarded) external requiresTrust {\\n        guarded = _guarded;\\n        emit GuardedChanged(_guarded);\\n    }\\n\\n    /// @notice Set periphery's contract\\n    /// @param _periphery Target address\\n    function setPeriphery(address _periphery) external requiresTrust {\\n        periphery = _periphery;\\n        emit PeripheryChanged(_periphery);\\n    }\\n\\n    /// @notice Set paused flag\\n    /// @param _paused boolean\\n    function setPaused(bool _paused) external requiresTrust {\\n        _paused ? _pause() : _unpause();\\n    }\\n\\n    /// @notice Set permissioless mode\\n    /// @param _permissionless bool\\n    function setPermissionless(bool _permissionless) external requiresTrust {\\n        permissionless = _permissionless;\\n        emit PermissionlessChanged(_permissionless);\\n    }\\n\\n    /// @notice Backfill a Series' Scale value at maturity if keepers failed to settle it\\n    /// @param adapter Adapter's address\\n    /// @param maturity Maturity date for the Series\\n    /// @param mscale Value to set as the Series' Scale value at maturity\\n    /// @param _usrs Values to set on lscales mapping\\n    /// @param _lscales Values to set on lscales mapping\\n    function backfillScale(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 mscale,\\n        address[] calldata _usrs,\\n        uint256[] calldata _lscales\\n    ) external requiresTrust {\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n\\n        uint256 cutoff = maturity + SPONSOR_WINDOW + SETTLEMENT_WINDOW;\\n        // Admin can never backfill before maturity\\n        if (block.timestamp <= cutoff) revert Errors.OutOfWindowBoundaries();\\n\\n        // Set user's last scale values the Series (needed for the `collect` method)\\n        for (uint256 i = 0; i < _usrs.length; i++) {\\n            lscales[adapter][maturity][_usrs[i]] = _lscales[i];\\n        }\\n\\n        if (mscale > 0) {\\n            Series memory _series = series[adapter][maturity];\\n            // Set the maturity scale for the Series (needed for `redeem` methods)\\n            series[adapter][maturity].mscale = mscale;\\n            if (mscale > _series.maxscale) {\\n                series[adapter][maturity].maxscale = mscale;\\n            }\\n\\n            (address target, address stake, uint256 stakeSize) = Adapter(adapter).getStakeAndTarget();\\n\\n            address stakeDst = adapterMeta[adapter].enabled ? cup : _series.sponsor;\\n            ERC20(target).safeTransferFrom(adapter, cup, _series.reward);\\n            series[adapter][maturity].reward = 0;\\n            ERC20(stake).safeTransferFrom(adapter, stakeDst, stakeSize);\\n        }\\n\\n        emit Backfilled(adapter, maturity, mscale, _usrs, _lscales);\\n    }\\n\\n    /* ========== INTERNAL VIEWS ========== */\\n\\n    function _exists(address adapter, uint256 maturity) internal view returns (bool) {\\n        return series[adapter][maturity].pt != address(0);\\n    }\\n\\n    function _settled(address adapter, uint256 maturity) internal view returns (bool) {\\n        return series[adapter][maturity].mscale > 0;\\n    }\\n\\n    function _canBeSettled(address adapter, uint256 maturity) internal view returns (bool) {\\n        uint256 cutoff = maturity + SPONSOR_WINDOW + SETTLEMENT_WINDOW;\\n        // If the sender is the sponsor for the Series\\n        if (msg.sender == series[adapter][maturity].sponsor) {\\n            return maturity - SPONSOR_WINDOW <= block.timestamp && cutoff >= block.timestamp;\\n        } else {\\n            return maturity + SPONSOR_WINDOW < block.timestamp && cutoff >= block.timestamp;\\n        }\\n    }\\n\\n    function _isValid(address adapter, uint256 maturity) internal view returns (bool) {\\n        (uint256 minm, uint256 maxm) = Adapter(adapter).getMaturityBounds();\\n        if (maturity < block.timestamp + minm || maturity > block.timestamp + maxm) return false;\\n        (, , uint256 day, uint256 hour, uint256 minute, uint256 second) = DateTime.timestampToDateTime(maturity);\\n\\n        if (hour != 0 || minute != 0 || second != 0) return false;\\n        uint256 mode = Adapter(adapter).mode();\\n        if (mode == 0) {\\n            return day == 1;\\n        }\\n        if (mode == 1) {\\n            return DateTime.getDayOfWeek(maturity) == 1;\\n        }\\n        return false;\\n    }\\n\\n    /* ========== INTERNAL UTILS ========== */\\n\\n    function _setAdapter(address adapter, bool isOn) internal {\\n        AdapterMeta memory am = adapterMeta[adapter];\\n        if (am.enabled == isOn) revert Errors.ExistingValue();\\n        am.enabled = isOn;\\n\\n        // If this adapter is being added for the first time\\n        if (isOn && am.id == 0) {\\n            am.id = ++adapterCounter;\\n            adapterAddresses[am.id] = adapter;\\n        }\\n\\n        // Set level and target (can only be done once);\\n        am.level = uint248(Adapter(adapter).level());\\n        adapterMeta[adapter] = am;\\n        emit AdapterChanged(adapter, am.id, isOn);\\n    }\\n\\n    /* ========== PUBLIC GETTERS ========== */\\n\\n    /// @notice Returns address of Principal Token\\n    function pt(address adapter, uint256 maturity) public view returns (address) {\\n        return series[adapter][maturity].pt;\\n    }\\n\\n    /// @notice Returns address of Yield Token\\n    function yt(address adapter, uint256 maturity) public view returns (address) {\\n        return series[adapter][maturity].yt;\\n    }\\n\\n    function mscale(address adapter, uint256 maturity) public view returns (uint256) {\\n        return series[adapter][maturity].mscale;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyYT(address adapter, uint256 maturity) {\\n        if (series[adapter][maturity].yt != msg.sender) revert Errors.OnlyYT();\\n        _;\\n    }\\n\\n    /* ========== LOGS ========== */\\n\\n    /// @notice Admin\\n    event Backfilled(\\n        address indexed adapter,\\n        uint256 indexed maturity,\\n        uint256 mscale,\\n        address[] _usrs,\\n        uint256[] _lscales\\n    );\\n    event GuardChanged(address indexed adapter, uint256 cap);\\n    event AdapterChanged(address indexed adapter, uint256 indexed id, bool indexed isOn);\\n    event PeripheryChanged(address indexed periphery);\\n\\n    /// @notice Series lifecycle\\n    /// *---- beginning\\n    event SeriesInitialized(\\n        address adapter,\\n        uint256 indexed maturity,\\n        address pt,\\n        address yt,\\n        address indexed sponsor,\\n        address indexed target\\n    );\\n    /// -***- middle\\n    event Issued(address indexed adapter, uint256 indexed maturity, uint256 balance, address indexed sender);\\n    event Combined(address indexed adapter, uint256 indexed maturity, uint256 balance, address indexed sender);\\n    event Collected(address indexed adapter, uint256 indexed maturity, uint256 collected);\\n    /// ----* end\\n    event SeriesSettled(address indexed adapter, uint256 indexed maturity, address indexed settler);\\n    event PTRedeemed(address indexed adapter, uint256 indexed maturity, uint256 redeemed);\\n    event YTRedeemed(address indexed adapter, uint256 indexed maturity, uint256 redeemed);\\n    /// *----* misc\\n    event GuardedChanged(bool indexed guarded);\\n    event PermissionlessChanged(bool indexed permissionless);\\n}\\n\\ncontract TokenHandler is Trust {\\n    /// @notice Program state\\n    address public divider;\\n\\n    constructor() Trust(msg.sender) {}\\n\\n    function init(address _divider) external requiresTrust {\\n        if (divider != address(0)) revert Errors.AlreadyInitialized();\\n        divider = _divider;\\n    }\\n\\n    function deploy(\\n        address adapter,\\n        uint248 id,\\n        uint256 maturity\\n    ) external returns (address pt, address yt) {\\n        if (msg.sender != divider) revert Errors.OnlyDivider();\\n\\n        ERC20 target = ERC20(Adapter(adapter).target());\\n        uint8 decimals = target.decimals();\\n        string memory symbol = target.symbol();\\n        (string memory d, string memory m, string memory y) = DateTime.toDateString(maturity);\\n        string memory date = DateTime.format(maturity);\\n        string memory datestring = string(abi.encodePacked(d, \\\"-\\\", m, \\\"-\\\", y));\\n        string memory adapterId = DateTime.uintToString(id);\\n        pt = address(\\n            new Token(\\n                string(abi.encodePacked(date, \\\" \\\", symbol, \\\" Sense Principal Token, A\\\", adapterId)),\\n                string(abi.encodePacked(\\\"sP-\\\", symbol, \\\":\\\", datestring, \\\":\\\", adapterId)),\\n                decimals,\\n                divider\\n            )\\n        );\\n\\n        yt = address(\\n            new YT(\\n                adapter,\\n                maturity,\\n                string(abi.encodePacked(date, \\\" \\\", symbol, \\\" Sense Yield Token, A\\\", adapterId)),\\n                string(abi.encodePacked(\\\"sY-\\\", symbol, \\\":\\\", datestring, \\\":\\\", adapterId)),\\n                decimals,\\n                divider\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x3c86e44a485d0e7504f3499fc07ad995b7b18f7ca5ca63e6bda5bee2dbbe31ea\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/BaseAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { IERC3156FlashLender } from \\\"../../external/flashloan/IERC3156FlashLender.sol\\\";\\nimport { IERC3156FlashBorrower } from \\\"../../external/flashloan/IERC3156FlashBorrower.sol\\\";\\n\\n// Internal references\\nimport { Divider } from \\\"../../Divider.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\n/// @title Assign value to Target tokens\\nabstract contract BaseAdapter is IERC3156FlashLender {\\n    using SafeTransferLib for ERC20;\\n\\n    /* ========== CONSTANTS ========== */\\n\\n    bytes32 public constant CALLBACK_SUCCESS = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    /* ========== PUBLIC IMMUTABLES ========== */\\n\\n    /// @notice Sense core Divider address\\n    address public immutable divider;\\n\\n    /// @notice Target token to divide\\n    address public immutable target;\\n\\n    /// @notice Underlying for the Target\\n    address public immutable underlying;\\n\\n    /// @notice Issuance fee\\n    uint128 public immutable ifee;\\n\\n    /// @notice adapter params\\n    AdapterParams public adapterParams;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct AdapterParams {\\n        /// @notice Oracle address\\n        address oracle;\\n        /// @notice Token to stake at issuance\\n        address stake;\\n        /// @notice Amount to stake at issuance\\n        uint256 stakeSize;\\n        /// @notice Min maturity (seconds after block.timstamp)\\n        uint256 minm;\\n        /// @notice Max maturity (seconds after block.timstamp)\\n        uint256 maxm;\\n        /// @notice WAD number representing the percentage of the total\\n        /// principal that's set aside for Yield Tokens (e.g. 0.1e18 means that 10% of the principal is reserved).\\n        /// @notice If `0`, it means no principal is set aside for Yield Tokens\\n        uint64 tilt;\\n        /// @notice The number this function returns will be used to determine its access by checking for binary\\n        /// digits using the following scheme:\\u00a0<onRedeem(y/n)><collect(y/n)><combine(y/n)><issue(y/n)>\\n        /// (e.g. 0101 enables `collect` and `issue`, but not `combine`)\\n        uint48 level;\\n        /// @notice 0 for monthly, 1 for weekly\\n        uint16 mode;\\n    }\\n\\n    /* ========== METADATA STORAGE ========== */\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    constructor(\\n        address _divider,\\n        address _target,\\n        address _underlying,\\n        uint128 _ifee,\\n        AdapterParams memory _adapterParams\\n    ) {\\n        divider = _divider;\\n        target = _target;\\n        underlying = _underlying;\\n        ifee = _ifee;\\n        adapterParams = _adapterParams;\\n\\n        name = string(abi.encodePacked(ERC20(_target).name(), \\\" Adapter\\\"));\\n        symbol = string(abi.encodePacked(ERC20(_target).symbol(), \\\"-adapter\\\"));\\n\\n        ERC20(_target).approve(divider, type(uint256).max);\\n        ERC20(_adapterParams.stake).approve(divider, type(uint256).max);\\n    }\\n\\n    /// @notice Loan `amount` target to `receiver`, and takes it back after the callback.\\n    /// @param receiver The contract receiving target, needs to implement the\\n    /// `onFlashLoan(address user, address adapter, uint256 maturity, uint256 amount)` interface.\\n    /// @param amount The amount of target lent.\\n    /// @param data (encoded adapter address, maturity and YT amount the use has sent in)\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address, /* fee */\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool) {\\n        if (Divider(divider).periphery() != msg.sender) revert Errors.OnlyPeriphery();\\n        ERC20(target).safeTransfer(address(receiver), amount);\\n        bytes32 keccak = IERC3156FlashBorrower(receiver).onFlashLoan(msg.sender, target, amount, 0, data);\\n        if (keccak != CALLBACK_SUCCESS) revert Errors.FlashCallbackFailed();\\n        ERC20(target).safeTransferFrom(address(receiver), address(this), amount);\\n        return true;\\n    }\\n\\n    /* ========== REQUIRED VALUE GETTERS ========== */\\n\\n    /// @notice Calculate and return this adapter's Scale value for the current timestamp. To be overriden by child contracts\\n    /// @dev For some Targets, such as cTokens, this is simply the exchange rate, or `supply cToken / supply underlying`\\n    /// @dev For other Targets, such as AMM LP shares, specialized logic will be required\\n    /// @dev This function _must_ return a WAD number representing the current exchange rate\\n    /// between the Target and the Underlying.\\n    /// @return value WAD Scale value\\n    function scale() external virtual returns (uint256);\\n\\n    /// @notice Cached scale value getter\\n    /// @dev For situations where you need scale from a view function\\n    function scaleStored() external view virtual returns (uint256);\\n\\n    /// @notice Returns the current price of the underlying in ETH terms\\n    function getUnderlyingPrice() external view virtual returns (uint256);\\n\\n    /* ========== REQUIRED UTILITIES ========== */\\n\\n    /// @notice Deposits underlying `amount`in return for target. Must be overriden by child contracts\\n    /// @param amount Underlying amount\\n    /// @return amount of target returned\\n    function wrapUnderlying(uint256 amount) external virtual returns (uint256);\\n\\n    /// @notice Deposits target `amount`in return for underlying. Must be overriden by child contracts\\n    /// @param amount Target amount\\n    /// @return amount of underlying returned\\n    function unwrapTarget(uint256 amount) external virtual returns (uint256);\\n\\n    function flashFee(address token, uint256) external view returns (uint256) {\\n        if (token != target) revert Errors.TokenNotSupported();\\n        return 0;\\n    }\\n\\n    function maxFlashLoan(address token) external view override returns (uint256) {\\n        return ERC20(token).balanceOf(address(this));\\n    }\\n\\n    /* ========== OPTIONAL HOOKS ========== */\\n\\n    /// @notice Notification whenever the Divider adds or removes Target\\n    function notify(\\n        address, /* usr */\\n        uint256, /* amt */\\n        bool /* join */\\n    ) public virtual {\\n        return;\\n    }\\n\\n    /// @notice Hook called whenever a user redeems PT\\n    function onRedeem(\\n        uint256, /* uBal */\\n        uint256, /* mscale */\\n        uint256, /* maxscale */\\n        uint256 /* tBal */\\n    ) public virtual {\\n        return;\\n    }\\n\\n    /* ========== PUBLIC STORAGE ACCESSORS ========== */\\n\\n    function getMaturityBounds() external view virtual returns (uint256, uint256) {\\n        return (adapterParams.minm, adapterParams.maxm);\\n    }\\n\\n    function getStakeAndTarget()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        return (target, adapterParams.stake, adapterParams.stakeSize);\\n    }\\n\\n    function mode() external view returns (uint256) {\\n        return adapterParams.mode;\\n    }\\n\\n    function tilt() external view returns (uint256) {\\n        return adapterParams.tilt;\\n    }\\n\\n    function level() external view returns (uint256) {\\n        return adapterParams.level;\\n    }\\n}\\n\",\"keccak256\":\"0xfa71637b4828b14a2b909a820e35e5e390651918f2ee7216830cfcad6115a388\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/IClaimer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface IClaimer {\\n    /// @dev Claims rewards on protocol.\\n    function claim() external;\\n}\\n\",\"keccak256\":\"0x255b884afba3d79e3bb23562f53d5d0bb2f00ea3e6feba02a0cc8836ab863834\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/extensions/Crop.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\n\\n// Internal references\\nimport { Divider } from \\\"../../../Divider.sol\\\";\\nimport { BaseAdapter } from \\\"../BaseAdapter.sol\\\";\\nimport { IClaimer } from \\\"../IClaimer.sol\\\";\\nimport { FixedMath } from \\\"../../../external/FixedMath.sol\\\";\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\nabstract contract Crop is Trust {\\n    using SafeTransferLib for ERC20;\\n    using FixedMath for uint256;\\n\\n    /// @notice Program state\\n    address public claimer; // claimer address\\n    address public reward;\\n    uint256 public share; // accumulated reward token per collected target\\n    uint256 public rewardBal; // last recorded balance of reward token\\n    uint256 public totalTarget; // total target accumulated by all users\\n    mapping(address => uint256) public tBalance; // target balance per user\\n    mapping(address => uint256) public rewarded; // reward token per user\\n    mapping(address => uint256) public reconciledAmt; // reconciled target amount per user\\n    mapping(address => mapping(uint256 => bool)) public reconciled; // whether a user has been reconciled for a given maturity\\n\\n    event Distributed(address indexed usr, address indexed token, uint256 amount);\\n\\n    constructor(address _divider, address _reward) Trust(_divider) {\\n        reward = _reward;\\n    }\\n\\n    /// @notice Distribute the rewards tokens to the user according to their share\\n    /// @dev The reconcile amount allows us to prevent diluting other users' rewards\\n    function notify(\\n        address _usr,\\n        uint256 amt,\\n        bool join\\n    ) public virtual requiresTrust {\\n        _distribute(_usr);\\n        if (amt > 0) {\\n            if (join) {\\n                totalTarget += amt;\\n                tBalance[_usr] += amt;\\n            } else {\\n                uint256 uReconciledAmt = reconciledAmt[_usr];\\n                if (uReconciledAmt > 0) {\\n                    if (amt < uReconciledAmt) {\\n                        unchecked {\\n                            uReconciledAmt -= amt;\\n                        }\\n                        amt = 0;\\n                    } else {\\n                        unchecked {\\n                            amt -= uReconciledAmt;\\n                        }\\n                        uReconciledAmt = 0;\\n                    }\\n                    reconciledAmt[_usr] = uReconciledAmt;\\n                }\\n                if (amt > 0) {\\n                    totalTarget -= amt;\\n                    tBalance[_usr] -= amt;\\n                }\\n            }\\n        }\\n        rewarded[_usr] = tBalance[_usr].fmulUp(share, FixedMath.RAY);\\n    }\\n\\n    /// @notice Reconciles users target balances to zero by distributing rewards on their holdings,\\n    /// to avoid dilution of next Series' YT holders.\\n    /// This function should be called right after a Series matures and will save the user's YT balance\\n    /// (in target terms) on reconciledAmt[usr]. When `notify()` is triggered, we take that amount and\\n    /// subtract it from the user's target balance (`tBalance`) which will fix (or reconcile)\\n    /// his position to prevent dilution.\\n    /// @param _usrs Users to reconcile\\n    /// @param _maturities Maturities of the series that we want to reconcile users on.\\n    function reconcile(address[] calldata _usrs, uint256[] calldata _maturities) public {\\n        Divider divider = Divider(BaseAdapter(address(this)).divider());\\n        for (uint256 j = 0; j < _maturities.length; j++) {\\n            for (uint256 i = 0; i < _usrs.length; i++) {\\n                address usr = _usrs[i];\\n                uint256 ytBal = ERC20(divider.yt(address(this), _maturities[j])).balanceOf(usr);\\n                // We don't want to reconcile users if maturity has not been reached or if they have already been reconciled\\n                if (_maturities[j] <= block.timestamp && ytBal > 0 && !reconciled[usr][_maturities[j]]) {\\n                    _distribute(usr);\\n                    uint256 tBal = ytBal.fdiv(divider.lscales(address(this), _maturities[j], usr));\\n                    totalTarget -= tBal;\\n                    tBalance[usr] -= tBal;\\n                    reconciledAmt[usr] += tBal; // We increase reconciledAmt with the user's YT balance in target terms\\n                    reconciled[usr][_maturities[j]] = true;\\n                    emit Reconciled(usr, tBal, _maturities[j]);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Distributes rewarded tokens to users proportionally based on their `tBalance`\\n    /// @param _usr User to distribute reward tokens to\\n    function _distribute(address _usr) internal {\\n        _claimReward();\\n\\n        uint256 crop = ERC20(reward).balanceOf(address(this)) - rewardBal;\\n        if (totalTarget > 0) share += (crop.fdiv(totalTarget, FixedMath.RAY));\\n\\n        uint256 last = rewarded[_usr];\\n        uint256 curr = tBalance[_usr].fmul(share, FixedMath.RAY);\\n        if (curr > last) {\\n            unchecked {\\n                ERC20(reward).safeTransfer(_usr, curr - last);\\n            }\\n        }\\n        rewardBal = ERC20(reward).balanceOf(address(this));\\n        emit Distributed(_usr, reward, curr > last ? curr - last : 0);\\n    }\\n\\n    /// @notice Some protocols don't airdrop reward tokens, instead users must claim them.\\n    /// This method may be overriden by child contracts to claim a protocol's rewards\\n    function _claimReward() internal virtual {\\n        if (claimer != address(0)) {\\n            ERC20 target = ERC20(BaseAdapter(address(this)).target());\\n            uint256 tBal = ERC20(target).balanceOf(address(this));\\n\\n            if (tBal > 0) {\\n                // We send all the target balance to the claimer contract to it can claim rewards\\n                ERC20(target).transfer(claimer, tBal);\\n\\n                // Make claimer to claim rewards\\n                IClaimer(claimer).claim();\\n\\n                // Get the target back\\n                if (ERC20(target).balanceOf(address(this)) < tBal) revert Errors.BadContractInteration();\\n            }\\n        }\\n    }\\n\\n    /// @notice Overrides the rewardToken address.\\n    /// @param _reward New reward token address\\n    function setRewardToken(address _reward) public requiresTrust {\\n        _claimReward();\\n        reward = _reward;\\n        emit RewardTokenChanged(reward);\\n    }\\n\\n    /// @notice Sets `claimer`.\\n    /// @param _claimer New claimer contract address\\n    function setClaimer(address _claimer) public requiresTrust {\\n        claimer = _claimer;\\n        emit ClaimerChanged(claimer);\\n    }\\n\\n    /* ========== LOGS ========== */\\n\\n    event Reconciled(address indexed usr, uint256 tBal, uint256 maturity);\\n    event RewardTokenChanged(address indexed reward);\\n    event ClaimerChanged(address indexed claimer);\\n}\\n\",\"keccak256\":\"0x675046868a006e442b629d9e3af99c67cd99c4ca8965608882bee54067f4bb46\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/factories/BaseFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// Internal references\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\nimport { BaseAdapter } from \\\"../BaseAdapter.sol\\\";\\nimport { Divider } from \\\"../../../Divider.sol\\\";\\nimport { FixedMath } from \\\"../../../external/FixedMath.sol\\\";\\n\\ninterface ERC20 {\\n    function decimals() external view returns (uint256 decimals);\\n}\\n\\ninterface ChainlinkOracleLike {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function decimals() external view returns (uint256 decimals);\\n}\\n\\nabstract contract BaseFactory {\\n    using FixedMath for uint256;\\n\\n    /* ========== CONSTANTS ========== */\\n\\n    address public constant ETH_USD_PRICEFEED = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419; // Chainlink ETH-USD price feed\\n\\n    /// @notice Sets level to `31` by default, which keeps all Divider lifecycle methods public\\n    /// (`issue`, `combine`, `collect`, etc), but not the `onRedeem` hook.\\n    uint48 public constant DEFAULT_LEVEL = 31;\\n\\n    /* ========== PUBLIC IMMUTABLES ========== */\\n\\n    /// @notice Sense core Divider address\\n    address public immutable divider;\\n\\n    /// @notice params for adapters deployed with this factory\\n    FactoryParams public factoryParams;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct FactoryParams {\\n        address oracle; // oracle address\\n        address stake; // token to stake at issuance\\n        uint256 stakeSize; // amount to stake at issuance\\n        uint256 minm; // min maturity (seconds after block.timstamp)\\n        uint256 maxm; // max maturity (seconds after block.timstamp)\\n        uint128 ifee; // issuance fee\\n        uint16 mode; // 0 for monthly, 1 for weekly\\n        uint64 tilt; // tilt\\n        uint256 guard; // adapter guard (in usd, 18 decimals)\\n    }\\n\\n    constructor(address _divider, FactoryParams memory _factoryParams) {\\n        divider = _divider;\\n        factoryParams = _factoryParams;\\n    }\\n\\n    /* ========== REQUIRED DEPLOY ========== */\\n\\n    /// @notice Deploys both an adapter and a target wrapper for the given _target\\n    /// @param _target Address of the Target token\\n    /// @param _data Additional data needed to deploy the adapter\\n    function deployAdapter(address _target, bytes memory _data) external virtual returns (address adapter) {}\\n\\n    /// Set adapter's guard to $100`000 in target\\n    /// @notice if Underlying-ETH price feed returns 0, we set the guard to 100000 target.\\n    function _setGuard(address _adapter) internal {\\n        // We only want to execute this if divider is guarded\\n        if (Divider(divider).guarded()) {\\n            BaseAdapter adapter = BaseAdapter(_adapter);\\n\\n            // Get Underlying-ETH price (18 decimals)\\n            try adapter.getUnderlyingPrice() returns (uint256 underlyingPriceInEth) {\\n                // Get ETH-USD price from Chainlink (8 decimals)\\n                (, int256 ethPrice, , uint256 ethUpdatedAt, ) = ChainlinkOracleLike(ETH_USD_PRICEFEED)\\n                    .latestRoundData();\\n\\n                if (block.timestamp - ethUpdatedAt > 2 hours) revert Errors.InvalidPrice();\\n\\n                // Calculate Underlying-USD price (normalised to 18 deicmals)\\n                uint256 price = underlyingPriceInEth.fmul(uint256(ethPrice), 1e8);\\n\\n                // Calculate Target-USD price (scale and price are in 18 decimals)\\n                price = adapter.scale().fmul(price);\\n\\n                // Calculate guard with factory guard (18 decimals) and target price (18 decimals)\\n                // normalised to target decimals and set it\\n                Divider(divider).setGuard(\\n                    _adapter,\\n                    factoryParams.guard.fdiv(price, 10**ERC20(adapter.target()).decimals())\\n                );\\n            } catch {}\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05d13378c586d828ae8fe8619df2712a8962b4f4b5ccfa284981413425075cd0\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/factories/CropFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// Internal references\\nimport { Crop } from \\\"../extensions/Crop.sol\\\";\\nimport { BaseFactory } from \\\"./BaseFactory.sol\\\";\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\n\\nabstract contract CropFactory is Trust, BaseFactory {\\n    address public reward;\\n\\n    constructor(\\n        address _divider,\\n        FactoryParams memory _factoryParams,\\n        address _reward\\n    ) Trust(msg.sender) BaseFactory(_divider, _factoryParams) {\\n        reward = _reward;\\n    }\\n\\n    /// @notice Update reward token for given adapter\\n    /// @param _adapter address of adapter to update the reward token on\\n    /// @param _rewardToken address of reward token\\n    function setRewardToken(address _adapter, address _rewardToken) public requiresTrust {\\n        Crop(_adapter).setRewardToken(_rewardToken);\\n    }\\n\\n    /// @notice Sets `claimer` for a given adapter\\n    /// @param _claimer New claimer contract address\\n    function setClaimer(address _adapter, address _claimer) public requiresTrust {\\n        Crop(_adapter).setClaimer(_claimer);\\n    }\\n}\\n\",\"keccak256\":\"0xcba58838e2c1355490e9d6eaef0d76365dc7b02b8d87c6c8717cb9c09a0ae2da\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/implementations/compound/CAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\n\\n// Internal references\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\nimport { BaseAdapter } from \\\"../../abstract/BaseAdapter.sol\\\";\\nimport { Crop } from \\\"../../abstract/extensions/Crop.sol\\\";\\n\\ninterface WETHLike {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\\ninterface CTokenLike {\\n    /// @notice cToken is convertible into an ever increasing quantity of the underlying asset, as interest accrues in\\n    /// the market. This function returns the exchange rate between a cToken and the underlying asset.\\n    /// @dev returns the current exchange rate as an uint, scaled by 1 * 10^(18 - 8 + Underlying Token Decimals).\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    /// @notice Calculates the exchange rate from the underlying to the CToken\\n    /// @dev This function does not accrue interest before calculating the exchange rate\\n    /// @return Calculated exchange rate scaled by 1e18\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function underlying() external view returns (address);\\n\\n    /// The mint function transfers an asset into the protocol, which begins accumulating interest based\\n    /// on the current Supply Rate for the asset. The user receives a quantity of cTokens equal to the\\n    /// underlying tokens supplied, divided by the current Exchange Rate.\\n    /// @param mintAmount The amount of the asset to be supplied, in units of the underlying asset.\\n    /// @return 0 on success, otherwise an Error code\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    /// The redeem function converts a specified quantity of cTokens into the underlying asset, and returns\\n    /// them to the user. The amount of underlying tokens received is equal to the quantity of cTokens redeemed,\\n    /// multiplied by the current Exchange Rate. The amount redeemed must be less than the user's Account Liquidity\\n    /// and the market's available liquidity.\\n    /// @param redeemTokens The number of cTokens to be redeemed.\\n    /// @return 0 on success, otherwise an Error code\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n}\\n\\ninterface CETHTokenLike {\\n    ///@notice Send Ether to CEther to mint\\n    function mint() external payable;\\n}\\n\\ninterface ComptrollerLike {\\n    /// @notice Claim all the comp accrued by holder in the specified markets\\n    /// @param holder The address to claim COMP for\\n    /// @param cTokens The list of markets to claim COMP in\\n    function claimComp(address holder, address[] memory cTokens) external;\\n\\n    function markets(address target)\\n        external\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isComped\\n        );\\n\\n    function oracle() external returns (address);\\n}\\n\\ninterface PriceOracleLike {\\n    /// @notice Get the price of an underlying asset.\\n    /// @param target The target asset to get the underlying price of.\\n    /// @return The underlying asset price in ETH as a mantissa (scaled by 1e18).\\n    /// Zero means the price is unavailable.\\n    function getUnderlyingPrice(address target) external view returns (uint256);\\n\\n    function price(address underlying) external view returns (uint256);\\n}\\n\\n/// @notice Adapter contract for cTokens\\ncontract CAdapter is BaseAdapter, Crop {\\n    using SafeTransferLib for ERC20;\\n\\n    address public constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address public constant CETH = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\\n\\n    bool public immutable isCETH;\\n    uint8 public immutable uDecimals;\\n\\n    uint256 internal lastRewardedBlock;\\n\\n    constructor(\\n        address _divider,\\n        address _target,\\n        address _underlying,\\n        uint128 _ifee,\\n        AdapterParams memory _adapterParams,\\n        address _reward\\n    ) Crop(_divider, _reward) BaseAdapter(_divider, _target, _underlying, _ifee, _adapterParams) {\\n        isCETH = _target == CETH;\\n        ERC20(_underlying).safeApprove(_target, type(uint256).max);\\n        uDecimals = CTokenLike(_underlying).decimals();\\n    }\\n\\n    function notify(\\n        address _usr,\\n        uint256 amt,\\n        bool join\\n    ) public override(BaseAdapter, Crop) {\\n        super.notify(_usr, amt, join);\\n    }\\n\\n    /// @return Exchange rate from Target to Underlying using Compound's `exchangeRateCurrent()`, normed to 18 decimals\\n    function scale() external override returns (uint256) {\\n        uint256 exRate = CTokenLike(target).exchangeRateCurrent();\\n        return _to18Decimals(exRate);\\n    }\\n\\n    function scaleStored() external view override returns (uint256) {\\n        uint256 exRate = CTokenLike(target).exchangeRateStored();\\n        return _to18Decimals(exRate);\\n    }\\n\\n    function _claimReward() internal virtual override {\\n        // Avoid calling _claimReward more than once per block\\n        if (lastRewardedBlock != block.number) {\\n            lastRewardedBlock = block.number;\\n            address[] memory cTokens = new address[](1);\\n            cTokens[0] = target;\\n            ComptrollerLike(COMPTROLLER).claimComp(address(this), cTokens);\\n        }\\n    }\\n\\n    function getUnderlyingPrice() external view override returns (uint256 price) {\\n        price = isCETH ? 1e18 : PriceOracleLike(adapterParams.oracle).price(underlying);\\n    }\\n\\n    function wrapUnderlying(uint256 uBal) external override returns (uint256 tBal) {\\n        ERC20 t = ERC20(target);\\n\\n        ERC20(underlying).safeTransferFrom(msg.sender, address(this), uBal); // pull underlying\\n        if (isCETH) WETHLike(WETH).withdraw(uBal); // unwrap WETH into ETH\\n\\n        // Mint target\\n        uint256 tBalBefore = t.balanceOf(address(this));\\n        if (isCETH) {\\n            CETHTokenLike(target).mint{ value: uBal }();\\n        } else {\\n            if (CTokenLike(target).mint(uBal) != 0) revert Errors.MintFailed();\\n        }\\n        uint256 tBalAfter = t.balanceOf(address(this));\\n\\n        // Transfer target to sender\\n        t.safeTransfer(msg.sender, tBal = tBalAfter - tBalBefore);\\n    }\\n\\n    function unwrapTarget(uint256 tBal) external override returns (uint256 uBal) {\\n        ERC20 u = ERC20(underlying);\\n        ERC20(target).safeTransferFrom(msg.sender, address(this), tBal); // pull target\\n\\n        // Redeem target for underlying\\n        uint256 uBalBefore = isCETH ? address(this).balance : u.balanceOf(address(this));\\n        if (CTokenLike(target).redeem(tBal) != 0) revert Errors.RedeemFailed();\\n        uint256 uBalAfter = isCETH ? address(this).balance : u.balanceOf(address(this));\\n        unchecked {\\n            uBal = uBalAfter - uBalBefore;\\n        }\\n\\n        if (isCETH) {\\n            // Deposit ETH into WETH contract\\n            (bool success, ) = WETH.call{ value: uBal }(\\\"\\\");\\n            if (!success) revert Errors.TransferFailed();\\n        }\\n\\n        // Transfer underlying to sender\\n        ERC20(underlying).safeTransfer(msg.sender, uBal);\\n    }\\n\\n    function _to18Decimals(uint256 exRate) internal view returns (uint256) {\\n        // From the Compound docs:\\n        // \\\"exchangeRateCurrent() returns the exchange rate, scaled by 1 * 10^(18 - 8 + Underlying Token Decimals)\\\"\\n        //\\n        // The equation to norm an asset to 18 decimals is:\\n        // `num * 10**(18 - decimals)`\\n        //\\n        // So, when we try to norm exRate to 18 decimals, we get the following:\\n        // `exRate * 10**(18 - exRateDecimals)`\\n        // -> `exRate * 10**(18 - (18 - 8 + uDecimals))`\\n        // -> `exRate * 10**(8 - uDecimals)`\\n        // -> `exRate / 10**(uDecimals - 8)`\\n        return uDecimals >= 8 ? exRate / 10**(uDecimals - 8) : exRate * 10**(8 - uDecimals);\\n    }\\n\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x5ae27d4b5d21f3aa373f48ce842ac818c144609c8b2366474f16c814fec7a61d\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/implementations/compound/CFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// Internal references\\nimport { CropFactory } from \\\"../../abstract/factories/CropFactory.sol\\\";\\nimport { CAdapter, ComptrollerLike } from \\\"./CAdapter.sol\\\";\\nimport { BaseAdapter } from \\\"../../abstract/BaseAdapter.sol\\\";\\nimport { Divider } from \\\"../../../Divider.sol\\\";\\n\\n// External references\\nimport { Bytes32AddressLib } from \\\"@rari-capital/solmate/src/utils/Bytes32AddressLib.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\ninterface CTokenLike {\\n    function underlying() external view returns (address);\\n}\\n\\ncontract CFactory is CropFactory {\\n    using Bytes32AddressLib for address;\\n\\n    address public constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address public constant CETH = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\\n    address public constant COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\\n\\n    constructor(\\n        address _divider,\\n        FactoryParams memory _factoryParams,\\n        address _reward\\n    ) CropFactory(_divider, _factoryParams, _reward) {}\\n\\n    function deployAdapter(address _target, bytes memory) external override returns (address adapter) {\\n        // Sanity check\\n        if (Divider(divider).periphery() != msg.sender) revert Errors.OnlyPeriphery();\\n\\n        (bool isListed, , ) = ComptrollerLike(COMPTROLLER).markets(_target);\\n        if (!isListed) revert Errors.TargetNotSupported();\\n\\n        // Use the CREATE2 opcode to deploy a new Adapter contract.\\n        // This will revert if a CAdapter with the provided target has already\\n        // been deployed, as the salt would be the same and we can't deploy with it twice.\\n        BaseAdapter.AdapterParams memory adapterParams = BaseAdapter.AdapterParams({\\n            oracle: factoryParams.oracle,\\n            stake: factoryParams.stake,\\n            stakeSize: factoryParams.stakeSize,\\n            minm: factoryParams.minm,\\n            maxm: factoryParams.maxm,\\n            mode: factoryParams.mode,\\n            tilt: factoryParams.tilt,\\n            level: DEFAULT_LEVEL\\n        });\\n        adapter = address(\\n            new CAdapter{ salt: _target.fillLast12Bytes() }(\\n                divider,\\n                _target,\\n                _target == CETH ? WETH : CTokenLike(_target).underlying(),\\n                factoryParams.ifee,\\n                adapterParams,\\n                reward\\n            )\\n        );\\n\\n        _setGuard(adapter);\\n    }\\n}\\n\",\"keccak256\":\"0x3739845e4ec7dcd77d4f7474a5ab3df7a66f7f8dd726e50ce2d334452c2e2df5\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/external/DateTime.sol\":{\"content\":\"pragma solidity 0.8.11;\\n\\n/// @author Taken from: https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\nlibrary DateTime {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function toDateString(uint256 _timestamp)\\n        internal\\n        pure\\n        returns (\\n            string memory d,\\n            string memory m,\\n            string memory y\\n        )\\n    {\\n        (uint256 year, uint256 month, uint256 day) = timestampToDate(_timestamp);\\n        d = uintToString(day);\\n        m = uintToString(month);\\n        y = uintToString(year);\\n        // append a 0 to numbers < 10 so we should, e.g, 01 instead of just 1\\n        if (day < 10) d = string(abi.encodePacked(\\\"0\\\", d));\\n        if (month < 10) m = string(abi.encodePacked(\\\"0\\\", m));\\n    }\\n\\n    function format(uint256 _timestamp) internal pure returns (string memory datestring) {\\n        string[12] memory months = [\\n            \\\"Jan\\\",\\n            \\\"Feb\\\",\\n            \\\"Mar\\\",\\n            \\\"Apr\\\",\\n            \\\"May\\\",\\n            \\\"June\\\",\\n            \\\"July\\\",\\n            \\\"Aug\\\",\\n            \\\"Sept\\\",\\n            \\\"Oct\\\",\\n            \\\"Nov\\\",\\n            \\\"Dec\\\"\\n        ];\\n        (uint256 year, uint256 month, uint256 day) = timestampToDate(_timestamp);\\n        uint256 last = day % 10;\\n        string memory suffix = \\\"th\\\";\\n        if (day < 11 || day > 20) {\\n            if (last == 1) suffix = \\\"st\\\";\\n            if (last == 2) suffix = \\\"nd\\\";\\n            if (last == 3) suffix = \\\"rd\\\";\\n        }\\n        return string(abi.encodePacked(uintToString(day), suffix, \\\" \\\", months[month - 1], \\\" \\\", uintToString(year)));\\n    }\\n\\n    function getDayOfWeek(uint256 timestamp) internal pure returns (uint256 dayOfWeek) {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    /// Taken from https://stackoverflow.com/questions/47129173/how-to-convert-uint-to-string-in-solidity\\n    function uintToString(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) return \\\"0\\\";\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n}\\n\",\"keccak256\":\"0x143e0eccde997bb161f42af789c33f794f7ddf4574f7e3f0151a2c0f199ada0e\"},\"@sense-finance/v1-core/src/external/FixedMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n/// @title Fixed point arithmetic library\\n/// @author Taken from https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol\\nlibrary FixedMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant RAY = 1e27;\\n\\n    function fmul(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivDown(x, y, baseUnit); // Equivalent to (x * y) / baseUnit rounded down.\\n    }\\n\\n    function fmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function fmulUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivUp(x, y, baseUnit); // Equivalent to (x * y) / baseUnit rounded up.\\n    }\\n\\n    function fmulUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function fdiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivDown(x, baseUnit, y); // Equivalent to (x * baseUnit) / y rounded down.\\n    }\\n\\n    function fdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function fdivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivUp(x, baseUnit, y); // Equivalent to (x * baseUnit) / y rounded up.\\n    }\\n\\n    function fdivUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x96ef1181edb23765121db5f55554d3e44f3fa37352da83bad5ebf65140e80fe7\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/external/flashloan/IERC3156FlashBorrower.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IERC3156FlashBorrower {\\n    /// @dev Receive a flash loan.\\n    /// @param initiator The initiator of the loan.\\n    /// @param token The loan currency.\\n    /// @param amount The amount of tokens lent.\\n    /// @param fee The additional amount of tokens to repay.\\n    /// @param data Arbitrary data structure, intended to contain user-defined parameters.\\n    /// @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xa2007326dfc89668d1864d688373d7e1ee07fee48f605d4f6726224004bdc8e5\"},\"@sense-finance/v1-core/src/external/flashloan/IERC3156FlashLender.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n    /// @dev The amount of currency available to be lent.\\n    /// @param token The loan currency.\\n    /// @return The amount of `token` that can be borrowed.\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /// @dev The fee to be charged for a given loan.\\n    /// @param token The loan currency.\\n    /// @param amount The amount of tokens lent.\\n    /// @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /// @dev Initiate a flash loan.\\n    /// @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n    /// @param token The loan currency.\\n    /// @param amount The amount of tokens lent.\\n    /// @param data Arbitrary data structure, intended to contain user-defined parameters.\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc91333a7ff49db20853c817de2c277a0559a1ee75eb1deeb7d2096a5d1022d61\"},\"@sense-finance/v1-core/src/tokens/Token.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\n\\n// Internal references\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\n\\n/// @title Base Token\\ncontract Token is ERC20, Trust {\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        address _trusted\\n    ) ERC20(_name, _symbol, _decimals) Trust(_trusted) {}\\n\\n    /// @param usr The address to send the minted tokens\\n    /// @param amount The amount to be minted\\n    function mint(address usr, uint256 amount) public requiresTrust {\\n        _mint(usr, amount);\\n    }\\n\\n    /// @param usr The address from where to burn tokens from\\n    /// @param amount The amount to be burned\\n    function burn(address usr, uint256 amount) public requiresTrust {\\n        _burn(usr, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcb8e50d0f9ded712e0db2aa3c5dd889c64b525a0b44b4b2fc6fddcebf092ff10\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/tokens/YT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// Internal references\\nimport { Divider } from \\\"../Divider.sol\\\";\\nimport { Token } from \\\"./Token.sol\\\";\\n\\n/// @title Yield Token\\n/// @notice Strips off excess before every transfer\\ncontract YT is Token {\\n    address public immutable adapter;\\n    address public immutable divider;\\n    uint256 public immutable maturity;\\n\\n    constructor(\\n        address _adapter,\\n        uint256 _maturity,\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        address _divider\\n    ) Token(_name, _symbol, _decimals, _divider) {\\n        adapter = _adapter;\\n        maturity = _maturity;\\n        divider = _divider;\\n    }\\n\\n    function collect() external returns (uint256 _collected) {\\n        return Divider(divider).collect(msg.sender, adapter, maturity, 0, address(0));\\n    }\\n\\n    function transfer(address to, uint256 value) public override returns (bool) {\\n        Divider(divider).collect(msg.sender, adapter, maturity, value, to);\\n        return super.transfer(to, value);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public override returns (bool) {\\n        if (value > 0) Divider(divider).collect(from, adapter, maturity, value, to);\\n        return super.transferFrom(from, to, value);\\n    }\\n}\\n\",\"keccak256\":\"0x3685a54f6852f9c31e893b96277fbdac81f7dece5bb4b98d69c7ca2cd2fd3a0d\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-utils/src/Trust.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.0;\\n\\n/// @notice Ultra minimal authorization logic for smart contracts.\\n/// @author From https://github.com/Rari-Capital/solmate/blob/fab107565a51674f3a3b5bfdaacc67f6179b1a9b/src/auth/Trust.sol\\nabstract contract Trust {\\n    event UserTrustUpdated(address indexed user, bool trusted);\\n\\n    mapping(address => bool) public isTrusted;\\n\\n    constructor(address initialUser) {\\n        isTrusted[initialUser] = true;\\n\\n        emit UserTrustUpdated(initialUser, true);\\n    }\\n\\n    function setIsTrusted(address user, bool trusted) public virtual requiresTrust {\\n        isTrusted[user] = trusted;\\n\\n        emit UserTrustUpdated(user, trusted);\\n    }\\n\\n    modifier requiresTrust() {\\n        require(isTrusted[msg.sender], \\\"UNTRUSTED\\\");\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x2d3887076c81425d3954aea7735aebd9093e3df69c8132b1713fae4a34201d43\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-utils/src/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.4;\\n\\nlibrary Errors {\\n    // Auth\\n    error CombineRestricted();\\n    error IssuanceRestricted();\\n    error NotAuthorized();\\n    error OnlyYT();\\n    error OnlyDivider();\\n    error OnlyPeriphery();\\n    error OnlyPermissionless();\\n    error RedeemRestricted();\\n    error Untrusted();\\n\\n    // Adapters\\n    error TokenNotSupported();\\n    error FlashCallbackFailed();\\n    error SenderNotEligible();\\n    error TargetMismatch();\\n    error TargetNotSupported();\\n    error InvalidAdapterType();\\n    error PriceOracleNotFound();\\n\\n    // Divider\\n    error AlreadySettled();\\n    error CollectNotSettled();\\n    error GuardCapReached();\\n    error IssuanceFeeCapExceeded();\\n    error IssueOnSettle();\\n    error NotSettled();\\n\\n    // Input & validations\\n    error AlreadyInitialized();\\n    error DuplicateSeries();\\n    error ExistingValue();\\n    error InvalidAdapter();\\n    error InvalidMaturity();\\n    error InvalidParam();\\n    error NotImplemented();\\n    error OutOfWindowBoundaries();\\n    error SeriesDoesNotExist();\\n    error SwapTooSmall();\\n    error TargetParamsNotSet();\\n    error PoolParamsNotSet();\\n    error PTParamsNotSet();\\n    error AttemptFailed();\\n    error InvalidPrice();\\n    error BadContractInteration();\\n\\n    // Periphery\\n    error FactoryNotSupported();\\n    error FlashBorrowFailed();\\n    error FlashUntrustedBorrower();\\n    error FlashUntrustedLoanInitiator();\\n    error UnexpectedSwapAmount();\\n    error TooMuchLeftoverTarget();\\n\\n    // Fuse\\n    error AdapterNotSet();\\n    error FailedBecomeAdmin();\\n    error FailedAddTargetMarket();\\n    error FailedToAddPTMarket();\\n    error FailedAddLpMarket();\\n    error OracleNotReady();\\n    error PoolAlreadyDeployed();\\n    error PoolNotDeployed();\\n    error PoolNotSet();\\n    error SeriesNotQueued();\\n    error TargetExists();\\n    error TargetNotInFuse();\\n\\n    // Tokens\\n    error MintFailed();\\n    error RedeemFailed();\\n    error TransferFailed();\\n}\\n\",\"keccak256\":\"0x5eece5ee6069054e8485c7c799ad1ea764446248088ee16bc0ae08c84f0c52b9\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-utils/src/libs/Levels.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.0;\\n\\nlibrary Levels {\\n    uint256 private constant _INIT_BIT = 0x1;\\n    uint256 private constant _ISSUE_BIT = 0x2;\\n    uint256 private constant _COMBINE_BIT = 0x4;\\n    uint256 private constant _COLLECT_BIT = 0x8;\\n    uint256 private constant _REDEEM_BIT = 0x10;\\n    uint256 private constant _REDEEM_HOOK_BIT = 0x20;\\n\\n    function initRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _INIT_BIT != _INIT_BIT;\\n    }\\n\\n    function issueRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _ISSUE_BIT != _ISSUE_BIT;\\n    }\\n\\n    function combineRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _COMBINE_BIT != _COMBINE_BIT;\\n    }\\n\\n    function collectDisabled(uint256 level) internal pure returns (bool) {\\n        return level & _COLLECT_BIT != _COLLECT_BIT;\\n    }\\n\\n    function redeemRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _REDEEM_BIT != _REDEEM_BIT;\\n    }\\n\\n    function redeemHookDisabled(uint256 level) internal pure returns (bool) {\\n        return level & _REDEEM_HOOK_BIT != _REDEEM_HOOK_BIT;\\n    }\\n}\\n\",\"keccak256\":\"0x6c71e17beb73fca7577fb8868086159303eaecb1b397a446e8891b42f73fd502\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200536238038062005362833981016040819052620000349162000204565b3360008181526020818152604091829020805460ff19166001908117909155915191825285928592859285928592909182917fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a2506001600160a01b0391821660809081528151600180549185166001600160a01b0319928316179055602083015160028054918616918316919091179055604083015160035560608301516004559082015160055560a08201516006805460c085015160e08601516001600160401b0316600160901b02600160901b600160d01b031961ffff909216600160801b026001600160901b03199093166001600160801b03909516949094179190911716919091179055610100909101516007556008805493909216921691909117905550620002e89350505050565b80516001600160a01b03811681146200018457600080fd5b919050565b60405161012081016001600160401b0381118282101715620001bb57634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160801b03811681146200018457600080fd5b805161ffff811681146200018457600080fd5b80516001600160401b03811681146200018457600080fd5b60008060008385036101608112156200021c57600080fd5b62000227856200016c565b935061012080601f19830112156200023e57600080fd5b6200024862000189565b915062000258602087016200016c565b825262000268604087016200016c565b6020830152606086015160408301526080860151606083015260a086015160808301526200029960c08701620001c1565b60a0830152620002ac60e08701620001d9565b60c0830152610100620002c1818801620001ec565b60e084015290860151908201529150620002df61014085016200016c565b90509250925092565b608051615042620003206000396000818161016c015281816104df0152818161076501528181610aa40152610d4401526150426000f3fe60806040523480156200001157600080fd5b5060043610620000fd5760003560e01c806393d4750c1162000097578063b71501bc116200006e578063b71501bc146200026d578063bbe451d51462000289578063e5c8c572146200038f578063f5cf673b14620003a657600080fd5b806393d4750c14620001f957806396d64879146200021a578063ad5c4648146200025157600080fd5b80633cad2dcd11620000d85780633cad2dcd146200018e57806340cc63e114620001a55780635f82c67e14620001c15780636109682014620001dd57600080fd5b80631393916a1462000102578063228cb733146200011b578063378efa371462000166575b600080fd5b620001196200011336600462000faf565b620003bd565b005b6008546200013c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6200013c7f000000000000000000000000000000000000000000000000000000000000000081565b6200013c6200019f3660046200101c565b620004c4565b6200013c735f4ec3df9cbd43714fe2740f5e3616155c5b841981565b6200013c733d9819210a31b4961b30ef54be2aed79b9c9cd3b81565b6200013c734ddc2d193948926d02f9b1fe9e1daa0718270ed581565b62000202601f81565b60405165ffffffffffff90911681526020016200015d565b620002406200022b3660046200110a565b60006020819052908152604090205460ff1681565b60405190151581526020016200015d565b6200013c73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b6200013c73c00e94cb662c3520282e6f5717214004a7f2688881565b600154600254600354600454600554600654600754620003129673ffffffffffffffffffffffffffffffffffffffff9081169616949392916fffffffffffffffffffffffffffffffff811691700100000000000000000000000000000000820461ffff16917201000000000000000000000000000000000000900467ffffffffffffffff169089565b6040805173ffffffffffffffffffffffffffffffffffffffff9a8b1681529990981660208a015296880195909552606087019390935260808601919091526fffffffffffffffffffffffffffffffff1660a085015261ffff1660c084015267ffffffffffffffff1660e0830152610100820152610120016200015d565b62000119620003a036600462001131565b620008cf565b62000119620003b736600462001131565b620009d2565b3360009081526020819052604090205460ff166200043c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e54525553544544000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000818152602081815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b60003373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166377aace1a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000549573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200056f919062001164565b73ffffffffffffffffffffffffffffffffffffffff1614620005bd576040517ffb02114900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f8e8f294b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152600090733d9819210a31b4961b30ef54be2aed79b9c9cd3b90638e8f294b906024016060604051808303816000875af115801562000641573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000667919062001184565b5050905080620006a3576040517fa2a94ace00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516101008101825260015473ffffffffffffffffffffffffffffffffffffffff90811682526002541660208201526003549181019190915260045460608083019190915260055460808301526006547201000000000000000000000000000000000000810467ffffffffffffffff1660a0840152601f60c0840152700100000000000000000000000000000000900461ffff1660e083015285901b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008673ffffffffffffffffffffffffffffffffffffffff8116734ddc2d193948926d02f9b1fe9e1daa0718270ed5146200082f578773ffffffffffffffffffffffffffffffffffffffff16636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000803573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000829919062001164565b62000845565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25b6006546008546040516fffffffffffffffffffffffffffffffff90921691879173ffffffffffffffffffffffffffffffffffffffff1690620008879062000f6f565b6200089896959493929190620011cc565b8190604051809103906000f5905080158015620008b9573d6000803e3d6000fd5b509250620008c78362000aa2565b505092915050565b3360009081526020819052604090205460ff166200094a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e545255535445440000000000000000000000000000000000000000000000604482015260640162000433565b6040517f8aee812700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152831690638aee8127906024015b600060405180830381600087803b158015620009b557600080fd5b505af1158015620009ca573d6000803e3d6000fd5b505050505050565b3360009081526020819052604090205460ff1662000a4d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e545255535445440000000000000000000000000000000000000000000000604482015260640162000433565b6040517fcdfb583200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015283169063cdfb5832906024016200099a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166372f7a0306040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b0e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b349190620012b6565b1562000f0b5760008190508073ffffffffffffffffffffffffffffffffffffffff1663468f02d26040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801562000bc7575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925262000bc491810190620012d6565b60015b62000bd25762000f09565b600080735f4ec3df9cbd43714fe2740f5e3616155c5b841973ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801562000c35573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c5b919062001310565b50935050925050611c20814262000c73919062001394565b111562000cab576040517ebfc92100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600062000cbe84846305f5e10062000f0e565b905062000d40818673ffffffffffffffffffffffffffffffffffffffff1663f51e181a6040518163ffffffff1660e01b81526004016020604051808303816000875af115801562000d13573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d399190620012d6565b9062000f25565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635fa0cc0a8762000e7f848973ffffffffffffffffffffffffffffffffffffffff1663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000dd0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000df6919062001164565b73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000e41573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e679190620012d6565b62000e7490600a620014e7565b600754919062000f45565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801562000eeb57600080fd5b505af115801562000f00573d6000803e3d6000fd5b50505050505050505b505b50565b600062000f1d84848462000f4f565b949350505050565b600062000f3c8383670de0b6b3a764000062000f4f565b90505b92915050565b600062000f1d8483855b82820281151584158583048514171662000f6857600080fd5b0492915050565b613b1780620014f683390190565b73ffffffffffffffffffffffffffffffffffffffff8116811462000f0b57600080fd5b801515811462000f0b57600080fd5b6000806040838503121562000fc357600080fd5b823562000fd08162000f7d565b9150602083013562000fe28162000fa0565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156200103057600080fd5b82356200103d8162000f7d565b9150602083013567ffffffffffffffff808211156200105b57600080fd5b818501915085601f8301126200107057600080fd5b81358181111562001085576200108562000fed565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715620010ce57620010ce62000fed565b81604052828152886020848701011115620010e857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156200111d57600080fd5b81356200112a8162000f7d565b9392505050565b600080604083850312156200114557600080fd5b8235620011528162000f7d565b9150602083013562000fe28162000f7d565b6000602082840312156200117757600080fd5b81516200112a8162000f7d565b6000806000606084860312156200119a57600080fd5b8351620011a78162000fa0565b602085015160408601519194509250620011c18162000fa0565b809150509250925092565b60006101a08201905073ffffffffffffffffffffffffffffffffffffffff8089168352808816602084015280871660408401526fffffffffffffffffffffffffffffffff861660608401528085511660808401528060208601511660a084015250604084015160c0830152606084015160e0830152608084015161010083015267ffffffffffffffff60a08501511661012083015260c08401516200127c61014084018265ffffffffffff169052565b5060e084015161ffff81166101608401525073ffffffffffffffffffffffffffffffffffffffff8316610180830152979650505050505050565b600060208284031215620012c957600080fd5b81516200112a8162000fa0565b600060208284031215620012e957600080fd5b5051919050565b805169ffffffffffffffffffff811681146200130b57600080fd5b919050565b600080600080600060a086880312156200132957600080fd5b6200133486620012f0565b94506020860151935060408601519250606086015191506200135960808701620012f0565b90509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015620013a957620013a962001365565b500390565b600181815b808511156200140d57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115620013f157620013f162001365565b80851615620013ff57918102915b93841c9390800290620013b3565b509250929050565b600082620014265750600162000f3f565b81620014355750600062000f3f565b81600181146200144e5760028114620014595762001479565b600191505062000f3f565b60ff8411156200146d576200146d62001365565b50506001821b62000f3f565b5060208310610133831016604e8410600b84101617156200149e575081810a62000f3f565b620014aa8383620013ae565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115620014df57620014df62001365565b029392505050565b600062000f3c83836200141556fe6101406040523480156200001257600080fd5b5060405162003b1738038062003b17833981016040819052620000359162000633565b6001600160a01b03808716608090815281871660a081815283881660c09081526001600160801b03881660e09081528751600080549188166001600160a01b031992831617815560208a0151600180549190991692169190911790965560408089015160025560608901516003559488015160049081559288015160058054938a0151928a015161ffff16600160701b0261ffff60701b1965ffffffffffff90941668010000000000000000026001600160701b03199095166001600160401b0390931692909217939093179190911617905582516306fdde0360e01b815292518a948694869485948d948d948d948d94936306fdde039382820193929091908290030181865afa1580156200014f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200017991908101906200078f565b6040516020016200018b919062000847565b60405160208183030381529060405260069080519060200190620001b192919062000504565b50836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620001f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200021b91908101906200078f565b6040516020016200022d919062000875565b604051602081830303815290604052600790805190602001906200025392919062000504565b5060805160405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529085169063095ea7b3906044016020604051808303816000875af1158015620002a9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002cf9190620008a3565b50602081015160805160405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af115801562000329573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200034f9190620008a3565b505050506001600160a01b038316600081815260086020908152604091829020805460ff1916600190811790915591519182529193507fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d98692500160405180910390a250600a80546001600160a01b0319166001600160a01b03928316179055734ddc2d193948926d02f9b1fe9e1daa0718270ed5878216146101005262000409915085168660001962000482602090811b6200208b17901c565b836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000448573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200046e9190620008ce565b60ff16610120525062000930945050505050565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080620004fe5760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b604482015260640160405180910390fd5b50505050565b8280546200051290620008f3565b90600052602060002090601f01602090048101928262000536576000855562000581565b82601f106200055157805160ff191683800117855562000581565b8280016001018555821562000581579182015b828111156200058157825182559160200191906001019062000564565b506200058f92915062000593565b5090565b5b808211156200058f576000815560010162000594565b80516001600160a01b0381168114620005c257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b0381118282101715620006035762000603620005c7565b60405290565b805165ffffffffffff81168114620005c257600080fd5b805161ffff81168114620005c257600080fd5b6000806000806000808688036101a08112156200064f57600080fd5b6200065a88620005aa565b96506200066a60208901620005aa565b95506200067a60408901620005aa565b60608901519095506001600160801b03811681146200069857600080fd5b9350610100607f198201811315620006af57600080fd5b620006b9620005dd565b9150620006c960808a01620005aa565b8252620006d960a08a01620005aa565b602083015260c0890151604083015260e0890151606083015288015160808201526101208801516001600160401b03811681146200071657600080fd5b60a08201526200072a610140890162000609565b60c08201526200073e610160890162000620565b60e08201529150620007546101808801620005aa565b90509295509295509295565b60005b838110156200077d57818101518382015260200162000763565b83811115620004fe5750506000910152565b600060208284031215620007a257600080fd5b81516001600160401b0380821115620007ba57600080fd5b818401915084601f830112620007cf57600080fd5b815181811115620007e457620007e4620005c7565b604051601f8201601f19908116603f011681019083821181831017156200080f576200080f620005c7565b816040528281528760208487010111156200082957600080fd5b6200083c83602083016020880162000760565b979650505050505050565b600082516200085b81846020870162000760565b671020b230b83a32b960c11b920191825250600801919050565b600082516200088981846020870162000760565b6716b0b230b83a32b960c11b920191825250600801919050565b600060208284031215620008b657600080fd5b81518015158114620008c757600080fd5b9392505050565b600060208284031215620008e157600080fd5b815160ff81168114620008c757600080fd5b600181811c908216806200090857607f821691505b602082108114156200092a57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516130da62000a3d600039600081816105e50152818161214a0152818161217701526121be01526000818161068001528181610c8e01528181610dde01528181610f16015281816111da015281816113810152611442015260006108e001526000818161078c01528181610cf101528181610db40152818161117501526115180152600081816104e4015281816109e401528181610bec01528181610d7b01528181610f3c01528181610fef015281816111ae015281816112c401528181611b6c01528181611be201528181611cca01528181611f8f01528181612020015261262b0152600081816105840152611a7801526130da6000f3fe6080604052600436106102a45760003560e01c8063613255ab11610161578063b484972a116100ca578063d01c6f2911610084578063d9d98ce411610061578063d9d98ce414610a06578063da4ca41314610a26578063f51e181a14610a3c57005b8063d01c6f2914610978578063d379be23146109a5578063d4b83992146109d257005b8063c39a3b29116100b2578063c39a3b2914610923578063c5c108c714610942578063cdfb58321461095857005b8063b484972a146108ae578063b8c15a9f146108ce57005b80638aee81271161011b57806396d648791161010357806396d6487914610840578063a8d5fd6514610870578063ad5c46481461088657005b80638aee81271461080b57806395d89b411461082b57005b80636f307dc3116101495780636f307dc31461077a5780636fd5ae15146107ae5780638237e538146107d757005b8063613255ab1461073257806364c56e3c1461075257005b8063378efa371161020e57806351c39ea1116101c85780635cffe9de116101a55780635cffe9de146106c25780635f82c67e146106e2578063610968201461070a57005b806351c39ea11461064e57806354cbe6401461066e578063572acb9f146106a257005b806345ed132f116101f657806345ed132f146105d3578063468f02d2146106195780634aae9fed1461062e57005b8063378efa3714610572578063379f53e3146105a657005b8063226778491161025f57806327b327d01161024757806327b327d0146104b6578063295a52121461051a57806329a436081461054557005b80632267784914610441578063228cb7331461046457005b80630e1224231161028d5780630e122423146103b55780631393916a1461040057806314282f581461042057005b806306fdde03146102a6578063083118d5146102d1575b005b3480156102b257600080fd5b506102bb610a51565b6040516102c89190612991565b60405180910390f35b3480156102dd57600080fd5b5060005460015460025460035460045460055461034c9573ffffffffffffffffffffffffffffffffffffffff90811695169392919067ffffffffffffffff81169068010000000000000000810465ffffffffffff16906e010000000000000000000000000000900461ffff1688565b6040805173ffffffffffffffffffffffffffffffffffffffff998a168152989097166020890152958701949094526060860192909252608085015267ffffffffffffffff1660a084015265ffffffffffff1660c083015261ffff1660e0820152610100016102c8565b3480156103c157600080fd5b506103f06103d0366004612a29565b601160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016102c8565b34801561040c57600080fd5b506102a461041b366004612a6a565b610adf565b34801561042c57600080fd5b506102a461043b366004612a9f565b50505050565b34801561044d57600080fd5b50610456610be7565b6040519081526020016102c8565b34801561047057600080fd5b50600a546104919073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102c8565b3480156104c257600080fd5b506001546002546040805173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116825290931660208401528201526060016102c8565b34801561052657600080fd5b506005546e010000000000000000000000000000900461ffff16610456565b34801561055157600080fd5b50610456610560366004612ad1565b600e6020526000908152604090205481565b34801561057e57600080fd5b506104917f000000000000000000000000000000000000000000000000000000000000000081565b3480156105b257600080fd5b506104566105c1366004612ad1565b600f6020526000908152604090205481565b3480156105df57600080fd5b506106077f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016102c8565b34801561062557600080fd5b50610456610c8a565b34801561063a57600080fd5b50610456610649366004612aee565b610d77565b34801561065a57600080fd5b50610456610669366004612aee565b611171565b34801561067a57600080fd5b506103f07f000000000000000000000000000000000000000000000000000000000000000081565b3480156106ae57600080fd5b506102a46106bd366004612b53565b61153f565b3480156106ce57600080fd5b506103f06106dd366004612bbf565b611a5d565b3480156106ee57600080fd5b50610491733d9819210a31b4961b30ef54be2aed79b9c9cd3b81565b34801561071657600080fd5b50610491734ddc2d193948926d02f9b1fe9e1daa0718270ed581565b34801561073e57600080fd5b5061045661074d366004612ad1565b611cff565b34801561075e57600080fd5b50600354600454604080519283526020830191909152016102c8565b34801561078657600080fd5b506104917f000000000000000000000000000000000000000000000000000000000000000081565b3480156107ba57600080fd5b5060055468010000000000000000900465ffffffffffff16610456565b3480156107e357600080fd5b506104567f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd981565b34801561081757600080fd5b506102a4610826366004612ad1565b611d96565b34801561083757600080fd5b506102bb611e86565b34801561084c57600080fd5b506103f061085b366004612ad1565b60086020526000908152604090205460ff1681565b34801561087c57600080fd5b50610456600b5481565b34801561089257600080fd5b5061049173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b3480156108ba57600080fd5b506102a46108c9366004612c5e565b611e93565b3480156108da57600080fd5b506109027f000000000000000000000000000000000000000000000000000000000000000081565b6040516fffffffffffffffffffffffffffffffff90911681526020016102c8565b34801561092f57600080fd5b5060055467ffffffffffffffff16610456565b34801561094e57600080fd5b50610456600c5481565b34801561096457600080fd5b506102a4610973366004612ad1565b611ea3565b34801561098457600080fd5b50610456610993366004612ad1565b60106020526000908152604090205481565b3480156109b157600080fd5b506009546104919073ffffffffffffffffffffffffffffffffffffffff1681565b3480156109de57600080fd5b506104917f000000000000000000000000000000000000000000000000000000000000000081565b348015610a1257600080fd5b50610456610a21366004612a29565b611f8b565b348015610a3257600080fd5b50610456600d5481565b348015610a4857600080fd5b5061045661201b565b60068054610a5e90612c9c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8a90612c9c565b8015610ad75780601f10610aac57610100808354040283529160200191610ad7565b820191906000526020600020905b815481529060010190602001808311610aba57829003601f168201915b505050505081565b3360009081526008602052604090205460ff16610b5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e54525553544544000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526008602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c799190612cf0565b9050610c8481612144565b91505090565b60007f0000000000000000000000000000000000000000000000000000000000000000610d6a576000546040517faea9107800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301529091169063aea9107890602401602060405180830381865afa158015610d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d659190612cf0565b905090565b50670de0b6b3a764000090565b60007f0000000000000000000000000000000000000000000000000000000000000000610ddc73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163330866121f7565b7f000000000000000000000000000000000000000000000000000000000000000015610e81576040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810184905273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290632e1a7d4d90602401600060405180830381600087803b158015610e6857600080fd5b505af1158015610e7c573d6000803e3d6000fd5b505050505b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610eee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f129190612cf0565b90507f000000000000000000000000000000000000000000000000000000000000000015610fc0577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631249c58b856040518263ffffffff1660e01b81526004016000604051808303818588803b158015610fa257600080fd5b505af1158015610fb6573d6000803e3d6000fd5b50505050506110a8565b6040517fa0712d68000000000000000000000000000000000000000000000000000000008152600481018590527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a0712d68906024016020604051808303816000875af115801561104d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110719190612cf0565b156110a8576040517f07637bd800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015611115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111399190612cf0565b9050611169336111498484612d38565b955073ffffffffffffffffffffffffffffffffffffffff851690866122bd565b505050919050565b60007f00000000000000000000000000000000000000000000000000000000000000006111d673ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163330866121f7565b60007f0000000000000000000000000000000000000000000000000000000000000000611290576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015611267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128b9190612cf0565b611292565b475b6040517fdb006a75000000000000000000000000000000000000000000000000000000008152600481018690529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063db006a75906024016020604051808303816000875af1158015611322573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113469190612cf0565b1561137d576040517fbb1205c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f0000000000000000000000000000000000000000000000000000000000000000611437576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa15801561140e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114329190612cf0565b611439565b475b905081810393507f0000000000000000000000000000000000000000000000000000000000000000156114fe5760405160009073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29086908381818185875af1925050503d80600081146114bc576040519150601f19603f3d011682016040523d82523d6000602084013e6114c1565b606091505b50509050806114fc576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b61116973ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633866122bd565b60003073ffffffffffffffffffffffffffffffffffffffff1663378efa376040518163ffffffff1660e01b8152600401602060405180830381865afa15801561158c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b09190612d4f565b905060005b82811015611a555760005b85811015611a425760008787838181106115dc576115dc612d6c565b90506020020160208101906115f19190612ad1565b905060008473ffffffffffffffffffffffffffffffffffffffff1663574e77953089898881811061162457611624612d6c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff90941660048501526020029190910135602483015250604401602060405180830381865afa15801561169b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bf9190612d4f565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015291909116906370a0823190602401602060405180830381865afa15801561172d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117519190612cf0565b90504287878681811061176657611766612d6c565b905060200201351115801561177b5750600081115b80156117d9575073ffffffffffffffffffffffffffffffffffffffff82166000908152601160205260408120908888878181106117ba576117ba612d6c565b602090810292909201358352508101919091526040016000205460ff16155b15611a2d576117e782612376565b60006118c78673ffffffffffffffffffffffffffffffffffffffff16632f9cd854308b8b8a81811061181b5761181b612d6c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff9485166004820152602090910292909201356024830152509087166044820152606401602060405180830381865afa15801561189c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c09190612cf0565b83906125de565b905080600d60008282546118db9190612d38565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600e602052604081208054839290611915908490612d38565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152601060205260408120805483929061194f908490612d9b565b909155505073ffffffffffffffffffffffffffffffffffffffff831660009081526011602052604081206001918a8a8981811061198e5761198e612d6c565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff167f5758e413a9bfd3ec45a67abaa9ee2396cab143a505332bf7ab48c0e624b65f11828a8a89818110611a0557611a05612d6c565b90506020020135604051611a23929190918252602082015260400190565b60405180910390a2505b50508080611a3a90612db3565b9150506115c0565b5080611a4d81612db3565b9150506115b5565b505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166377aace1a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ae1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b059190612d4f565b73ffffffffffffffffffffffffffffffffffffffff1614611b52576040517ffb02114900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611b9373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001687866122bd565b6040517f23e30c8b00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8816906323e30c8b90611c129033907f0000000000000000000000000000000000000000000000000000000000000000908a9087908b908b90600401612dec565b6020604051808303816000875af1158015611c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c559190612cf0565b90507f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd98114611cb0576040517f207df21c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611cf273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168830886121f7565b5060019695505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015611d6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d909190612cf0565b92915050565b3360009081526008602052604090205460ff16611e0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e5452555354454400000000000000000000000000000000000000000000006044820152606401610b54565b611e176125fa565b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fb74d956cf6ec7842d08ebf0ab19ec03a88c1efd4a50ea4349d30f9c4ce512e9890600090a250565b60078054610a5e90612c9c565b611e9e838383612704565b505050565b3360009081526008602052604090205460ff16611f1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e5452555354454400000000000000000000000000000000000000000000006044820152606401610b54565b600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f70e1f29a97aa858ce785e48a42e40cd51020a45c8a2e4520272a6303585916a990600090a250565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612012576040517f3dd1b30500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50600092915050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bd6d894d6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610c55573d6000803e3d6000fd5b60006040517f095ea7b3000000000000000000000000000000000000000000000000000000008152836004820152826024820152602060006044836000895af13d15601f3d116001600051141617169150508061043b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f415050524f56455f4641494c45440000000000000000000000000000000000006044820152606401610b54565b600060087f000000000000000000000000000000000000000000000000000000000000000060ff1610156121b75761219d7f00000000000000000000000000000000000000000000000000000000000000006008612e72565b6121a890600a612fb5565b6121b29083612fc4565b611d90565b6121e260087f0000000000000000000000000000000000000000000000000000000000000000612e72565b6121ed90600a612fb5565b611d909083613001565b60006040517f23b872dd0000000000000000000000000000000000000000000000000000000081528460048201528360248201528260448201526020600060648360008a5af13d15601f3d11600160005114161716915050806122b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152606401610b54565b5050505050565b60006040517fa9059cbb000000000000000000000000000000000000000000000000000000008152836004820152826024820152602060006044836000895af13d15601f3d116001600051141617169150508061043b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152606401610b54565b61237e6125fa565b600c54600a546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000929173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156123f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124159190612cf0565b61241f9190612d38565b600d549091501561245c57600d546124459082906b033b2e3c9fd0803ce800000061291e565b600b60008282546124569190612d9b565b90915550505b73ffffffffffffffffffffffffffffffffffffffff82166000908152600f6020908152604080832054600b54600e909352908320549092916124ab91906b033b2e3c9fd0803ce8000000612933565b9050818111156124db57600a546124db9073ffffffffffffffffffffffffffffffffffffffff16858484036122bd565b600a546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256d9190612cf0565b600c55600a5473ffffffffffffffffffffffffffffffffffffffff9081169085167fad4a9acf26d8bba7a8cf1a41160d59be042ee554578e256c98d2ab74cdd435428484116125bd5760006125c7565b6125c78585612d38565b60405190815260200160405180910390a350505050565b60006125f383670de0b6b3a76400008461293c565b9392505050565b43601254146127025743601255604080516001808252818301909252600091602080830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000008160008151811061265d5761265d612d6c565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526040517f1c3db2e0000000000000000000000000000000000000000000000000000000008152733d9819210a31b4961b30ef54be2aed79b9c9cd3b90631c3db2e0906126d4903090859060040161303c565b600060405180830381600087803b1580156126ee57600080fd5b505af11580156122b6573d6000803e3d6000fd5b565b3360009081526008602052604090205460ff1661277d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e5452555354454400000000000000000000000000000000000000000000006044820152606401610b54565b61278683612376565b81156128b15780156127e95781600d60008282546127a49190612d9b565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600e6020526040812080548492906127de908490612d9b565b909155506128b19050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152601060205260409020548015612857578083101561282757600092900361282e565b9091039060005b73ffffffffffffffffffffffffffffffffffffffff841660009081526010602052604090208190555b82156128af5782600d600082825461286f9190612d38565b909155505073ffffffffffffffffffffffffffffffffffffffff84166000908152600e6020526040812080548592906128a9908490612d38565b90915550505b505b600b5473ffffffffffffffffffffffffffffffffffffffff84166000908152600e60205260409020546128f0916b033b2e3c9fd0803ce800000061295b565b73ffffffffffffffffffffffffffffffffffffffff9093166000908152600f60205260409020929092555050565b600061292b84838561293c565b949350505050565b600061292b8484845b82820281151584158583048514171661295457600080fd5b0492915050565b600061292b84848482820281151584158583048514171661297b57600080fd5b6001826001830304018115150290509392505050565b600060208083528351808285015260005b818110156129be578581018301518582016040015282016129a2565b818111156129d0576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b73ffffffffffffffffffffffffffffffffffffffff81168114612a2657600080fd5b50565b60008060408385031215612a3c57600080fd5b8235612a4781612a04565b946020939093013593505050565b80358015158114612a6557600080fd5b919050565b60008060408385031215612a7d57600080fd5b8235612a8881612a04565b9150612a9660208401612a55565b90509250929050565b60008060008060808587031215612ab557600080fd5b5050823594602084013594506040840135936060013592509050565b600060208284031215612ae357600080fd5b81356125f381612a04565b600060208284031215612b0057600080fd5b5035919050565b60008083601f840112612b1957600080fd5b50813567ffffffffffffffff811115612b3157600080fd5b6020830191508360208260051b8501011115612b4c57600080fd5b9250929050565b60008060008060408587031215612b6957600080fd5b843567ffffffffffffffff80821115612b8157600080fd5b612b8d88838901612b07565b90965094506020870135915080821115612ba657600080fd5b50612bb387828801612b07565b95989497509550505050565b600080600080600060808688031215612bd757600080fd5b8535612be281612a04565b94506020860135612bf281612a04565b935060408601359250606086013567ffffffffffffffff80821115612c1657600080fd5b818801915088601f830112612c2a57600080fd5b813581811115612c3957600080fd5b896020828501011115612c4b57600080fd5b9699959850939650602001949392505050565b600080600060608486031215612c7357600080fd5b8335612c7e81612a04565b925060208401359150612c9360408501612a55565b90509250925092565b600181811c90821680612cb057607f821691505b60208210811415612cea577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060208284031215612d0257600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015612d4a57612d4a612d09565b500390565b600060208284031215612d6157600080fd5b81516125f381612a04565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008219821115612dae57612dae612d09565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612de557612de5612d09565b5060010190565b600073ffffffffffffffffffffffffffffffffffffffff808916835280881660208401525085604083015284606083015260a060808301528260a0830152828460c0840137600060c0848401015260c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501168301019050979650505050505050565b600060ff821660ff841680821015612e8c57612e8c612d09565b90039392505050565b600181815b80851115612eee57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115612ed457612ed4612d09565b80851615612ee157918102915b93841c9390800290612e9a565b509250929050565b600082612f0557506001611d90565b81612f1257506000611d90565b8160018114612f285760028114612f3257612f4e565b6001915050611d90565b60ff841115612f4357612f43612d09565b50506001821b611d90565b5060208310610133831016604e8410600b8410161715612f71575081810a611d90565b612f7b8383612e95565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115612fad57612fad612d09565b029392505050565b60006125f360ff841683612ef6565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612ffc57612ffc612d09565b500290565b600082613037577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006040820173ffffffffffffffffffffffffffffffffffffffff80861684526020604081860152828651808552606087019150828801945060005b81811015613096578551851683529483019491830191600101613078565b50909897505050505050505056fea26469706673582212205fa70fe379173b3f88fcc21f76e1e0ab09a92601f0f1dfa577c15833e607bb0c64736f6c634300080b0033a2646970667358221220a93dbb2bdf2af60acb7565e342029ef25ca621774043f268e7fabeed3fe36e5564736f6c634300080b0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000fd5760003560e01c806393d4750c1162000097578063b71501bc116200006e578063b71501bc146200026d578063bbe451d51462000289578063e5c8c572146200038f578063f5cf673b14620003a657600080fd5b806393d4750c14620001f957806396d64879146200021a578063ad5c4648146200025157600080fd5b80633cad2dcd11620000d85780633cad2dcd146200018e57806340cc63e114620001a55780635f82c67e14620001c15780636109682014620001dd57600080fd5b80631393916a1462000102578063228cb733146200011b578063378efa371462000166575b600080fd5b620001196200011336600462000faf565b620003bd565b005b6008546200013c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6200013c7f000000000000000000000000000000000000000000000000000000000000000081565b6200013c6200019f3660046200101c565b620004c4565b6200013c735f4ec3df9cbd43714fe2740f5e3616155c5b841981565b6200013c733d9819210a31b4961b30ef54be2aed79b9c9cd3b81565b6200013c734ddc2d193948926d02f9b1fe9e1daa0718270ed581565b62000202601f81565b60405165ffffffffffff90911681526020016200015d565b620002406200022b3660046200110a565b60006020819052908152604090205460ff1681565b60405190151581526020016200015d565b6200013c73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b6200013c73c00e94cb662c3520282e6f5717214004a7f2688881565b600154600254600354600454600554600654600754620003129673ffffffffffffffffffffffffffffffffffffffff9081169616949392916fffffffffffffffffffffffffffffffff811691700100000000000000000000000000000000820461ffff16917201000000000000000000000000000000000000900467ffffffffffffffff169089565b6040805173ffffffffffffffffffffffffffffffffffffffff9a8b1681529990981660208a015296880195909552606087019390935260808601919091526fffffffffffffffffffffffffffffffff1660a085015261ffff1660c084015267ffffffffffffffff1660e0830152610100820152610120016200015d565b62000119620003a036600462001131565b620008cf565b62000119620003b736600462001131565b620009d2565b3360009081526020819052604090205460ff166200043c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e54525553544544000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000818152602081815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b60003373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166377aace1a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000549573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200056f919062001164565b73ffffffffffffffffffffffffffffffffffffffff1614620005bd576040517ffb02114900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f8e8f294b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152600090733d9819210a31b4961b30ef54be2aed79b9c9cd3b90638e8f294b906024016060604051808303816000875af115801562000641573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000667919062001184565b5050905080620006a3576040517fa2a94ace00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516101008101825260015473ffffffffffffffffffffffffffffffffffffffff90811682526002541660208201526003549181019190915260045460608083019190915260055460808301526006547201000000000000000000000000000000000000810467ffffffffffffffff1660a0840152601f60c0840152700100000000000000000000000000000000900461ffff1660e083015285901b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008673ffffffffffffffffffffffffffffffffffffffff8116734ddc2d193948926d02f9b1fe9e1daa0718270ed5146200082f578773ffffffffffffffffffffffffffffffffffffffff16636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000803573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000829919062001164565b62000845565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25b6006546008546040516fffffffffffffffffffffffffffffffff90921691879173ffffffffffffffffffffffffffffffffffffffff1690620008879062000f6f565b6200089896959493929190620011cc565b8190604051809103906000f5905080158015620008b9573d6000803e3d6000fd5b509250620008c78362000aa2565b505092915050565b3360009081526020819052604090205460ff166200094a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e545255535445440000000000000000000000000000000000000000000000604482015260640162000433565b6040517f8aee812700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152831690638aee8127906024015b600060405180830381600087803b158015620009b557600080fd5b505af1158015620009ca573d6000803e3d6000fd5b505050505050565b3360009081526020819052604090205460ff1662000a4d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e545255535445440000000000000000000000000000000000000000000000604482015260640162000433565b6040517fcdfb583200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015283169063cdfb5832906024016200099a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166372f7a0306040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b0e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b349190620012b6565b1562000f0b5760008190508073ffffffffffffffffffffffffffffffffffffffff1663468f02d26040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801562000bc7575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925262000bc491810190620012d6565b60015b62000bd25762000f09565b600080735f4ec3df9cbd43714fe2740f5e3616155c5b841973ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801562000c35573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c5b919062001310565b50935050925050611c20814262000c73919062001394565b111562000cab576040517ebfc92100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600062000cbe84846305f5e10062000f0e565b905062000d40818673ffffffffffffffffffffffffffffffffffffffff1663f51e181a6040518163ffffffff1660e01b81526004016020604051808303816000875af115801562000d13573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d399190620012d6565b9062000f25565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635fa0cc0a8762000e7f848973ffffffffffffffffffffffffffffffffffffffff1663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000dd0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000df6919062001164565b73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000e41573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e679190620012d6565b62000e7490600a620014e7565b600754919062000f45565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801562000eeb57600080fd5b505af115801562000f00573d6000803e3d6000fd5b50505050505050505b505b50565b600062000f1d84848462000f4f565b949350505050565b600062000f3c8383670de0b6b3a764000062000f4f565b90505b92915050565b600062000f1d8483855b82820281151584158583048514171662000f6857600080fd5b0492915050565b613b1780620014f683390190565b73ffffffffffffffffffffffffffffffffffffffff8116811462000f0b57600080fd5b801515811462000f0b57600080fd5b6000806040838503121562000fc357600080fd5b823562000fd08162000f7d565b9150602083013562000fe28162000fa0565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156200103057600080fd5b82356200103d8162000f7d565b9150602083013567ffffffffffffffff808211156200105b57600080fd5b818501915085601f8301126200107057600080fd5b81358181111562001085576200108562000fed565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715620010ce57620010ce62000fed565b81604052828152886020848701011115620010e857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156200111d57600080fd5b81356200112a8162000f7d565b9392505050565b600080604083850312156200114557600080fd5b8235620011528162000f7d565b9150602083013562000fe28162000f7d565b6000602082840312156200117757600080fd5b81516200112a8162000f7d565b6000806000606084860312156200119a57600080fd5b8351620011a78162000fa0565b602085015160408601519194509250620011c18162000fa0565b809150509250925092565b60006101a08201905073ffffffffffffffffffffffffffffffffffffffff8089168352808816602084015280871660408401526fffffffffffffffffffffffffffffffff861660608401528085511660808401528060208601511660a084015250604084015160c0830152606084015160e0830152608084015161010083015267ffffffffffffffff60a08501511661012083015260c08401516200127c61014084018265ffffffffffff169052565b5060e084015161ffff81166101608401525073ffffffffffffffffffffffffffffffffffffffff8316610180830152979650505050505050565b600060208284031215620012c957600080fd5b81516200112a8162000fa0565b600060208284031215620012e957600080fd5b5051919050565b805169ffffffffffffffffffff811681146200130b57600080fd5b919050565b600080600080600060a086880312156200132957600080fd5b6200133486620012f0565b94506020860151935060408601519250606086015191506200135960808701620012f0565b90509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015620013a957620013a962001365565b500390565b600181815b808511156200140d57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115620013f157620013f162001365565b80851615620013ff57918102915b93841c9390800290620013b3565b509250929050565b600082620014265750600162000f3f565b81620014355750600062000f3f565b81600181146200144e5760028114620014595762001479565b600191505062000f3f565b60ff8411156200146d576200146d62001365565b50506001821b62000f3f565b5060208310610133831016604e8410600b84101617156200149e575081810a62000f3f565b620014aa8383620013ae565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115620014df57620014df62001365565b029392505050565b600062000f3c83836200141556fe6101406040523480156200001257600080fd5b5060405162003b1738038062003b17833981016040819052620000359162000633565b6001600160a01b03808716608090815281871660a081815283881660c09081526001600160801b03881660e09081528751600080549188166001600160a01b031992831617815560208a0151600180549190991692169190911790965560408089015160025560608901516003559488015160049081559288015160058054938a0151928a015161ffff16600160701b0261ffff60701b1965ffffffffffff90941668010000000000000000026001600160701b03199095166001600160401b0390931692909217939093179190911617905582516306fdde0360e01b815292518a948694869485948d948d948d948d94936306fdde039382820193929091908290030181865afa1580156200014f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200017991908101906200078f565b6040516020016200018b919062000847565b60405160208183030381529060405260069080519060200190620001b192919062000504565b50836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620001f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200021b91908101906200078f565b6040516020016200022d919062000875565b604051602081830303815290604052600790805190602001906200025392919062000504565b5060805160405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529085169063095ea7b3906044016020604051808303816000875af1158015620002a9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002cf9190620008a3565b50602081015160805160405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af115801562000329573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200034f9190620008a3565b505050506001600160a01b038316600081815260086020908152604091829020805460ff1916600190811790915591519182529193507fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d98692500160405180910390a250600a80546001600160a01b0319166001600160a01b03928316179055734ddc2d193948926d02f9b1fe9e1daa0718270ed5878216146101005262000409915085168660001962000482602090811b6200208b17901c565b836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000448573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200046e9190620008ce565b60ff16610120525062000930945050505050565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080620004fe5760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b604482015260640160405180910390fd5b50505050565b8280546200051290620008f3565b90600052602060002090601f01602090048101928262000536576000855562000581565b82601f106200055157805160ff191683800117855562000581565b8280016001018555821562000581579182015b828111156200058157825182559160200191906001019062000564565b506200058f92915062000593565b5090565b5b808211156200058f576000815560010162000594565b80516001600160a01b0381168114620005c257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b0381118282101715620006035762000603620005c7565b60405290565b805165ffffffffffff81168114620005c257600080fd5b805161ffff81168114620005c257600080fd5b6000806000806000808688036101a08112156200064f57600080fd5b6200065a88620005aa565b96506200066a60208901620005aa565b95506200067a60408901620005aa565b60608901519095506001600160801b03811681146200069857600080fd5b9350610100607f198201811315620006af57600080fd5b620006b9620005dd565b9150620006c960808a01620005aa565b8252620006d960a08a01620005aa565b602083015260c0890151604083015260e0890151606083015288015160808201526101208801516001600160401b03811681146200071657600080fd5b60a08201526200072a610140890162000609565b60c08201526200073e610160890162000620565b60e08201529150620007546101808801620005aa565b90509295509295509295565b60005b838110156200077d57818101518382015260200162000763565b83811115620004fe5750506000910152565b600060208284031215620007a257600080fd5b81516001600160401b0380821115620007ba57600080fd5b818401915084601f830112620007cf57600080fd5b815181811115620007e457620007e4620005c7565b604051601f8201601f19908116603f011681019083821181831017156200080f576200080f620005c7565b816040528281528760208487010111156200082957600080fd5b6200083c83602083016020880162000760565b979650505050505050565b600082516200085b81846020870162000760565b671020b230b83a32b960c11b920191825250600801919050565b600082516200088981846020870162000760565b6716b0b230b83a32b960c11b920191825250600801919050565b600060208284031215620008b657600080fd5b81518015158114620008c757600080fd5b9392505050565b600060208284031215620008e157600080fd5b815160ff81168114620008c757600080fd5b600181811c908216806200090857607f821691505b602082108114156200092a57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516130da62000a3d600039600081816105e50152818161214a0152818161217701526121be01526000818161068001528181610c8e01528181610dde01528181610f16015281816111da015281816113810152611442015260006108e001526000818161078c01528181610cf101528181610db40152818161117501526115180152600081816104e4015281816109e401528181610bec01528181610d7b01528181610f3c01528181610fef015281816111ae015281816112c401528181611b6c01528181611be201528181611cca01528181611f8f01528181612020015261262b0152600081816105840152611a7801526130da6000f3fe6080604052600436106102a45760003560e01c8063613255ab11610161578063b484972a116100ca578063d01c6f2911610084578063d9d98ce411610061578063d9d98ce414610a06578063da4ca41314610a26578063f51e181a14610a3c57005b8063d01c6f2914610978578063d379be23146109a5578063d4b83992146109d257005b8063c39a3b29116100b2578063c39a3b2914610923578063c5c108c714610942578063cdfb58321461095857005b8063b484972a146108ae578063b8c15a9f146108ce57005b80638aee81271161011b57806396d648791161010357806396d6487914610840578063a8d5fd6514610870578063ad5c46481461088657005b80638aee81271461080b57806395d89b411461082b57005b80636f307dc3116101495780636f307dc31461077a5780636fd5ae15146107ae5780638237e538146107d757005b8063613255ab1461073257806364c56e3c1461075257005b8063378efa371161020e57806351c39ea1116101c85780635cffe9de116101a55780635cffe9de146106c25780635f82c67e146106e2578063610968201461070a57005b806351c39ea11461064e57806354cbe6401461066e578063572acb9f146106a257005b806345ed132f116101f657806345ed132f146105d3578063468f02d2146106195780634aae9fed1461062e57005b8063378efa3714610572578063379f53e3146105a657005b8063226778491161025f57806327b327d01161024757806327b327d0146104b6578063295a52121461051a57806329a436081461054557005b80632267784914610441578063228cb7331461046457005b80630e1224231161028d5780630e122423146103b55780631393916a1461040057806314282f581461042057005b806306fdde03146102a6578063083118d5146102d1575b005b3480156102b257600080fd5b506102bb610a51565b6040516102c89190612991565b60405180910390f35b3480156102dd57600080fd5b5060005460015460025460035460045460055461034c9573ffffffffffffffffffffffffffffffffffffffff90811695169392919067ffffffffffffffff81169068010000000000000000810465ffffffffffff16906e010000000000000000000000000000900461ffff1688565b6040805173ffffffffffffffffffffffffffffffffffffffff998a168152989097166020890152958701949094526060860192909252608085015267ffffffffffffffff1660a084015265ffffffffffff1660c083015261ffff1660e0820152610100016102c8565b3480156103c157600080fd5b506103f06103d0366004612a29565b601160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016102c8565b34801561040c57600080fd5b506102a461041b366004612a6a565b610adf565b34801561042c57600080fd5b506102a461043b366004612a9f565b50505050565b34801561044d57600080fd5b50610456610be7565b6040519081526020016102c8565b34801561047057600080fd5b50600a546104919073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102c8565b3480156104c257600080fd5b506001546002546040805173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116825290931660208401528201526060016102c8565b34801561052657600080fd5b506005546e010000000000000000000000000000900461ffff16610456565b34801561055157600080fd5b50610456610560366004612ad1565b600e6020526000908152604090205481565b34801561057e57600080fd5b506104917f000000000000000000000000000000000000000000000000000000000000000081565b3480156105b257600080fd5b506104566105c1366004612ad1565b600f6020526000908152604090205481565b3480156105df57600080fd5b506106077f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016102c8565b34801561062557600080fd5b50610456610c8a565b34801561063a57600080fd5b50610456610649366004612aee565b610d77565b34801561065a57600080fd5b50610456610669366004612aee565b611171565b34801561067a57600080fd5b506103f07f000000000000000000000000000000000000000000000000000000000000000081565b3480156106ae57600080fd5b506102a46106bd366004612b53565b61153f565b3480156106ce57600080fd5b506103f06106dd366004612bbf565b611a5d565b3480156106ee57600080fd5b50610491733d9819210a31b4961b30ef54be2aed79b9c9cd3b81565b34801561071657600080fd5b50610491734ddc2d193948926d02f9b1fe9e1daa0718270ed581565b34801561073e57600080fd5b5061045661074d366004612ad1565b611cff565b34801561075e57600080fd5b50600354600454604080519283526020830191909152016102c8565b34801561078657600080fd5b506104917f000000000000000000000000000000000000000000000000000000000000000081565b3480156107ba57600080fd5b5060055468010000000000000000900465ffffffffffff16610456565b3480156107e357600080fd5b506104567f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd981565b34801561081757600080fd5b506102a4610826366004612ad1565b611d96565b34801561083757600080fd5b506102bb611e86565b34801561084c57600080fd5b506103f061085b366004612ad1565b60086020526000908152604090205460ff1681565b34801561087c57600080fd5b50610456600b5481565b34801561089257600080fd5b5061049173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b3480156108ba57600080fd5b506102a46108c9366004612c5e565b611e93565b3480156108da57600080fd5b506109027f000000000000000000000000000000000000000000000000000000000000000081565b6040516fffffffffffffffffffffffffffffffff90911681526020016102c8565b34801561092f57600080fd5b5060055467ffffffffffffffff16610456565b34801561094e57600080fd5b50610456600c5481565b34801561096457600080fd5b506102a4610973366004612ad1565b611ea3565b34801561098457600080fd5b50610456610993366004612ad1565b60106020526000908152604090205481565b3480156109b157600080fd5b506009546104919073ffffffffffffffffffffffffffffffffffffffff1681565b3480156109de57600080fd5b506104917f000000000000000000000000000000000000000000000000000000000000000081565b348015610a1257600080fd5b50610456610a21366004612a29565b611f8b565b348015610a3257600080fd5b50610456600d5481565b348015610a4857600080fd5b5061045661201b565b60068054610a5e90612c9c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8a90612c9c565b8015610ad75780601f10610aac57610100808354040283529160200191610ad7565b820191906000526020600020905b815481529060010190602001808311610aba57829003601f168201915b505050505081565b3360009081526008602052604090205460ff16610b5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e54525553544544000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526008602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c799190612cf0565b9050610c8481612144565b91505090565b60007f0000000000000000000000000000000000000000000000000000000000000000610d6a576000546040517faea9107800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301529091169063aea9107890602401602060405180830381865afa158015610d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d659190612cf0565b905090565b50670de0b6b3a764000090565b60007f0000000000000000000000000000000000000000000000000000000000000000610ddc73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163330866121f7565b7f000000000000000000000000000000000000000000000000000000000000000015610e81576040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810184905273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290632e1a7d4d90602401600060405180830381600087803b158015610e6857600080fd5b505af1158015610e7c573d6000803e3d6000fd5b505050505b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610eee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f129190612cf0565b90507f000000000000000000000000000000000000000000000000000000000000000015610fc0577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631249c58b856040518263ffffffff1660e01b81526004016000604051808303818588803b158015610fa257600080fd5b505af1158015610fb6573d6000803e3d6000fd5b50505050506110a8565b6040517fa0712d68000000000000000000000000000000000000000000000000000000008152600481018590527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a0712d68906024016020604051808303816000875af115801561104d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110719190612cf0565b156110a8576040517f07637bd800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015611115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111399190612cf0565b9050611169336111498484612d38565b955073ffffffffffffffffffffffffffffffffffffffff851690866122bd565b505050919050565b60007f00000000000000000000000000000000000000000000000000000000000000006111d673ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163330866121f7565b60007f0000000000000000000000000000000000000000000000000000000000000000611290576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015611267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128b9190612cf0565b611292565b475b6040517fdb006a75000000000000000000000000000000000000000000000000000000008152600481018690529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063db006a75906024016020604051808303816000875af1158015611322573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113469190612cf0565b1561137d576040517fbb1205c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f0000000000000000000000000000000000000000000000000000000000000000611437576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa15801561140e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114329190612cf0565b611439565b475b905081810393507f0000000000000000000000000000000000000000000000000000000000000000156114fe5760405160009073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29086908381818185875af1925050503d80600081146114bc576040519150601f19603f3d011682016040523d82523d6000602084013e6114c1565b606091505b50509050806114fc576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b61116973ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633866122bd565b60003073ffffffffffffffffffffffffffffffffffffffff1663378efa376040518163ffffffff1660e01b8152600401602060405180830381865afa15801561158c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b09190612d4f565b905060005b82811015611a555760005b85811015611a425760008787838181106115dc576115dc612d6c565b90506020020160208101906115f19190612ad1565b905060008473ffffffffffffffffffffffffffffffffffffffff1663574e77953089898881811061162457611624612d6c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff90941660048501526020029190910135602483015250604401602060405180830381865afa15801561169b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bf9190612d4f565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015291909116906370a0823190602401602060405180830381865afa15801561172d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117519190612cf0565b90504287878681811061176657611766612d6c565b905060200201351115801561177b5750600081115b80156117d9575073ffffffffffffffffffffffffffffffffffffffff82166000908152601160205260408120908888878181106117ba576117ba612d6c565b602090810292909201358352508101919091526040016000205460ff16155b15611a2d576117e782612376565b60006118c78673ffffffffffffffffffffffffffffffffffffffff16632f9cd854308b8b8a81811061181b5761181b612d6c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff9485166004820152602090910292909201356024830152509087166044820152606401602060405180830381865afa15801561189c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c09190612cf0565b83906125de565b905080600d60008282546118db9190612d38565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600e602052604081208054839290611915908490612d38565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152601060205260408120805483929061194f908490612d9b565b909155505073ffffffffffffffffffffffffffffffffffffffff831660009081526011602052604081206001918a8a8981811061198e5761198e612d6c565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff167f5758e413a9bfd3ec45a67abaa9ee2396cab143a505332bf7ab48c0e624b65f11828a8a89818110611a0557611a05612d6c565b90506020020135604051611a23929190918252602082015260400190565b60405180910390a2505b50508080611a3a90612db3565b9150506115c0565b5080611a4d81612db3565b9150506115b5565b505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166377aace1a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ae1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b059190612d4f565b73ffffffffffffffffffffffffffffffffffffffff1614611b52576040517ffb02114900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611b9373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001687866122bd565b6040517f23e30c8b00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8816906323e30c8b90611c129033907f0000000000000000000000000000000000000000000000000000000000000000908a9087908b908b90600401612dec565b6020604051808303816000875af1158015611c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c559190612cf0565b90507f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd98114611cb0576040517f207df21c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611cf273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168830886121f7565b5060019695505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015611d6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d909190612cf0565b92915050565b3360009081526008602052604090205460ff16611e0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e5452555354454400000000000000000000000000000000000000000000006044820152606401610b54565b611e176125fa565b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fb74d956cf6ec7842d08ebf0ab19ec03a88c1efd4a50ea4349d30f9c4ce512e9890600090a250565b60078054610a5e90612c9c565b611e9e838383612704565b505050565b3360009081526008602052604090205460ff16611f1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e5452555354454400000000000000000000000000000000000000000000006044820152606401610b54565b600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f70e1f29a97aa858ce785e48a42e40cd51020a45c8a2e4520272a6303585916a990600090a250565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612012576040517f3dd1b30500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50600092915050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bd6d894d6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610c55573d6000803e3d6000fd5b60006040517f095ea7b3000000000000000000000000000000000000000000000000000000008152836004820152826024820152602060006044836000895af13d15601f3d116001600051141617169150508061043b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f415050524f56455f4641494c45440000000000000000000000000000000000006044820152606401610b54565b600060087f000000000000000000000000000000000000000000000000000000000000000060ff1610156121b75761219d7f00000000000000000000000000000000000000000000000000000000000000006008612e72565b6121a890600a612fb5565b6121b29083612fc4565b611d90565b6121e260087f0000000000000000000000000000000000000000000000000000000000000000612e72565b6121ed90600a612fb5565b611d909083613001565b60006040517f23b872dd0000000000000000000000000000000000000000000000000000000081528460048201528360248201528260448201526020600060648360008a5af13d15601f3d11600160005114161716915050806122b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152606401610b54565b5050505050565b60006040517fa9059cbb000000000000000000000000000000000000000000000000000000008152836004820152826024820152602060006044836000895af13d15601f3d116001600051141617169150508061043b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152606401610b54565b61237e6125fa565b600c54600a546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000929173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156123f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124159190612cf0565b61241f9190612d38565b600d549091501561245c57600d546124459082906b033b2e3c9fd0803ce800000061291e565b600b60008282546124569190612d9b565b90915550505b73ffffffffffffffffffffffffffffffffffffffff82166000908152600f6020908152604080832054600b54600e909352908320549092916124ab91906b033b2e3c9fd0803ce8000000612933565b9050818111156124db57600a546124db9073ffffffffffffffffffffffffffffffffffffffff16858484036122bd565b600a546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256d9190612cf0565b600c55600a5473ffffffffffffffffffffffffffffffffffffffff9081169085167fad4a9acf26d8bba7a8cf1a41160d59be042ee554578e256c98d2ab74cdd435428484116125bd5760006125c7565b6125c78585612d38565b60405190815260200160405180910390a350505050565b60006125f383670de0b6b3a76400008461293c565b9392505050565b43601254146127025743601255604080516001808252818301909252600091602080830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000008160008151811061265d5761265d612d6c565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526040517f1c3db2e0000000000000000000000000000000000000000000000000000000008152733d9819210a31b4961b30ef54be2aed79b9c9cd3b90631c3db2e0906126d4903090859060040161303c565b600060405180830381600087803b1580156126ee57600080fd5b505af11580156122b6573d6000803e3d6000fd5b565b3360009081526008602052604090205460ff1661277d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e5452555354454400000000000000000000000000000000000000000000006044820152606401610b54565b61278683612376565b81156128b15780156127e95781600d60008282546127a49190612d9b565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600e6020526040812080548492906127de908490612d9b565b909155506128b19050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152601060205260409020548015612857578083101561282757600092900361282e565b9091039060005b73ffffffffffffffffffffffffffffffffffffffff841660009081526010602052604090208190555b82156128af5782600d600082825461286f9190612d38565b909155505073ffffffffffffffffffffffffffffffffffffffff84166000908152600e6020526040812080548592906128a9908490612d38565b90915550505b505b600b5473ffffffffffffffffffffffffffffffffffffffff84166000908152600e60205260409020546128f0916b033b2e3c9fd0803ce800000061295b565b73ffffffffffffffffffffffffffffffffffffffff9093166000908152600f60205260409020929092555050565b600061292b84838561293c565b949350505050565b600061292b8484845b82820281151584158583048514171661295457600080fd5b0492915050565b600061292b84848482820281151584158583048514171661297b57600080fd5b6001826001830304018115150290509392505050565b600060208083528351808285015260005b818110156129be578581018301518582016040015282016129a2565b818111156129d0576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b73ffffffffffffffffffffffffffffffffffffffff81168114612a2657600080fd5b50565b60008060408385031215612a3c57600080fd5b8235612a4781612a04565b946020939093013593505050565b80358015158114612a6557600080fd5b919050565b60008060408385031215612a7d57600080fd5b8235612a8881612a04565b9150612a9660208401612a55565b90509250929050565b60008060008060808587031215612ab557600080fd5b5050823594602084013594506040840135936060013592509050565b600060208284031215612ae357600080fd5b81356125f381612a04565b600060208284031215612b0057600080fd5b5035919050565b60008083601f840112612b1957600080fd5b50813567ffffffffffffffff811115612b3157600080fd5b6020830191508360208260051b8501011115612b4c57600080fd5b9250929050565b60008060008060408587031215612b6957600080fd5b843567ffffffffffffffff80821115612b8157600080fd5b612b8d88838901612b07565b90965094506020870135915080821115612ba657600080fd5b50612bb387828801612b07565b95989497509550505050565b600080600080600060808688031215612bd757600080fd5b8535612be281612a04565b94506020860135612bf281612a04565b935060408601359250606086013567ffffffffffffffff80821115612c1657600080fd5b818801915088601f830112612c2a57600080fd5b813581811115612c3957600080fd5b896020828501011115612c4b57600080fd5b9699959850939650602001949392505050565b600080600060608486031215612c7357600080fd5b8335612c7e81612a04565b925060208401359150612c9360408501612a55565b90509250925092565b600181811c90821680612cb057607f821691505b60208210811415612cea577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060208284031215612d0257600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015612d4a57612d4a612d09565b500390565b600060208284031215612d6157600080fd5b81516125f381612a04565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008219821115612dae57612dae612d09565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612de557612de5612d09565b5060010190565b600073ffffffffffffffffffffffffffffffffffffffff808916835280881660208401525085604083015284606083015260a060808301528260a0830152828460c0840137600060c0848401015260c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501168301019050979650505050505050565b600060ff821660ff841680821015612e8c57612e8c612d09565b90039392505050565b600181815b80851115612eee57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115612ed457612ed4612d09565b80851615612ee157918102915b93841c9390800290612e9a565b509250929050565b600082612f0557506001611d90565b81612f1257506000611d90565b8160018114612f285760028114612f3257612f4e565b6001915050611d90565b60ff841115612f4357612f43612d09565b50506001821b611d90565b5060208310610133831016604e8410600b8410161715612f71575081810a611d90565b612f7b8383612e95565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115612fad57612fad612d09565b029392505050565b60006125f360ff841683612ef6565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612ffc57612ffc612d09565b500290565b600082613037577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006040820173ffffffffffffffffffffffffffffffffffffffff80861684526020604081860152828651808552606087019150828801945060005b81811015613096578551851683529483019491830191600101613078565b50909897505050505050505056fea26469706673582212205fa70fe379173b3f88fcc21f76e1e0ab09a92601f0f1dfa577c15833e607bb0c64736f6c634300080b0033a2646970667358221220a93dbb2bdf2af60acb7565e342029ef25ca621774043f268e7fabeed3fe36e5564736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "setClaimer(address,address)": {
        "params": {
          "_claimer": "New claimer contract address"
        }
      },
      "setRewardToken(address,address)": {
        "params": {
          "_adapter": "address of adapter to update the reward token on",
          "_rewardToken": "address of reward token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DEFAULT_LEVEL()": {
        "notice": "Sets level to `31` by default, which keeps all Divider lifecycle methods public (`issue`, `combine`, `collect`, etc), but not the `onRedeem` hook."
      },
      "divider()": {
        "notice": "Sense core Divider address"
      },
      "factoryParams()": {
        "notice": "params for adapters deployed with this factory"
      },
      "setClaimer(address,address)": {
        "notice": "Sets `claimer` for a given adapter"
      },
      "setRewardToken(address,address)": {
        "notice": "Update reward token for given adapter"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19033,
        "contract": "@sense-finance/v1-core/src/adapters/implementations/compound/CFactory.sol:CFactory",
        "label": "isTrusted",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9300,
        "contract": "@sense-finance/v1-core/src/adapters/implementations/compound/CFactory.sol:CFactory",
        "label": "factoryParams",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(FactoryParams)9319_storage"
      },
      {
        "astId": 9457,
        "contract": "@sense-finance/v1-core/src/adapters/implementations/compound/CFactory.sol:CFactory",
        "label": "reward",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(FactoryParams)9319_storage": {
        "encoding": "inplace",
        "label": "struct BaseFactory.FactoryParams",
        "members": [
          {
            "astId": 9302,
            "contract": "@sense-finance/v1-core/src/adapters/implementations/compound/CFactory.sol:CFactory",
            "label": "oracle",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9304,
            "contract": "@sense-finance/v1-core/src/adapters/implementations/compound/CFactory.sol:CFactory",
            "label": "stake",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9306,
            "contract": "@sense-finance/v1-core/src/adapters/implementations/compound/CFactory.sol:CFactory",
            "label": "stakeSize",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9308,
            "contract": "@sense-finance/v1-core/src/adapters/implementations/compound/CFactory.sol:CFactory",
            "label": "minm",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9310,
            "contract": "@sense-finance/v1-core/src/adapters/implementations/compound/CFactory.sol:CFactory",
            "label": "maxm",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9312,
            "contract": "@sense-finance/v1-core/src/adapters/implementations/compound/CFactory.sol:CFactory",
            "label": "ifee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint128"
          },
          {
            "astId": 9314,
            "contract": "@sense-finance/v1-core/src/adapters/implementations/compound/CFactory.sol:CFactory",
            "label": "mode",
            "offset": 16,
            "slot": "5",
            "type": "t_uint16"
          },
          {
            "astId": 9316,
            "contract": "@sense-finance/v1-core/src/adapters/implementations/compound/CFactory.sol:CFactory",
            "label": "tilt",
            "offset": 18,
            "slot": "5",
            "type": "t_uint64"
          },
          {
            "astId": 9318,
            "contract": "@sense-finance/v1-core/src/adapters/implementations/compound/CFactory.sol:CFactory",
            "label": "guard",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
