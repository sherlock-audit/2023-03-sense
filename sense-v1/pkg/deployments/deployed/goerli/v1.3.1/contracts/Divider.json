{
  "address": "0xa1514E3bA51C59d4E76956409143aE9734883Fd5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cup",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenHandler",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadySettled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollectNotSettled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CombineRestricted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DuplicateSeries",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExistingValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GuardCapReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAdapter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMaturity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IssuanceFeeCapExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IssuanceRestricted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IssueOnSettle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSettled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPeriphery",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPermissionless",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyYT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OutOfWindowBoundaries",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedeemRestricted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SeriesDoesNotExist",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isOn",
          "type": "bool"
        }
      ],
      "name": "AdapterChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mscale",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_usrs",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_lscales",
          "type": "uint256[]"
        }
      ],
      "name": "Backfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collected",
          "type": "uint256"
        }
      ],
      "name": "Collected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Combined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "GuardChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "guarded",
          "type": "bool"
        }
      ],
      "name": "GuardedChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Issued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemed",
          "type": "uint256"
        }
      ],
      "name": "PTRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "periphery",
          "type": "address"
        }
      ],
      "name": "PeripheryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "permissionless",
          "type": "bool"
        }
      ],
      "name": "PermissionlessChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pt",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "yt",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "SeriesInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "settler",
          "type": "address"
        }
      ],
      "name": "SeriesSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "UserTrustUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemed",
          "type": "uint256"
        }
      ],
      "name": "YTRedeemed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ISSUANCE_FEE_CAP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SETTLEMENT_WINDOW",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPONSOR_WINDOW",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adapterAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adapterCounter",
      "outputs": [
        {
          "internalType": "uint248",
          "name": "",
          "type": "uint248"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "adapterMeta",
      "outputs": [
        {
          "internalType": "uint248",
          "name": "id",
          "type": "uint248"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "guard",
          "type": "uint256"
        },
        {
          "internalType": "uint248",
          "name": "level",
          "type": "uint248"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "addAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mscale",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_usrs",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lscales",
          "type": "uint256[]"
        }
      ],
      "name": "backfillScale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "uBalTransfer",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "collect",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collected",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "uBal",
          "type": "uint256"
        }
      ],
      "name": "combine",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tBal",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cup",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guarded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        }
      ],
      "name": "initSeries",
      "outputs": [
        {
          "internalType": "address",
          "name": "pt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "yt",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTrusted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tBal",
          "type": "uint256"
        }
      ],
      "name": "issue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "uBal",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lscales",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "name": "mscale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periphery",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "permissionless",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "name": "pt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "uBal",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tBal",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "series",
      "outputs": [
        {
          "internalType": "address",
          "name": "pt",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "issuance",
          "type": "uint48"
        },
        {
          "internalType": "address",
          "name": "yt",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "tilt",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "iscale",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mscale",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxscale",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isOn",
          "type": "bool"
        }
      ],
      "name": "setAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "setGuard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_guarded",
          "type": "bool"
        }
      ],
      "name": "setGuarded",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "setIsTrusted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_periphery",
          "type": "address"
        }
      ],
      "name": "setPeriphery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_permissionless",
          "type": "bool"
        }
      ],
      "name": "setPermissionless",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "name": "settleSeries",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenHandler",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "name": "yt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf3738a275d600fd8ced0152efd13690e3ac2ed636a708d464163fa9bbe58ed2f",
  "receipt": {
    "to": null,
    "from": "0xF13519734649F7464E5BE4aa91987A35594b2B16",
    "contractAddress": "0xa1514E3bA51C59d4E76956409143aE9734883Fd5",
    "transactionIndex": 10,
    "gasUsed": "4497791",
    "logsBloom": "0x
    "blockHash": "0xc60f8fec431b39042d509587a9a8a61ac97ad007e86224bc0afbe7b7b7806dd9",
    "transactionHash": "0xf3738a275d600fd8ced0152efd13690e3ac2ed636a708d464163fa9bbe58ed2f",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 7184271,
        "transactionHash": "0xf3738a275d600fd8ced0152efd13690e3ac2ed636a708d464163fa9bbe58ed2f",
        "address": "0xa1514E3bA51C59d4E76956409143aE9734883Fd5",
        "topics": [
          "0xe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986",
          "0x000000000000000000000000f13519734649f7464e5be4aa91987a35594b2b16"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 30,
        "blockHash": "0xc60f8fec431b39042d509587a9a8a61ac97ad007e86224bc0afbe7b7b7806dd9"
      }
    ],
    "blockNumber": 7184271,
    "cumulativeGasUsed": "5525842",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "0x8DC1B05d9A50d7fE500996E139fD9d2eaeeA65aF"
  ],
  "numDeployments": 1,
  "solcInputHash": "e6e4c9ea960c200f06b8bf15d2380dca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenHandler\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadySettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollectNotSettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CombineRestricted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateSeries\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExistingValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuardCapReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAdapter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaturity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IssuanceFeeCapExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IssuanceRestricted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IssueOnSettle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPeriphery\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPermissionless\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyYT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfWindowBoundaries\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemRestricted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SeriesDoesNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isOn\",\"type\":\"bool\"}],\"name\":\"AdapterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mscale\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_usrs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_lscales\",\"type\":\"uint256[]\"}],\"name\":\"Backfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collected\",\"type\":\"uint256\"}],\"name\":\"Collected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Combined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"GuardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"guarded\",\"type\":\"bool\"}],\"name\":\"GuardedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Issued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemed\",\"type\":\"uint256\"}],\"name\":\"PTRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"periphery\",\"type\":\"address\"}],\"name\":\"PeripheryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"permissionless\",\"type\":\"bool\"}],\"name\":\"PermissionlessChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"yt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"SeriesInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"settler\",\"type\":\"address\"}],\"name\":\"SeriesSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"UserTrustUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemed\",\"type\":\"uint256\"}],\"name\":\"YTRedeemed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ISSUANCE_FEE_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETTLEMENT_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPONSOR_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adapterAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adapterCounter\",\"outputs\":[{\"internalType\":\"uint248\",\"name\":\"\",\"type\":\"uint248\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adapterMeta\",\"outputs\":[{\"internalType\":\"uint248\",\"name\":\"id\",\"type\":\"uint248\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"guard\",\"type\":\"uint256\"},{\"internalType\":\"uint248\",\"name\":\"level\",\"type\":\"uint248\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"addAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mscale\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_usrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lscales\",\"type\":\"uint256[]\"}],\"name\":\"backfillScale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uBalTransfer\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collected\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uBal\",\"type\":\"uint256\"}],\"name\":\"combine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tBal\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guarded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"initSeries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTrusted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tBal\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"uBal\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lscales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"mscale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periphery\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permissionless\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"pt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uBal\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tBal\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"series\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pt\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"issuance\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"yt\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"tilt\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iscale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mscale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxscale\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOn\",\"type\":\"bool\"}],\"name\":\"setAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"setGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_guarded\",\"type\":\"bool\"}],\"name\":\"setGuarded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"setIsTrusted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_periphery\",\"type\":\"address\"}],\"name\":\"setPeriphery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_permissionless\",\"type\":\"bool\"}],\"name\":\"setPermissionless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"settleSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenHandler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"yt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"fedealconada + jparklev\",\"kind\":\"dev\",\"methods\":{\"addAdapter(address)\":{\"details\":\"when permissionless is disabled, only the Periphery can onboard adaptersafter permissionless is enabled, anyone can onboard adapters\",\"params\":{\"adapter\":\"Adapter's address\"}},\"backfillScale(address,uint256,uint256,address[],uint256[])\":{\"params\":{\"_lscales\":\"Values to set on lscales mapping\",\"_usrs\":\"Values to set on lscales mapping\",\"adapter\":\"Adapter's address\",\"maturity\":\"Maturity date for the Series\",\"mscale\":\"Value to set as the Series' Scale value at maturity\"}},\"combine(address,uint256,uint256)\":{\"details\":\"Explicitly burns YTs before maturity, and implicitly does it at/after maturity through `_collect()`\",\"params\":{\"adapter\":\"Adapter address for the Series\",\"maturity\":\"Maturity date for the Series\",\"uBal\":\"Balance of PT and YT to burn\"}},\"initSeries(address,uint256,address)\":{\"details\":\"Deploys two ERC20 contracts, one for PTs and the other one for YTsTransfers some fixed amount of stake asset to this contract\",\"params\":{\"adapter\":\"Adapter to associate with the Series\",\"maturity\":\"Maturity date for the new Series, in units of unix time\",\"sponsor\":\"Sponsor of the Series that puts up a token stake and receives the issuance fees\"}},\"issue(address,uint256,uint256)\":{\"details\":\"The balance of PTs and YTs minted will be the same value in units of underlying (less fees)\",\"params\":{\"adapter\":\"Adapter address for the Series\",\"maturity\":\"Maturity date for the Series [unix time]\",\"tBal\":\"Balance of Target to deposit\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"redeem(address,uint256,uint256)\":{\"details\":\"The balance of redeemable Target is a function of the change in Scale\",\"params\":{\"adapter\":\"Adapter address for the Series\",\"maturity\":\"Maturity date for the Series\",\"uBal\":\"Amount of PT to burn, which should be equivalent to the amount of Underlying owed to the caller\"}},\"setAdapter(address,bool)\":{\"params\":{\"adapter\":\"Adapter's address\",\"isOn\":\"Flag setting this adapter to enabled or disabled\"}},\"setGuard(address,uint256)\":{\"params\":{\"adapter\":\"Adapter address\",\"cap\":\"The max target that can be deposited on the Adapter\"}},\"setGuarded(bool)\":{\"params\":{\"_guarded\":\"bool\"}},\"setPaused(bool)\":{\"params\":{\"_paused\":\"boolean\"}},\"setPeriphery(address)\":{\"params\":{\"_periphery\":\"Target address\"}},\"setPermissionless(bool)\":{\"params\":{\"_permissionless\":\"bool\"}},\"settleSeries(address,uint256)\":{\"details\":\"The Series' sponsor has a grace period where only they can settle the SeriesAfter that, the reward becomes MEV\",\"params\":{\"adapter\":\"Adapter to associate with the Series\",\"maturity\":\"Maturity date for the new Series\"}}},\"title\":\"Sense Divider: Divide Assets in Two\",\"version\":1},\"userdoc\":{\"events\":{\"Backfilled(address,uint256,uint256,address[],uint256[])\":{\"notice\":\"Admin\"},\"GuardedChanged(bool)\":{\"notice\":\"*----* misc\"},\"Issued(address,uint256,uint256,address)\":{\"notice\":\"-***- middle\"},\"SeriesInitialized(address,uint256,address,address,address,address)\":{\"notice\":\"Series lifecycle *---- beginning\"},\"SeriesSettled(address,uint256,address)\":{\"notice\":\"----* end\"}},\"kind\":\"user\",\"methods\":{\"ISSUANCE_FEE_CAP()\":{\"notice\":\"5% issuance fee cap\"},\"SETTLEMENT_WINDOW()\":{\"notice\":\"Buffer after the sponsor window in which anyone can settle the Series\"},\"SPONSOR_WINDOW()\":{\"notice\":\"Buffer before and after the actual maturity in which only the sponsor can settle the Series\"},\"adapterAddresses(uint256)\":{\"notice\":\"adapter ID -> adapter address\"},\"adapterCounter()\":{\"notice\":\"Number of adapters (including turned off)\"},\"adapterMeta(address)\":{\"notice\":\"adapter data\"},\"addAdapter(address)\":{\"notice\":\"Enable an adapter\"},\"backfillScale(address,uint256,uint256,address[],uint256[])\":{\"notice\":\"Backfill a Series' Scale value at maturity if keepers failed to settle it\"},\"combine(address,uint256,uint256)\":{\"notice\":\"Reconstitute Target by burning PT and YT\"},\"cup()\":{\"notice\":\"Sense community multisig\"},\"guarded()\":{\"notice\":\"Guarded launch flag\"},\"initSeries(address,uint256,address)\":{\"notice\":\"Initializes a new Series\"},\"issue(address,uint256,uint256)\":{\"notice\":\"Mint Principal & Yield Tokens of a specific Series\"},\"lscales(address,uint256,address)\":{\"notice\":\"adapter -> maturity -> user -> lscale (last scale)\"},\"permissionless()\":{\"notice\":\"Permissionless flag\"},\"pt(address,uint256)\":{\"notice\":\"Returns address of Principal Token\"},\"redeem(address,uint256,uint256)\":{\"notice\":\"Burn PT of a Series once it's been settled\"},\"series(address,uint256)\":{\"notice\":\"adapter -> maturity -> Series\"},\"setAdapter(address,bool)\":{\"notice\":\"Enable or disable a adapter\"},\"setGuard(address,uint256)\":{\"notice\":\"Set adapter's guard\"},\"setGuarded(bool)\":{\"notice\":\"Set guarded mode\"},\"setPaused(bool)\":{\"notice\":\"Set paused flag\"},\"setPeriphery(address)\":{\"notice\":\"Set periphery's contract\"},\"setPermissionless(bool)\":{\"notice\":\"Set permissioless mode\"},\"settleSeries(address,uint256)\":{\"notice\":\"Settles a Series and transfers the settlement reward to the caller\"},\"tokenHandler()\":{\"notice\":\"Principal/Yield tokens deployer\"},\"yt(address,uint256)\":{\"notice\":\"Returns address of Yield Token\"}},\"notice\":\"You can use this contract to issue, combine, and redeem Sense ERC20 Principal and Yield Tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sense-finance/v1-core/src/Divider.sol\":\"Divider\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":15000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0240f7703cff32a61ee3e9fbb339e09a944260432a9ef37debf3692b1a6c8049\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private locked = 1;\\n\\n    modifier nonReentrant() {\\n        require(locked == 1, \\\"REENTRANCY\\\");\\n\\n        locked = 2;\\n\\n        _;\\n\\n        locked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0xedbae9363161b25063b9653299e38f29481f512de88011613f514d23cd6817ee\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    event Debug(bool one, bool two, uint256 retsize);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf3c37dad1c92b696ffb8b4532527514f8c8a31a4732c6f61815a4fe5f5ce8725\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/Divider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { ReentrancyGuard } from \\\"@rari-capital/solmate/src/utils/ReentrancyGuard.sol\\\";\\nimport { DateTime } from \\\"./external/DateTime.sol\\\";\\nimport { FixedMath } from \\\"./external/FixedMath.sol\\\";\\n\\n// Internal references\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\nimport { Levels } from \\\"@sense-finance/v1-utils/src/libs/Levels.sol\\\";\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\nimport { YT } from \\\"./tokens/YT.sol\\\";\\nimport { Token } from \\\"./tokens/Token.sol\\\";\\nimport { BaseAdapter as Adapter } from \\\"./adapters/abstract/BaseAdapter.sol\\\";\\n\\n/// @title Sense Divider: Divide Assets in Two\\n/// @author fedealconada + jparklev\\n/// @notice You can use this contract to issue, combine, and redeem Sense ERC20 Principal and Yield Tokens\\ncontract Divider is Trust, ReentrancyGuard, Pausable {\\n    using SafeTransferLib for ERC20;\\n    using FixedMath for uint256;\\n    using Levels for uint256;\\n\\n    /* ========== PUBLIC CONSTANTS ========== */\\n\\n    /// @notice Buffer before and after the actual maturity in which only the sponsor can settle the Series\\n    uint256 public constant SPONSOR_WINDOW = 3 hours;\\n\\n    /// @notice Buffer after the sponsor window in which anyone can settle the Series\\n    uint256 public constant SETTLEMENT_WINDOW = 3 hours;\\n\\n    /// @notice 5% issuance fee cap\\n    uint256 public constant ISSUANCE_FEE_CAP = 0.05e18;\\n\\n    /* ========== PUBLIC MUTABLE STORAGE ========== */\\n\\n    address public periphery;\\n\\n    /// @notice Sense community multisig\\n    address public immutable cup;\\n\\n    /// @notice Principal/Yield tokens deployer\\n    address public immutable tokenHandler;\\n\\n    /// @notice Permissionless flag\\n    bool public permissionless;\\n\\n    /// @notice Guarded launch flag\\n    bool public guarded = true;\\n\\n    /// @notice Number of adapters (including turned off)\\n    uint248 public adapterCounter;\\n\\n    /// @notice adapter ID -> adapter address\\n    mapping(uint256 => address) public adapterAddresses;\\n\\n    /// @notice adapter data\\n    mapping(address => AdapterMeta) public adapterMeta;\\n\\n    /// @notice adapter -> maturity -> Series\\n    mapping(address => mapping(uint256 => Series)) public series;\\n\\n    /// @notice adapter -> maturity -> user -> lscale (last scale)\\n    mapping(address => mapping(uint256 => mapping(address => uint256))) public lscales;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct Series {\\n        // Principal ERC20 token\\n        address pt;\\n        // Timestamp of series initialization\\n        uint48 issuance;\\n        // Yield ERC20 token\\n        address yt;\\n        // % of underlying principal initially reserved for Yield\\n        uint96 tilt;\\n        // Actor who initialized the Series\\n        address sponsor;\\n        // Tracks fees due to the series' settler\\n        uint256 reward;\\n        // Scale at issuance\\n        uint256 iscale;\\n        // Scale at maturity\\n        uint256 mscale;\\n        // Max scale value from this series' lifetime\\n        uint256 maxscale;\\n    }\\n\\n    struct AdapterMeta {\\n        // Adapter ID\\n        uint248 id;\\n        // Adapter enabled/disabled\\n        bool enabled;\\n        // Max amount of Target allowed to be issued\\n        uint256 guard;\\n        // Adapter level\\n        uint248 level;\\n    }\\n\\n    constructor(address _cup, address _tokenHandler) Trust(msg.sender) {\\n        cup = _cup;\\n        tokenHandler = _tokenHandler;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Enable an adapter\\n    /// @dev when permissionless is disabled, only the Periphery can onboard adapters\\n    /// @dev after permissionless is enabled, anyone can onboard adapters\\n    /// @param adapter Adapter's address\\n    function addAdapter(address adapter) external whenNotPaused {\\n        if (!permissionless && msg.sender != periphery) revert Errors.OnlyPermissionless();\\n        if (adapterMeta[adapter].id > 0 && !adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        _setAdapter(adapter, true);\\n    }\\n\\n    /// @notice Initializes a new Series\\n    /// @dev Deploys two ERC20 contracts, one for PTs and the other one for YTs\\n    /// @dev Transfers some fixed amount of stake asset to this contract\\n    /// @param adapter Adapter to associate with the Series\\n    /// @param maturity Maturity date for the new Series, in units of unix time\\n    /// @param sponsor Sponsor of the Series that puts up a token stake and receives the issuance fees\\n    function initSeries(\\n        address adapter,\\n        uint256 maturity,\\n        address sponsor\\n    ) external nonReentrant whenNotPaused returns (address pt, address yt) {\\n        if (periphery != msg.sender) revert Errors.OnlyPeriphery();\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (_exists(adapter, maturity)) revert Errors.DuplicateSeries();\\n        if (!_isValid(adapter, maturity)) revert Errors.InvalidMaturity();\\n\\n        // Transfer stake asset stake from caller to adapter\\n        (address target, address stake, uint256 stakeSize) = Adapter(adapter).getStakeAndTarget();\\n\\n        // Deploy Principal & Yield Tokens for this new Series\\n        (pt, yt) = TokenHandler(tokenHandler).deploy(adapter, adapterMeta[adapter].id, maturity);\\n\\n        // Initialize the new Series struct\\n        uint256 scale = Adapter(adapter).scale();\\n\\n        series[adapter][maturity].pt = pt;\\n        series[adapter][maturity].issuance = uint48(block.timestamp);\\n        series[adapter][maturity].yt = yt;\\n        series[adapter][maturity].tilt = uint96(Adapter(adapter).tilt());\\n        series[adapter][maturity].sponsor = sponsor;\\n        series[adapter][maturity].iscale = scale;\\n        series[adapter][maturity].maxscale = scale;\\n\\n        ERC20(stake).safeTransferFrom(msg.sender, adapter, stakeSize);\\n\\n        emit SeriesInitialized(adapter, maturity, pt, yt, sponsor, target);\\n    }\\n\\n    /// @notice Settles a Series and transfers the settlement reward to the caller\\n    /// @dev The Series' sponsor has a grace period where only they can settle the Series\\n    /// @dev After that, the reward becomes MEV\\n    /// @param adapter Adapter to associate with the Series\\n    /// @param maturity Maturity date for the new Series\\n    function settleSeries(address adapter, uint256 maturity) external nonReentrant whenNotPaused {\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n        if (_settled(adapter, maturity)) revert Errors.AlreadySettled();\\n        if (!_canBeSettled(adapter, maturity)) revert Errors.OutOfWindowBoundaries();\\n\\n        // The maturity scale value is all a Series needs for us to consider it \\\"settled\\\"\\n        uint256 mscale = Adapter(adapter).scale();\\n        series[adapter][maturity].mscale = mscale;\\n\\n        if (mscale > series[adapter][maturity].maxscale) {\\n            series[adapter][maturity].maxscale = mscale;\\n        }\\n\\n        // Reward the caller for doing the work of settling the Series at around the correct time\\n        (address target, address stake, uint256 stakeSize) = Adapter(adapter).getStakeAndTarget();\\n        ERC20(target).safeTransferFrom(adapter, msg.sender, series[adapter][maturity].reward);\\n        ERC20(stake).safeTransferFrom(adapter, msg.sender, stakeSize);\\n\\n        emit SeriesSettled(adapter, maturity, msg.sender);\\n    }\\n\\n    /// @notice Mint Principal & Yield Tokens of a specific Series\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series [unix time]\\n    /// @param tBal Balance of Target to deposit\\n    /// @dev The balance of PTs and YTs minted will be the same value in units of underlying (less fees)\\n    function issue(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 tBal\\n    ) external nonReentrant whenNotPaused returns (uint256 uBal) {\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n        if (_settled(adapter, maturity)) revert Errors.IssueOnSettle();\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.issueRestricted() && msg.sender != adapter) revert Errors.IssuanceRestricted();\\n\\n        ERC20 target = ERC20(Adapter(adapter).target());\\n\\n        // Take the issuance fee out of the deposited Target, and put it towards the settlement reward\\n        uint256 issuanceFee = Adapter(adapter).ifee();\\n        if (issuanceFee > ISSUANCE_FEE_CAP) revert Errors.IssuanceFeeCapExceeded();\\n        uint256 fee = tBal.fmul(issuanceFee);\\n\\n        unchecked {\\n            // Safety: bounded by the Target's total token supply\\n            series[adapter][maturity].reward += fee;\\n        }\\n        uint256 tBalSubFee = tBal - fee;\\n\\n        // Ensure the caller won't hit the issuance cap with this action\\n        unchecked {\\n            // Safety: bounded by the Target's total token supply\\n            if (guarded && target.balanceOf(adapter) + tBal > adapterMeta[address(adapter)].guard)\\n                revert Errors.GuardCapReached();\\n        }\\n\\n        // Update values on adapter\\n        Adapter(adapter).notify(msg.sender, tBalSubFee, true);\\n\\n        uint256 scale = level.collectDisabled() ? series[adapter][maturity].iscale : Adapter(adapter).scale();\\n\\n        // Determine the amount of Underlying equal to the Target being sent in (the principal)\\n        uBal = tBalSubFee.fmul(scale);\\n\\n        // If the caller has not collected on YT before, use the current scale, otherwise\\n        // use the harmonic mean of the last and the current scale value\\n        lscales[adapter][maturity][msg.sender] = lscales[adapter][maturity][msg.sender] == 0\\n            ? scale\\n            : _reweightLScale(\\n                adapter,\\n                maturity,\\n                YT(series[adapter][maturity].yt).balanceOf(msg.sender),\\n                uBal,\\n                msg.sender,\\n                scale\\n            );\\n\\n        // Mint equal amounts of PT and YT\\n        Token(series[adapter][maturity].pt).mint(msg.sender, uBal);\\n        YT(series[adapter][maturity].yt).mint(msg.sender, uBal);\\n\\n        target.safeTransferFrom(msg.sender, adapter, tBal);\\n\\n        emit Issued(adapter, maturity, uBal, msg.sender);\\n    }\\n\\n    /// @notice Reconstitute Target by burning PT and YT\\n    /// @dev Explicitly burns YTs before maturity, and implicitly does it at/after maturity through `_collect()`\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal Balance of PT and YT to burn\\n    function combine(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal\\n    ) external nonReentrant whenNotPaused returns (uint256 tBal) {\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.combineRestricted() && msg.sender != adapter) revert Errors.CombineRestricted();\\n\\n        // Burn the PT\\n        Token(series[adapter][maturity].pt).burn(msg.sender, uBal);\\n\\n        // Collect whatever excess is due\\n        uint256 collected = _collect(msg.sender, adapter, maturity, uBal, uBal, address(0));\\n\\n        uint256 cscale = series[adapter][maturity].mscale;\\n        bool settled = _settled(adapter, maturity);\\n        if (!settled) {\\n            // If it's not settled, then YT won't be burned automatically in `_collect()`\\n            YT(series[adapter][maturity].yt).burn(msg.sender, uBal);\\n            // If collect has been restricted, use the initial scale, otherwise use the current scale\\n            cscale = level.collectDisabled()\\n                ? series[adapter][maturity].iscale\\n                : lscales[adapter][maturity][msg.sender];\\n        }\\n\\n        // Convert from units of Underlying to units of Target\\n        tBal = uBal.fdiv(cscale);\\n        ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, msg.sender, tBal);\\n\\n        // Notify only when Series is not settled as when it is, the _collect() call above would trigger a _redeemYT which will call notify\\n        if (!settled) Adapter(adapter).notify(msg.sender, tBal, false);\\n        unchecked {\\n            // Safety: bounded by the Target's total token supply\\n            tBal += collected;\\n        }\\n        emit Combined(adapter, maturity, tBal, msg.sender);\\n    }\\n\\n    /// @notice Burn PT of a Series once it's been settled\\n    /// @dev The balance of redeemable Target is a function of the change in Scale\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal Amount of PT to burn, which should be equivalent to the amount of Underlying owed to the caller\\n    function redeem(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal\\n    ) external nonReentrant whenNotPaused returns (uint256 tBal) {\\n        // If a Series is settled, we know that it must have existed as well, so that check is unnecessary\\n        if (!_settled(adapter, maturity)) revert Errors.NotSettled();\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.redeemRestricted() && msg.sender == adapter) revert Errors.RedeemRestricted();\\n\\n        // Burn the caller's PT\\n        Token(series[adapter][maturity].pt).burn(msg.sender, uBal);\\n\\n        // Principal Token holder's share of the principal = (1 - part of the principal that belongs to Yield)\\n        uint256 zShare = FixedMath.WAD - series[adapter][maturity].tilt;\\n\\n        // If Principal Token are at a loss and Yield have some principal to help cover the shortfall,\\n        // take what we can from Yield Token's principal\\n        if (series[adapter][maturity].mscale.fdiv(series[adapter][maturity].maxscale) >= zShare) {\\n            tBal = (uBal * zShare) / series[adapter][maturity].mscale;\\n        } else {\\n            tBal = uBal.fdiv(series[adapter][maturity].maxscale);\\n        }\\n\\n        if (!level.redeemHookDisabled()) {\\n            Adapter(adapter).onRedeem(uBal, series[adapter][maturity].mscale, series[adapter][maturity].maxscale, tBal);\\n        }\\n\\n        ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, msg.sender, tBal);\\n        emit PTRedeemed(adapter, maturity, tBal);\\n    }\\n\\n    function collect(\\n        address usr,\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBalTransfer,\\n        address to\\n    ) external nonReentrant onlyYT(adapter, maturity) whenNotPaused returns (uint256 collected) {\\n        uint256 uBal = YT(msg.sender).balanceOf(usr);\\n        return _collect(usr, adapter, maturity, uBal, uBalTransfer > 0 ? uBalTransfer : uBal, to);\\n    }\\n\\n    /// @notice Collect YT excess before, at, or after maturity\\n    /// @dev If `to` is set, we copy the lscale value from usr to this address\\n    /// @param usr User who's collecting for their YTs\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal yield Token balance\\n    /// @param uBalTransfer original transfer value\\n    /// @param to address to set the lscale value from usr\\n    function _collect(\\n        address usr,\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal,\\n        uint256 uBalTransfer,\\n        address to\\n    ) internal returns (uint256 collected) {\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n\\n        // If the adapter is disabled, its Yield Token can only collect\\n        // if associated Series has been settled, which implies that an admin\\n        // has backfilled it\\n        if (!adapterMeta[adapter].enabled && !_settled(adapter, maturity)) revert Errors.InvalidAdapter();\\n\\n        Series memory _series = series[adapter][maturity];\\n\\n        // Get the scale value from the last time this holder collected (default to maturity)\\n        uint256 lscale = lscales[adapter][maturity][usr];\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.collectDisabled()) {\\n            // If this Series has been settled, we ensure everyone's YT will\\n            // collect yield accrued since issuance\\n            if (_settled(adapter, maturity)) {\\n                lscale = series[adapter][maturity].iscale;\\n                // If the Series is not settled, we ensure no collections can happen\\n            } else {\\n                return 0;\\n            }\\n        }\\n\\n        // If the Series has been settled, this should be their last collect, so redeem the user's Yield Tokens for them\\n        if (_settled(adapter, maturity)) {\\n            _redeemYT(usr, adapter, maturity, uBal);\\n        } else {\\n            // If we're not settled and we're past maturity + the sponsor window,\\n            // anyone can settle this Series so revert until someone does\\n            if (block.timestamp > maturity + SPONSOR_WINDOW) {\\n                revert Errors.CollectNotSettled();\\n                // Otherwise, this is a valid pre-settlement collect and we need to determine the scale value\\n            } else {\\n                uint256 cscale = Adapter(adapter).scale();\\n                // If this is larger than the largest scale we've seen for this Series, use it\\n                if (cscale > _series.maxscale) {\\n                    _series.maxscale = cscale;\\n                    lscales[adapter][maturity][usr] = cscale;\\n                    // If not, use the previously noted max scale value\\n                } else {\\n                    lscales[adapter][maturity][usr] = _series.maxscale;\\n                }\\n            }\\n        }\\n\\n        // Determine how much underlying has accrued since the last time this user collected, in units of Target.\\n        // (Or take the last time as issuance if they haven't yet)\\n        //\\n        // Reminder: `Underlying / Scale = Target`\\n        // So the following equation is saying, for some amount of Underlying `u`:\\n        // \\\"Balance of Target that equaled `u` at the last collection _minus_ Target that equals `u` now\\\"\\n        //\\n        // Because maxscale must be increasing, the Target balance needed to equal `u` decreases, and that \\\"excess\\\"\\n        // is what Yield holders are collecting\\n        uint256 tBalNow = uBal.fdivUp(_series.maxscale); // preventive round-up towards the protocol\\n        uint256 tBalPrev = uBal.fdiv(lscale);\\n        unchecked {\\n            collected = tBalPrev > tBalNow ? tBalPrev - tBalNow : 0;\\n        }\\n        ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, usr, collected);\\n        Adapter(adapter).notify(usr, collected, false); // Distribute reward tokens\\n\\n        // If this collect is a part of a token transfer to another address, set the receiver's\\n        // last collection to a synthetic scale weighted based on the scale on their last collect,\\n        // the time elapsed, and the current scale\\n        if (to != address(0)) {\\n            uint256 ytBal = YT(_series.yt).balanceOf(to);\\n            // If receiver holds yields, we set lscale to a computed \\\"synthetic\\\" lscales value that,\\n            // for the updated yield balance, still assigns the correct amount of yield.\\n            lscales[adapter][maturity][to] = ytBal > 0\\n                ? _reweightLScale(adapter, maturity, ytBal, uBalTransfer, to, _series.maxscale)\\n                : _series.maxscale;\\n            uint256 tBalTransfer = uBalTransfer.fdiv(_series.maxscale);\\n            Adapter(adapter).notify(usr, tBalTransfer, false);\\n            Adapter(adapter).notify(to, tBalTransfer, true);\\n        }\\n        series[adapter][maturity] = _series;\\n\\n        emit Collected(adapter, maturity, collected);\\n    }\\n\\n    /// @notice calculate the harmonic mean of the current scale and the last scale,\\n    /// weighted by amounts associated with each\\n    function _reweightLScale(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 ytBal,\\n        uint256 uBal,\\n        address receiver,\\n        uint256 scale\\n    ) internal view returns (uint256) {\\n        // Target Decimals * 18 Decimals [from fdiv] / (Target Decimals * 18 Decimals [from fdiv] / 18 Decimals)\\n        // = 18 Decimals, which is the standard for scale values\\n        return (ytBal + uBal).fdiv((ytBal.fdiv(lscales[adapter][maturity][receiver]) + uBal.fdiv(scale)));\\n    }\\n\\n    function _redeemYT(\\n        address usr,\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal\\n    ) internal {\\n        // Burn the users's YTs\\n        YT(series[adapter][maturity].yt).burn(usr, uBal);\\n\\n        // Default principal for a YT\\n        uint256 tBal = 0;\\n\\n        // Principal Token holder's share of the principal = (1 - part of the principal that belongs to Yield Tokens)\\n        uint256 zShare = FixedMath.WAD - series[adapter][maturity].tilt;\\n\\n        // If PTs are at a loss and YTs had their principal cut to help cover the shortfall,\\n        // calculate how much YTs have left\\n        if (series[adapter][maturity].mscale.fdiv(series[adapter][maturity].maxscale) >= zShare) {\\n            tBal = uBal.fdiv(series[adapter][maturity].maxscale) - (uBal * zShare) / series[adapter][maturity].mscale;\\n            ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, usr, tBal);\\n        }\\n\\n        // Always notify the Adapter of the full Target balance that will no longer\\n        // have its rewards distributed\\n        Adapter(adapter).notify(usr, uBal.fdivUp(series[adapter][maturity].maxscale), false);\\n\\n        emit YTRedeemed(adapter, maturity, tBal);\\n    }\\n\\n    /* ========== ADMIN ========== */\\n\\n    /// @notice Enable or disable a adapter\\n    /// @param adapter Adapter's address\\n    /// @param isOn Flag setting this adapter to enabled or disabled\\n    function setAdapter(address adapter, bool isOn) public requiresTrust {\\n        _setAdapter(adapter, isOn);\\n    }\\n\\n    /// @notice Set adapter's guard\\n    /// @param adapter Adapter address\\n    /// @param cap The max target that can be deposited on the Adapter\\n    function setGuard(address adapter, uint256 cap) external requiresTrust {\\n        adapterMeta[adapter].guard = cap;\\n        emit GuardChanged(adapter, cap);\\n    }\\n\\n    /// @notice Set guarded mode\\n    /// @param _guarded bool\\n    function setGuarded(bool _guarded) external requiresTrust {\\n        guarded = _guarded;\\n        emit GuardedChanged(_guarded);\\n    }\\n\\n    /// @notice Set periphery's contract\\n    /// @param _periphery Target address\\n    function setPeriphery(address _periphery) external requiresTrust {\\n        periphery = _periphery;\\n        emit PeripheryChanged(_periphery);\\n    }\\n\\n    /// @notice Set paused flag\\n    /// @param _paused boolean\\n    function setPaused(bool _paused) external requiresTrust {\\n        _paused ? _pause() : _unpause();\\n    }\\n\\n    /// @notice Set permissioless mode\\n    /// @param _permissionless bool\\n    function setPermissionless(bool _permissionless) external requiresTrust {\\n        permissionless = _permissionless;\\n        emit PermissionlessChanged(_permissionless);\\n    }\\n\\n    /// @notice Backfill a Series' Scale value at maturity if keepers failed to settle it\\n    /// @param adapter Adapter's address\\n    /// @param maturity Maturity date for the Series\\n    /// @param mscale Value to set as the Series' Scale value at maturity\\n    /// @param _usrs Values to set on lscales mapping\\n    /// @param _lscales Values to set on lscales mapping\\n    function backfillScale(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 mscale,\\n        address[] calldata _usrs,\\n        uint256[] calldata _lscales\\n    ) external requiresTrust {\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n\\n        uint256 cutoff = maturity + SPONSOR_WINDOW + SETTLEMENT_WINDOW;\\n        // Admin can never backfill before maturity\\n        if (block.timestamp <= cutoff) revert Errors.OutOfWindowBoundaries();\\n\\n        // Set user's last scale values the Series (needed for the `collect` method)\\n        for (uint256 i = 0; i < _usrs.length; i++) {\\n            lscales[adapter][maturity][_usrs[i]] = _lscales[i];\\n        }\\n\\n        if (mscale > 0) {\\n            Series memory _series = series[adapter][maturity];\\n            // Set the maturity scale for the Series (needed for `redeem` methods)\\n            series[adapter][maturity].mscale = mscale;\\n            if (mscale > _series.maxscale) {\\n                series[adapter][maturity].maxscale = mscale;\\n            }\\n\\n            (address target, address stake, uint256 stakeSize) = Adapter(adapter).getStakeAndTarget();\\n\\n            address stakeDst = adapterMeta[adapter].enabled ? cup : _series.sponsor;\\n            ERC20(target).safeTransferFrom(adapter, cup, _series.reward);\\n            series[adapter][maturity].reward = 0;\\n            ERC20(stake).safeTransferFrom(adapter, stakeDst, stakeSize);\\n        }\\n\\n        emit Backfilled(adapter, maturity, mscale, _usrs, _lscales);\\n    }\\n\\n    /* ========== INTERNAL VIEWS ========== */\\n\\n    function _exists(address adapter, uint256 maturity) internal view returns (bool) {\\n        return series[adapter][maturity].pt != address(0);\\n    }\\n\\n    function _settled(address adapter, uint256 maturity) internal view returns (bool) {\\n        return series[adapter][maturity].mscale > 0;\\n    }\\n\\n    function _canBeSettled(address adapter, uint256 maturity) internal view returns (bool) {\\n        uint256 cutoff = maturity + SPONSOR_WINDOW + SETTLEMENT_WINDOW;\\n        // If the sender is the sponsor for the Series\\n        if (msg.sender == series[adapter][maturity].sponsor) {\\n            return maturity - SPONSOR_WINDOW <= block.timestamp && cutoff >= block.timestamp;\\n        } else {\\n            return maturity + SPONSOR_WINDOW < block.timestamp && cutoff >= block.timestamp;\\n        }\\n    }\\n\\n    function _isValid(address adapter, uint256 maturity) internal view returns (bool) {\\n        (uint256 minm, uint256 maxm) = Adapter(adapter).getMaturityBounds();\\n        if (maturity < block.timestamp + minm || maturity > block.timestamp + maxm) return false;\\n        (, , uint256 day, uint256 hour, uint256 minute, uint256 second) = DateTime.timestampToDateTime(maturity);\\n\\n        if (hour != 0 || minute != 0 || second != 0) return false;\\n        uint256 mode = Adapter(adapter).mode();\\n        if (mode == 0) {\\n            return day == 1;\\n        }\\n        if (mode == 1) {\\n            return DateTime.getDayOfWeek(maturity) == 1;\\n        }\\n        return false;\\n    }\\n\\n    /* ========== INTERNAL UTILS ========== */\\n\\n    function _setAdapter(address adapter, bool isOn) internal {\\n        AdapterMeta memory am = adapterMeta[adapter];\\n        if (am.enabled == isOn) revert Errors.ExistingValue();\\n        am.enabled = isOn;\\n\\n        // If this adapter is being added for the first time\\n        if (isOn && am.id == 0) {\\n            am.id = ++adapterCounter;\\n            adapterAddresses[am.id] = adapter;\\n        }\\n\\n        // Set level and target (can only be done once);\\n        am.level = uint248(Adapter(adapter).level());\\n        adapterMeta[adapter] = am;\\n        emit AdapterChanged(adapter, am.id, isOn);\\n    }\\n\\n    /* ========== PUBLIC GETTERS ========== */\\n\\n    /// @notice Returns address of Principal Token\\n    function pt(address adapter, uint256 maturity) public view returns (address) {\\n        return series[adapter][maturity].pt;\\n    }\\n\\n    /// @notice Returns address of Yield Token\\n    function yt(address adapter, uint256 maturity) public view returns (address) {\\n        return series[adapter][maturity].yt;\\n    }\\n\\n    function mscale(address adapter, uint256 maturity) public view returns (uint256) {\\n        return series[adapter][maturity].mscale;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyYT(address adapter, uint256 maturity) {\\n        if (series[adapter][maturity].yt != msg.sender) revert Errors.OnlyYT();\\n        _;\\n    }\\n\\n    /* ========== LOGS ========== */\\n\\n    /// @notice Admin\\n    event Backfilled(\\n        address indexed adapter,\\n        uint256 indexed maturity,\\n        uint256 mscale,\\n        address[] _usrs,\\n        uint256[] _lscales\\n    );\\n    event GuardChanged(address indexed adapter, uint256 cap);\\n    event AdapterChanged(address indexed adapter, uint256 indexed id, bool indexed isOn);\\n    event PeripheryChanged(address indexed periphery);\\n\\n    /// @notice Series lifecycle\\n    /// *---- beginning\\n    event SeriesInitialized(\\n        address adapter,\\n        uint256 indexed maturity,\\n        address pt,\\n        address yt,\\n        address indexed sponsor,\\n        address indexed target\\n    );\\n    /// -***- middle\\n    event Issued(address indexed adapter, uint256 indexed maturity, uint256 balance, address indexed sender);\\n    event Combined(address indexed adapter, uint256 indexed maturity, uint256 balance, address indexed sender);\\n    event Collected(address indexed adapter, uint256 indexed maturity, uint256 collected);\\n    /// ----* end\\n    event SeriesSettled(address indexed adapter, uint256 indexed maturity, address indexed settler);\\n    event PTRedeemed(address indexed adapter, uint256 indexed maturity, uint256 redeemed);\\n    event YTRedeemed(address indexed adapter, uint256 indexed maturity, uint256 redeemed);\\n    /// *----* misc\\n    event GuardedChanged(bool indexed guarded);\\n    event PermissionlessChanged(bool indexed permissionless);\\n}\\n\\ncontract TokenHandler is Trust {\\n    /// @notice Program state\\n    address public divider;\\n\\n    constructor() Trust(msg.sender) {}\\n\\n    function init(address _divider) external requiresTrust {\\n        if (divider != address(0)) revert Errors.AlreadyInitialized();\\n        divider = _divider;\\n    }\\n\\n    function deploy(\\n        address adapter,\\n        uint248 id,\\n        uint256 maturity\\n    ) external returns (address pt, address yt) {\\n        if (msg.sender != divider) revert Errors.OnlyDivider();\\n\\n        ERC20 target = ERC20(Adapter(adapter).target());\\n        uint8 decimals = target.decimals();\\n        string memory symbol = target.symbol();\\n        (string memory d, string memory m, string memory y) = DateTime.toDateString(maturity);\\n        string memory date = DateTime.format(maturity);\\n        string memory datestring = string(abi.encodePacked(d, \\\"-\\\", m, \\\"-\\\", y));\\n        string memory adapterId = DateTime.uintToString(id);\\n        pt = address(\\n            new Token(\\n                string(abi.encodePacked(date, \\\" \\\", symbol, \\\" Sense Principal Token, A\\\", adapterId)),\\n                string(abi.encodePacked(\\\"sP-\\\", symbol, \\\":\\\", datestring, \\\":\\\", adapterId)),\\n                decimals,\\n                divider\\n            )\\n        );\\n\\n        yt = address(\\n            new YT(\\n                adapter,\\n                maturity,\\n                string(abi.encodePacked(date, \\\" \\\", symbol, \\\" Sense Yield Token, A\\\", adapterId)),\\n                string(abi.encodePacked(\\\"sY-\\\", symbol, \\\":\\\", datestring, \\\":\\\", adapterId)),\\n                decimals,\\n                divider\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x3c86e44a485d0e7504f3499fc07ad995b7b18f7ca5ca63e6bda5bee2dbbe31ea\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/BaseAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { IERC3156FlashLender } from \\\"../../external/flashloan/IERC3156FlashLender.sol\\\";\\nimport { IERC3156FlashBorrower } from \\\"../../external/flashloan/IERC3156FlashBorrower.sol\\\";\\n\\n// Internal references\\nimport { Divider } from \\\"../../Divider.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\n/// @title Assign value to Target tokens\\nabstract contract BaseAdapter is IERC3156FlashLender {\\n    using SafeTransferLib for ERC20;\\n\\n    /* ========== CONSTANTS ========== */\\n\\n    bytes32 public constant CALLBACK_SUCCESS = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    /* ========== PUBLIC IMMUTABLES ========== */\\n\\n    /// @notice Sense core Divider address\\n    address public immutable divider;\\n\\n    /// @notice Target token to divide\\n    address public immutable target;\\n\\n    /// @notice Underlying for the Target\\n    address public immutable underlying;\\n\\n    /// @notice Issuance fee\\n    uint128 public immutable ifee;\\n\\n    /// @notice adapter params\\n    AdapterParams public adapterParams;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct AdapterParams {\\n        /// @notice Oracle address\\n        address oracle;\\n        /// @notice Token to stake at issuance\\n        address stake;\\n        /// @notice Amount to stake at issuance\\n        uint256 stakeSize;\\n        /// @notice Min maturity (seconds after block.timstamp)\\n        uint256 minm;\\n        /// @notice Max maturity (seconds after block.timstamp)\\n        uint256 maxm;\\n        /// @notice WAD number representing the percentage of the total\\n        /// principal that's set aside for Yield Tokens (e.g. 0.1e18 means that 10% of the principal is reserved).\\n        /// @notice If `0`, it means no principal is set aside for Yield Tokens\\n        uint64 tilt;\\n        /// @notice The number this function returns will be used to determine its access by checking for binary\\n        /// digits using the following scheme:\\u00a0<onRedeem(y/n)><collect(y/n)><combine(y/n)><issue(y/n)>\\n        /// (e.g. 0101 enables `collect` and `issue`, but not `combine`)\\n        uint48 level;\\n        /// @notice 0 for monthly, 1 for weekly\\n        uint16 mode;\\n    }\\n\\n    /* ========== METADATA STORAGE ========== */\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    constructor(\\n        address _divider,\\n        address _target,\\n        address _underlying,\\n        uint128 _ifee,\\n        AdapterParams memory _adapterParams\\n    ) {\\n        divider = _divider;\\n        target = _target;\\n        underlying = _underlying;\\n        ifee = _ifee;\\n        adapterParams = _adapterParams;\\n\\n        name = string(abi.encodePacked(ERC20(_target).name(), \\\" Adapter\\\"));\\n        symbol = string(abi.encodePacked(ERC20(_target).symbol(), \\\"-adapter\\\"));\\n\\n        ERC20(_target).approve(divider, type(uint256).max);\\n        ERC20(_adapterParams.stake).approve(divider, type(uint256).max);\\n    }\\n\\n    /// @notice Loan `amount` target to `receiver`, and takes it back after the callback.\\n    /// @param receiver The contract receiving target, needs to implement the\\n    /// `onFlashLoan(address user, address adapter, uint256 maturity, uint256 amount)` interface.\\n    /// @param amount The amount of target lent.\\n    /// @param data (encoded adapter address, maturity and YT amount the use has sent in)\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address, /* fee */\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool) {\\n        if (Divider(divider).periphery() != msg.sender) revert Errors.OnlyPeriphery();\\n        ERC20(target).safeTransfer(address(receiver), amount);\\n        bytes32 keccak = IERC3156FlashBorrower(receiver).onFlashLoan(msg.sender, target, amount, 0, data);\\n        if (keccak != CALLBACK_SUCCESS) revert Errors.FlashCallbackFailed();\\n        ERC20(target).safeTransferFrom(address(receiver), address(this), amount);\\n        return true;\\n    }\\n\\n    /* ========== REQUIRED VALUE GETTERS ========== */\\n\\n    /// @notice Calculate and return this adapter's Scale value for the current timestamp. To be overriden by child contracts\\n    /// @dev For some Targets, such as cTokens, this is simply the exchange rate, or `supply cToken / supply underlying`\\n    /// @dev For other Targets, such as AMM LP shares, specialized logic will be required\\n    /// @dev This function _must_ return a WAD number representing the current exchange rate\\n    /// between the Target and the Underlying.\\n    /// @return value WAD Scale value\\n    function scale() external virtual returns (uint256);\\n\\n    /// @notice Cached scale value getter\\n    /// @dev For situations where you need scale from a view function\\n    function scaleStored() external view virtual returns (uint256);\\n\\n    /// @notice Returns the current price of the underlying in ETH terms\\n    function getUnderlyingPrice() external view virtual returns (uint256);\\n\\n    /* ========== REQUIRED UTILITIES ========== */\\n\\n    /// @notice Deposits underlying `amount`in return for target. Must be overriden by child contracts\\n    /// @param amount Underlying amount\\n    /// @return amount of target returned\\n    function wrapUnderlying(uint256 amount) external virtual returns (uint256);\\n\\n    /// @notice Deposits target `amount`in return for underlying. Must be overriden by child contracts\\n    /// @param amount Target amount\\n    /// @return amount of underlying returned\\n    function unwrapTarget(uint256 amount) external virtual returns (uint256);\\n\\n    function flashFee(address token, uint256) external view returns (uint256) {\\n        if (token != target) revert Errors.TokenNotSupported();\\n        return 0;\\n    }\\n\\n    function maxFlashLoan(address token) external view override returns (uint256) {\\n        return ERC20(token).balanceOf(address(this));\\n    }\\n\\n    /* ========== OPTIONAL HOOKS ========== */\\n\\n    /// @notice Notification whenever the Divider adds or removes Target\\n    function notify(\\n        address, /* usr */\\n        uint256, /* amt */\\n        bool /* join */\\n    ) public virtual {\\n        return;\\n    }\\n\\n    /// @notice Hook called whenever a user redeems PT\\n    function onRedeem(\\n        uint256, /* uBal */\\n        uint256, /* mscale */\\n        uint256, /* maxscale */\\n        uint256 /* tBal */\\n    ) public virtual {\\n        return;\\n    }\\n\\n    /* ========== PUBLIC STORAGE ACCESSORS ========== */\\n\\n    function getMaturityBounds() external view virtual returns (uint256, uint256) {\\n        return (adapterParams.minm, adapterParams.maxm);\\n    }\\n\\n    function getStakeAndTarget()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        return (target, adapterParams.stake, adapterParams.stakeSize);\\n    }\\n\\n    function mode() external view returns (uint256) {\\n        return adapterParams.mode;\\n    }\\n\\n    function tilt() external view returns (uint256) {\\n        return adapterParams.tilt;\\n    }\\n\\n    function level() external view returns (uint256) {\\n        return adapterParams.level;\\n    }\\n}\\n\",\"keccak256\":\"0xfa71637b4828b14a2b909a820e35e5e390651918f2ee7216830cfcad6115a388\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/external/DateTime.sol\":{\"content\":\"pragma solidity 0.8.11;\\n\\n/// @author Taken from: https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\nlibrary DateTime {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function toDateString(uint256 _timestamp)\\n        internal\\n        pure\\n        returns (\\n            string memory d,\\n            string memory m,\\n            string memory y\\n        )\\n    {\\n        (uint256 year, uint256 month, uint256 day) = timestampToDate(_timestamp);\\n        d = uintToString(day);\\n        m = uintToString(month);\\n        y = uintToString(year);\\n        // append a 0 to numbers < 10 so we should, e.g, 01 instead of just 1\\n        if (day < 10) d = string(abi.encodePacked(\\\"0\\\", d));\\n        if (month < 10) m = string(abi.encodePacked(\\\"0\\\", m));\\n    }\\n\\n    function format(uint256 _timestamp) internal pure returns (string memory datestring) {\\n        string[12] memory months = [\\n            \\\"Jan\\\",\\n            \\\"Feb\\\",\\n            \\\"Mar\\\",\\n            \\\"Apr\\\",\\n            \\\"May\\\",\\n            \\\"June\\\",\\n            \\\"July\\\",\\n            \\\"Aug\\\",\\n            \\\"Sept\\\",\\n            \\\"Oct\\\",\\n            \\\"Nov\\\",\\n            \\\"Dec\\\"\\n        ];\\n        (uint256 year, uint256 month, uint256 day) = timestampToDate(_timestamp);\\n        uint256 last = day % 10;\\n        string memory suffix = \\\"th\\\";\\n        if (day < 11 || day > 20) {\\n            if (last == 1) suffix = \\\"st\\\";\\n            if (last == 2) suffix = \\\"nd\\\";\\n            if (last == 3) suffix = \\\"rd\\\";\\n        }\\n        return string(abi.encodePacked(uintToString(day), suffix, \\\" \\\", months[month - 1], \\\" \\\", uintToString(year)));\\n    }\\n\\n    function getDayOfWeek(uint256 timestamp) internal pure returns (uint256 dayOfWeek) {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    /// Taken from https://stackoverflow.com/questions/47129173/how-to-convert-uint-to-string-in-solidity\\n    function uintToString(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) return \\\"0\\\";\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n}\\n\",\"keccak256\":\"0x143e0eccde997bb161f42af789c33f794f7ddf4574f7e3f0151a2c0f199ada0e\"},\"@sense-finance/v1-core/src/external/FixedMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n/// @title Fixed point arithmetic library\\n/// @author Taken from https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol\\nlibrary FixedMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant RAY = 1e27;\\n\\n    function fmul(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivDown(x, y, baseUnit); // Equivalent to (x * y) / baseUnit rounded down.\\n    }\\n\\n    function fmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function fmulUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivUp(x, y, baseUnit); // Equivalent to (x * y) / baseUnit rounded up.\\n    }\\n\\n    function fmulUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function fdiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivDown(x, baseUnit, y); // Equivalent to (x * baseUnit) / y rounded down.\\n    }\\n\\n    function fdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function fdivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivUp(x, baseUnit, y); // Equivalent to (x * baseUnit) / y rounded up.\\n    }\\n\\n    function fdivUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x96ef1181edb23765121db5f55554d3e44f3fa37352da83bad5ebf65140e80fe7\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/external/flashloan/IERC3156FlashBorrower.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IERC3156FlashBorrower {\\n    /// @dev Receive a flash loan.\\n    /// @param initiator The initiator of the loan.\\n    /// @param token The loan currency.\\n    /// @param amount The amount of tokens lent.\\n    /// @param fee The additional amount of tokens to repay.\\n    /// @param data Arbitrary data structure, intended to contain user-defined parameters.\\n    /// @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xa2007326dfc89668d1864d688373d7e1ee07fee48f605d4f6726224004bdc8e5\"},\"@sense-finance/v1-core/src/external/flashloan/IERC3156FlashLender.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n    /// @dev The amount of currency available to be lent.\\n    /// @param token The loan currency.\\n    /// @return The amount of `token` that can be borrowed.\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /// @dev The fee to be charged for a given loan.\\n    /// @param token The loan currency.\\n    /// @param amount The amount of tokens lent.\\n    /// @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /// @dev Initiate a flash loan.\\n    /// @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n    /// @param token The loan currency.\\n    /// @param amount The amount of tokens lent.\\n    /// @param data Arbitrary data structure, intended to contain user-defined parameters.\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc91333a7ff49db20853c817de2c277a0559a1ee75eb1deeb7d2096a5d1022d61\"},\"@sense-finance/v1-core/src/tokens/Token.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\n\\n// Internal references\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\n\\n/// @title Base Token\\ncontract Token is ERC20, Trust {\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        address _trusted\\n    ) ERC20(_name, _symbol, _decimals) Trust(_trusted) {}\\n\\n    /// @param usr The address to send the minted tokens\\n    /// @param amount The amount to be minted\\n    function mint(address usr, uint256 amount) public requiresTrust {\\n        _mint(usr, amount);\\n    }\\n\\n    /// @param usr The address from where to burn tokens from\\n    /// @param amount The amount to be burned\\n    function burn(address usr, uint256 amount) public requiresTrust {\\n        _burn(usr, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcb8e50d0f9ded712e0db2aa3c5dd889c64b525a0b44b4b2fc6fddcebf092ff10\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/tokens/YT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// Internal references\\nimport { Divider } from \\\"../Divider.sol\\\";\\nimport { Token } from \\\"./Token.sol\\\";\\n\\n/// @title Yield Token\\n/// @notice Strips off excess before every transfer\\ncontract YT is Token {\\n    address public immutable adapter;\\n    address public immutable divider;\\n    uint256 public immutable maturity;\\n\\n    constructor(\\n        address _adapter,\\n        uint256 _maturity,\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        address _divider\\n    ) Token(_name, _symbol, _decimals, _divider) {\\n        adapter = _adapter;\\n        maturity = _maturity;\\n        divider = _divider;\\n    }\\n\\n    function collect() external returns (uint256 _collected) {\\n        return Divider(divider).collect(msg.sender, adapter, maturity, 0, address(0));\\n    }\\n\\n    function transfer(address to, uint256 value) public override returns (bool) {\\n        Divider(divider).collect(msg.sender, adapter, maturity, value, to);\\n        return super.transfer(to, value);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public override returns (bool) {\\n        if (value > 0) Divider(divider).collect(from, adapter, maturity, value, to);\\n        return super.transferFrom(from, to, value);\\n    }\\n}\\n\",\"keccak256\":\"0x3685a54f6852f9c31e893b96277fbdac81f7dece5bb4b98d69c7ca2cd2fd3a0d\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-utils/src/Trust.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.0;\\n\\n/// @notice Ultra minimal authorization logic for smart contracts.\\n/// @author From https://github.com/Rari-Capital/solmate/blob/fab107565a51674f3a3b5bfdaacc67f6179b1a9b/src/auth/Trust.sol\\nabstract contract Trust {\\n    event UserTrustUpdated(address indexed user, bool trusted);\\n\\n    mapping(address => bool) public isTrusted;\\n\\n    constructor(address initialUser) {\\n        isTrusted[initialUser] = true;\\n\\n        emit UserTrustUpdated(initialUser, true);\\n    }\\n\\n    function setIsTrusted(address user, bool trusted) public virtual requiresTrust {\\n        isTrusted[user] = trusted;\\n\\n        emit UserTrustUpdated(user, trusted);\\n    }\\n\\n    modifier requiresTrust() {\\n        require(isTrusted[msg.sender], \\\"UNTRUSTED\\\");\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x2d3887076c81425d3954aea7735aebd9093e3df69c8132b1713fae4a34201d43\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-utils/src/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.4;\\n\\nlibrary Errors {\\n    // Auth\\n    error CombineRestricted();\\n    error IssuanceRestricted();\\n    error NotAuthorized();\\n    error OnlyYT();\\n    error OnlyDivider();\\n    error OnlyPeriphery();\\n    error OnlyPermissionless();\\n    error RedeemRestricted();\\n    error Untrusted();\\n\\n    // Adapters\\n    error TokenNotSupported();\\n    error FlashCallbackFailed();\\n    error SenderNotEligible();\\n    error TargetMismatch();\\n    error TargetNotSupported();\\n\\n    // Divider\\n    error AlreadySettled();\\n    error CollectNotSettled();\\n    error GuardCapReached();\\n    error IssuanceFeeCapExceeded();\\n    error IssueOnSettle();\\n    error NotSettled();\\n\\n    // Input & validations\\n    error AlreadyInitialized();\\n    error DuplicateSeries();\\n    error ExistingValue();\\n    error InvalidAdapter();\\n    error InvalidMaturity();\\n    error InvalidParam();\\n    error NotImplemented();\\n    error OutOfWindowBoundaries();\\n    error SeriesDoesNotExist();\\n    error SwapTooSmall();\\n    error TargetParamsNotSet();\\n    error PoolParamsNotSet();\\n    error PTParamsNotSet();\\n\\n    // Periphery\\n    error FactoryNotSupported();\\n    error FlashBorrowFailed();\\n    error FlashUntrustedBorrower();\\n    error FlashUntrustedLoanInitiator();\\n    error UnexpectedSwapAmount();\\n    error TooMuchLeftoverTarget();\\n\\n    // Fuse\\n    error AdapterNotSet();\\n    error FailedBecomeAdmin();\\n    error FailedAddTargetMarket();\\n    error FailedToAddPTMarket();\\n    error FailedAddLpMarket();\\n    error OracleNotReady();\\n    error PoolAlreadyDeployed();\\n    error PoolNotDeployed();\\n    error PoolNotSet();\\n    error SeriesNotQueued();\\n    error TargetExists();\\n    error TargetNotInFuse();\\n\\n    // Tokens\\n    error MintFailed();\\n    error RedeemFailed();\\n    error TransferFailed();\\n}\\n\",\"keccak256\":\"0x88abffbe0c2a613aba67a04b984762ae0e3b5d0fd44021a1625b5fe53e8749d5\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-utils/src/libs/Levels.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.0;\\n\\nlibrary Levels {\\n    uint256 private constant _INIT_BIT = 0x1;\\n    uint256 private constant _ISSUE_BIT = 0x2;\\n    uint256 private constant _COMBINE_BIT = 0x4;\\n    uint256 private constant _COLLECT_BIT = 0x8;\\n    uint256 private constant _REDEEM_BIT = 0x10;\\n    uint256 private constant _REDEEM_HOOK_BIT = 0x20;\\n\\n    function initRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _INIT_BIT != _INIT_BIT;\\n    }\\n\\n    function issueRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _ISSUE_BIT != _ISSUE_BIT;\\n    }\\n\\n    function combineRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _COMBINE_BIT != _COMBINE_BIT;\\n    }\\n\\n    function collectDisabled(uint256 level) internal pure returns (bool) {\\n        return level & _COLLECT_BIT != _COLLECT_BIT;\\n    }\\n\\n    function redeemRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _REDEEM_BIT != _REDEEM_BIT;\\n    }\\n\\n    function redeemHookDisabled(uint256 level) internal pure returns (bool) {\\n        return level & _REDEEM_HOOK_BIT != _REDEEM_HOOK_BIT;\\n    }\\n}\\n\",\"keccak256\":\"0x6c71e17beb73fca7577fb8868086159303eaecb1b397a446e8891b42f73fd502\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60c0604052600180556002805460ff60b01b1916600160b01b1790553480156200002857600080fd5b50604051620050f6380380620050f68339810160408190526200004b91620000dc565b3360008181526020818152604091829020805460ff19166001908117909155915191825282917fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a2506002805460ff191690556001600160a01b039182166080521660a05262000114565b80516001600160a01b0381168114620000d757600080fd5b919050565b60008060408385031215620000f057600080fd5b620000fb83620000bf565b91506200010b60208401620000bf565b90509250929050565b60805160a051614fa76200014f6000396000818161041e01526111060152600081816104b40152818161277f01526127a70152614fa76000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c806372f7a0301161012a578063a4141638116100bd578063c9eb4f981161008c578063d10eb4b911610071578063d10eb4b914610723578063dfe5ef4814610759578063f2d63d0e1461076c57600080fd5b8063c9eb4f98146106fd578063d10c16a91461071057600080fd5b8063a414163814610669578063aeb229341461067c578063ba89bebd1461068f578063c5a067e3146106a257600080fd5b806395197d30116100f957806395197d30146105d457806396d648791461060d578063a1256f9f14610630578063a131ad741461065657600080fd5b806372f7a0301461055957806375708a591461058057806377aace1a146105935780637c917038146105ab57600080fd5b8063332f6465116101a2578063574e779511610171578063574e7795146105095780635c975abb1461051c5780635fa0cc0a1461053357806360d54d411461054657600080fd5b8063332f64651461049c5780633ad10beb146104af5780633deb6cae146103da5780633e3972ee146104d657600080fd5b806316c38b3c116101de57806316c38b3c146104065780631b3d6e87146104195780632b83cccd146104585780632f9cd8541461046b57600080fd5b80630891d30a146102105780630cbe8db1146103195780630fe0554d146103da5780631393916a146103f1575b600080fd5b6102a561021e3660046147a0565b6006602081815260009384526040808520909152918352912080546001820154600283015460038401546004850154600586015495909601546001600160a01b0380861697740100000000000000000000000000000000000000009687900465ffffffffffff1697828716979096046bffffffffffffffffffffffff169591909416939189565b604080516001600160a01b039a8b16815265ffffffffffff90991660208a0152968916968801969096526bffffffffffffffffffffffff909416606087015295909116608085015260a084015260c083019390935260e0820192909252610100810191909152610120015b60405180910390f35b6103936103273660046147cc565b6005602052600090815260409020805460018201546002909201547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808316937f010000000000000000000000000000000000000000000000000000000000000090930460ff1692911684565b604080517effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff958616815293151560208501528301919091529091166060820152608001610310565b6103e3612a3081565b604051908152602001610310565b6104046103ff3660046147fe565b61077a565b005b610404610414366004614833565b61085a565b6104407f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610310565b6103e361046636600461484e565b6108d1565b6103e3610479366004614883565b600760209081526000938452604080852082529284528284209052825290205481565b6104046104aa3660046147fe565b610da4565b6104407f000000000000000000000000000000000000000000000000000000000000000081565b6104e96104e4366004614883565b610e11565b604080516001600160a01b03938416815292909116602083015201610310565b6104406105173660046147a0565b61146c565b60025460ff165b6040519015158152602001610310565b6104046105413660046147a0565b61149c565b6104046105543660046147cc565b61154b565b60025461052390760100000000000000000000000000000000000000000000900460ff1681565b61040461058e366004614833565b6116d7565b6002546104409061010090046001600160a01b031681565b6104406105b93660046148c5565b6004602052600090815260409020546001600160a01b031681565b6103e36105e23660046147a0565b6001600160a01b03919091166000908152600660209081526040808320938352929052206005015490565b61052361061b3660046147cc565b60006020819052908152604090205460ff1681565b600254610523907501000000000000000000000000000000000000000000900460ff1681565b6103e36106643660046148de565b6117ac565b6104046106773660046147a0565b611973565b61040461068a3660046147cc565b611d59565b6103e361069d36600461484e565b611e21565b6003546106cd907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681565b6040517effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9091168152602001610310565b61040461070b366004614833565b612342565b61040461071e366004614989565b612418565b6104406107313660046147a0565b6001600160a01b03918216600090815260066020908152604080832093835292905220541690565b6103e361076736600461484e565b61289e565b6103e366b1a2bc2ec5000081565b3360009081526020819052604090205460ff166107de5760405162461bcd60e51b815260206004820152600960248201527f554e54525553544544000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b0382166000818152602081815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d98691015b60405180910390a25050565b3360009081526020819052604090205460ff166108b95760405162461bcd60e51b815260206004820152600960248201527f554e54525553544544000000000000000000000000000000000000000000000060448201526064016107d5565b806108c9576108c6613159565b50565b6108c6613213565b60006001546001146109255760405162461bcd60e51b815260206004820152600a60248201527f5245454e5452414e43590000000000000000000000000000000000000000000060448201526064016107d5565b600260015561093660025460ff1690565b156109835760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016107d5565b6001600160a01b03841660009081526006602090815260408083208684529091529020600501546109e0576040517fba329a9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0384166000908152600560205260409020600201547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16610a2b816010908116141590565b8015610a3f5750336001600160a01b038616145b15610a76576040517f9ad6d35d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038581166000908152600660209081526040808320888452909152908190205490517f9dc29fac00000000000000000000000000000000000000000000000000000000815233600482015260248101869052911690639dc29fac90604401600060405180830381600087803b158015610af557600080fd5b505af1158015610b09573d6000803e3d6000fd5b505050506001600160a01b0385166000908152600660209081526040808320878452909152812060010154610b6c907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16670de0b6b3a7640000614a4e565b6001600160a01b03871660009081526006602081815260408084208a8552909152909120908101546005909101549192508291610ba8916132b9565b10610bef576001600160a01b0386166000908152600660209081526040808320888452909152902060050154610bde8286614a65565b610be89190614ad1565b9250610c23565b6001600160a01b03861660009081526006602081815260408084208985529091529091200154610c209085906132b9565b92505b60208083161415610cda576001600160a01b03861660008181526006602081815260408084208a855290915291829020600581015491015491517f14282f580000000000000000000000000000000000000000000000000000000081526004810188905260248101919091526044810191909152606481018590526314282f5890608401600060405180830381600087803b158015610cc157600080fd5b505af1158015610cd5573d6000803e3d6000fd5b505050505b610d53863385896001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d429190614ae5565b6001600160a01b03169291906132d5565b84866001600160a01b03167f2d0320e3c19b591925fca7a3012a905faf26dead7f53eb9c4c72744f04bde98085604051610d8f91815260200190565b60405180910390a35050600180559392505050565b3360009081526020819052604090205460ff16610e035760405162461bcd60e51b815260206004820152600960248201527f554e54525553544544000000000000000000000000000000000000000000000060448201526064016107d5565b610e0d8282613381565b5050565b600080600154600114610e665760405162461bcd60e51b815260206004820152600a60248201527f5245454e5452414e43590000000000000000000000000000000000000000000060448201526064016107d5565b6002600155610e7760025460ff1690565b15610ec45760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016107d5565b60025461010090046001600160a01b03163314610f0d576040517ffb02114900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0385166000908152600560205260409020547f0100000000000000000000000000000000000000000000000000000000000000900460ff16610f82576040517ffbf66df100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0380861660009081526006602090815260408083208884529091529020541615610fdf576040517fd309d88400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610fe98585613681565b61101f576040517fc7a682c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806000876001600160a01b03166327b327d06040518163ffffffff1660e01b8152600401606060405180830381865afa158015611062573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110869190614b02565b6001600160a01b038b8116600081815260056020526040908190205490517fafd3adb000000000000000000000000000000000000000000000000000000000815260048101929092527effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff166024820152604481018c905293965091945092507f0000000000000000000000000000000000000000000000000000000000000000169063afd3adb09060640160408051808303816000875af115801561114e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111729190614b45565b80955081965050506000886001600160a01b031663f51e181a6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156111bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e09190614b7f565b905085600660008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008a815260200190815260200160002060000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555042600660008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008a815260200190815260200160002060000160146101000a81548165ffffffffffff021916908365ffffffffffff16021790555084600660008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008a815260200190815260200160002060010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550886001600160a01b031663c39a3b296040518163ffffffff1660e01b8152600401602060405180830381865afa158015611338573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135c9190614b7f565b6001600160a01b038a811660009081526006602081815260408084208e85529091529091206001810180548416740100000000000000000000000000000000000000006bffffffffffffffffffffffff9690961695909502949094179093556002830180547fffffffffffffffffffffffff0000000000000000000000000000000000000000168b84161790556004830184905591909101829055611405908416338b856132d5565b604080516001600160a01b038b811682528881166020830152878116828401529151868316928a16918b917f1f35e8bec0a1a6f4c72b2ae05a4b8fdc78d03eab2dc742fab6ae238201c8189b9181900360600190a450506001805550919590945092505050565b6001600160a01b038083166000908152600660209081526040808320858452909152902060010154165b92915050565b3360009081526020819052604090205460ff166114fb5760405162461bcd60e51b815260206004820152600960248201527f554e54525553544544000000000000000000000000000000000000000000000060448201526064016107d5565b6001600160a01b03821660008181526005602052604090819020600101839055517ff16a3457e9b9a5c31fda410fd95ed37234eafeb546daeb8a99f8895f94bf8fee9061084e9084815260200190565b60025460ff161561159e5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016107d5565b6002547501000000000000000000000000000000000000000000900460ff161580156115da575060025461010090046001600160a01b03163314155b15611611576040517f8719352c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0381166000908152600560205260409020547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff161580159061169557506001600160a01b0381166000908152600560205260409020547f0100000000000000000000000000000000000000000000000000000000000000900460ff16155b156116cc576040517ffbf66df100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108c6816001613381565b3360009081526020819052604090205460ff166117365760405162461bcd60e51b815260206004820152600960248201527f554e54525553544544000000000000000000000000000000000000000000000060448201526064016107d5565b600280547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff167501000000000000000000000000000000000000000000831515908102919091179091556040517f44a4c963afeb7bcec3494bbd13068371938a27639a9a9a7bac56c11777fd410990600090a250565b60006001546001146118005760405162461bcd60e51b815260206004820152600a60248201527f5245454e5452414e43590000000000000000000000000000000000000000000060448201526064016107d5565b600260019081556001600160a01b0380871660009081526006602090815260408083208984529091529020909101548691869116331461186c576040517fb114ba9800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025460ff16156118bf5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016107d5565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038916600482015260009033906370a0823190602401602060405180830381865afa15801561191f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119439190614b7f565b90506119628989898460008b1161195a578561195c565b8a5b8a613811565b600180559998505050505050505050565b6001546001146119c55760405162461bcd60e51b815260206004820152600a60248201527f5245454e5452414e43590000000000000000000000000000000000000000000060448201526064016107d5565b60026001556119d660025460ff1690565b15611a235760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016107d5565b6001600160a01b0382166000908152600560205260409020547f0100000000000000000000000000000000000000000000000000000000000000900460ff16611a98576040517ffbf66df100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03808316600090815260066020908152604080832085845290915290205416611af4576040517f1760174300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216600090815260066020908152604080832084845290915290206005015415611b52576040517f560ff90000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611b5c8282614100565b611b92576040517f852de68200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000826001600160a01b031663f51e181a6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf89190614b7f565b6001600160a01b0384166000908152600660208181526040808420878552909152909120600581018390550154909150811115611c58576001600160a01b0383166000908152600660208181526040808420868552909152909120018190555b6000806000856001600160a01b03166327b327d06040518163ffffffff1660e01b8152600401606060405180830381865afa158015611c9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbf9190614b02565b6001600160a01b03808a1660009081526006602090815260408083208c84529091529020600301549396509194509250611d009190851690889033906132d5565b611d156001600160a01b0383168733846132d5565b604051339086906001600160a01b038916907fd1426f892f3cce4b1085d051aa4be26da2192d8db075f55bc75f185d38ea624b90600090a450506001805550505050565b3360009081526020819052604090205460ff16611db85760405162461bcd60e51b815260206004820152600960248201527f554e54525553544544000000000000000000000000000000000000000000000060448201526064016107d5565b600280547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038416908102919091179091556040517f1deeec14e500a86432231bf144d0a12a439494bd11662a44a7e49d868451e74b90600090a250565b6000600154600114611e755760405162461bcd60e51b815260206004820152600a60248201527f5245454e5452414e43590000000000000000000000000000000000000000000060448201526064016107d5565b6002600155611e8660025460ff1690565b15611ed35760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016107d5565b6001600160a01b0384166000908152600560205260409020547f0100000000000000000000000000000000000000000000000000000000000000900460ff16611f48576040517ffbf66df100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03808516600090815260066020908152604080832087845290915290205416611fa4576040517f1760174300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0384166000908152600560205260409020600201547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16611fef816004908116141590565b80156120045750336001600160a01b03861614155b1561203b576040517f66bed65200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038581166000908152600660209081526040808320888452909152908190205490517f9dc29fac00000000000000000000000000000000000000000000000000000000815233600482015260248101869052911690639dc29fac90604401600060405180830381600087803b1580156120ba57600080fd5b505af11580156120ce573d6000803e3d6000fd5b5050505060006120e333878787886000613811565b6001600160a01b038716600090815260066020908152604080832089845290915290206005015490915080151580612216576001600160a01b0388811660009081526006602090815260408083208b8452909152908190206001015490517f9dc29fac00000000000000000000000000000000000000000000000000000000815233600482015260248101899052911690639dc29fac90604401600060405180830381600087803b15801561219757600080fd5b505af11580156121ab573d6000803e3d6000fd5b50505050600880851614156121eb576001600160a01b03881660009081526007602090815260408083208a84528252808320338452909152902054612213565b6001600160a01b03881660009081526006602090815260408083208a84529091529020600401545b91505b61222086836132b9565b94506122668833878b6001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d1e573d6000803e3d6000fd5b806122ec576040517fb484972a00000000000000000000000000000000000000000000000000000000815233600482015260248101869052600060448201526001600160a01b0389169063b484972a90606401600060405180830381600087803b1580156122d357600080fd5b505af11580156122e7573d6000803e3d6000fd5b505050505b60405194830180865294339088906001600160a01b038b16907fc93ef223012fd8a42ae087bcd98f3ea6c91a3596f56fb683451dda1abc5b695c9060200160405180910390a45050600180555090949350505050565b3360009081526020819052604090205460ff166123a15760405162461bcd60e51b815260206004820152600960248201527f554e54525553544544000000000000000000000000000000000000000000000060448201526064016107d5565b600280547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16760100000000000000000000000000000000000000000000831515908102919091179091556040517fdbcdd9941cbf70eec96e3ddaf2d230966f8224f1b7ec8af263cb8ca4803dfe6f90600090a250565b3360009081526020819052604090205460ff166124775760405162461bcd60e51b815260206004820152600960248201527f554e54525553544544000000000000000000000000000000000000000000000060448201526064016107d5565b6001600160a01b0380881660009081526006602090815260408083208a8452909152902054166124d3576040517f1760174300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612a306124e28189614b98565b6124ec9190614b98565b9050804211612527576040517f852de68200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b848110156125c45783838281811061254457612544614bb0565b6001600160a01b038c1660009081526007602090815260408083208e845282528220920293909301359290915088888581811061258357612583614bb0565b905060200201602081019061259891906147cc565b6001600160a01b03168152602081019190915260400160002055806125bc81614bdf565b91505061252a565b50851561284a576001600160a01b0388811660009081526006602081815260408084208c855280835281852082516101208101845281548089168252740100000000000000000000000000000000000000009081900465ffffffffffff16828701526001830154808a16958301959095529093046bffffffffffffffffffffffff16606084015260028101549096166080830152600386015460a0830152600486015460c083015260058601805460e084015295909301546101008201908152938c905291905291889055518711156126c0576001600160a01b03891660009081526006602081815260408084208c8552909152909120018790555b60008060008b6001600160a01b03166327b327d06040518163ffffffff1660e01b8152600401606060405180830381865afa158015612703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127279190614b02565b6001600160a01b038f166000908152600560205260408120549396509194509250907f0100000000000000000000000000000000000000000000000000000000000000900460ff1661277d57846080015161279f565b7f00000000000000000000000000000000000000000000000000000000000000005b90506127e58d7f00000000000000000000000000000000000000000000000000000000000000008760a00151876001600160a01b03166132d5909392919063ffffffff16565b6000600660008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020600301819055506128448d8284866001600160a01b03166132d5909392919063ffffffff16565b50505050505b86886001600160a01b03167f9f7c9b961af682670e128c89a9a1d940800d7c3d7693ab5608f21dd2c04d740f888888888860405161288c959493929190614c18565b60405180910390a35050505050505050565b60006001546001146128f25760405162461bcd60e51b815260206004820152600a60248201527f5245454e5452414e43590000000000000000000000000000000000000000000060448201526064016107d5565b600260015561290360025460ff1690565b156129505760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016107d5565b6001600160a01b0384166000908152600560205260409020547f0100000000000000000000000000000000000000000000000000000000000000900460ff166129c5576040517ffbf66df100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03808516600090815260066020908152604080832087845290915290205416612a21576040517f1760174300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038416600090815260066020908152604080832086845290915290206005015415612a7f576040517f0de7115500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0384166000908152600560205260409020600201547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16612aca816002908116141590565b8015612adf5750336001600160a01b03861614155b15612b16576040517f8159f88400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000856001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7a9190614ae5565b90506000866001600160a01b031663b8c15a9f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be09190614cbc565b6fffffffffffffffffffffffffffffffff16905066b1a2bc2ec50000811115612c35576040517f2e68f33400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612c41868361418f565b6001600160a01b03891660009081526006602090815260408083208b84529091528120600301805483019055909150612c7a8288614a4e565b600254909150760100000000000000000000000000000000000000000000900460ff168015612d4457506001600160a01b03898116600081815260056020526040908190206001015490517f70a082310000000000000000000000000000000000000000000000000000000081526004810192909252918991908716906370a0823190602401602060405180830381865afa158015612d1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d419190614b7f565b01115b15612d7b576040517f6493914000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fb484972a00000000000000000000000000000000000000000000000000000000815233600482015260248101829052600160448201526001600160a01b038a169063b484972a90606401600060405180830381600087803b158015612de357600080fd5b505af1158015612df7573d6000803e3d6000fd5b5060009250505060088087161415612e7257896001600160a01b031663f51e181a6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612e49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e6d9190614b7f565b612e9a565b6001600160a01b038a1660009081526006602090815260408083208c84529091529020600401545b9050612ea6828261418f565b6001600160a01b038b1660009081526007602090815260408083208d8452825280832033845290915290205490975015612f91576001600160a01b038a811660009081526006602090815260408083208d8452909152908190206001015490517f70a08231000000000000000000000000000000000000000000000000000000008152336004820152612f8c928d928d929116906370a0823190602401602060405180830381865afa158015612f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f849190614b7f565b8a33866141a4565b612f93565b805b6001600160a01b038b811660008181526007602090815260408083208f845282528083203380855290835281842096909655928252600681528282208e835290528190205490517f40c10f190000000000000000000000000000000000000000000000000000000081526004810193909352602483018a905216906340c10f1990604401600060405180830381600087803b15801561303157600080fd5b505af1158015613045573d6000803e3d6000fd5b505050506001600160a01b038a811660009081526006602090815260408083208d8452909152908190206001015490517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018a90529116906340c10f1990604401600060405180830381600087803b1580156130cb57600080fd5b505af11580156130df573d6000803e3d6000fd5b506130f9925050506001600160a01b038616338c8b6132d5565b336001600160a01b0316898b6001600160a01b03167ff75041e6352580ba937fde3a7ff5ff99bd178f75ac104184f85e3abbaaa44fef8a60405161313f91815260200190565b60405180910390a450506001805550929695505050505050565b60025460ff166131ab5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016107d5565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60025460ff16156132665760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016107d5565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586131f63390565b60006132ce83670de0b6b3a764000084614211565b9392505050565b60006040517f23b872dd0000000000000000000000000000000000000000000000000000000081528460048201528360248201528260448201526020600060648360008a5af13d15601f3d116001600051141617169150508061337a5760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c454400000000000000000000000060448201526064016107d5565b5050505050565b6001600160a01b038216600090815260056020908152604091829020825160808101845281547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80821683527f010000000000000000000000000000000000000000000000000000000000000090910460ff16151593820184905260018301549482019490945260029091015490921660608301528215151415613450576040517fe2be007400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8115801560208301528290613485575080517effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16155b1561353757600380546000906134bb907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16614cee565b82547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9182166101009390930a8381029202191617909155808252600090815260046020526040902080546001600160a01b0385167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790555b826001600160a01b0316636fd5ae156040518163ffffffff1660e01b8152600401602060405180830381865afa158015613575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135999190614b7f565b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff908116606083019081526001600160a01b038516600081815260056020908152604080832087519288015115157f0100000000000000000000000000000000000000000000000000000000000000029287169283178155818801516001820155945160029095018054959096167fff000000000000000000000000000000000000000000000000000000000000009590951694909417909455915185151593927f0a8660585b632de44cbf81e54e8c01c5bbd8737072677676865a86948c57975991a4505050565b6000806000846001600160a01b03166364c56e3c6040518163ffffffff1660e01b81526004016040805180830381865afa1580156136c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136e79190614d2d565b90925090506136f68242614b98565b84108061370b57506137088142614b98565b84115b1561371b57600092505050611496565b60008060008061372a88614230565b9550955095509550505082600014158061374357508115155b8061374d57508015155b156137615760009650505050505050611496565b6000896001600160a01b031663295a52126040518163ffffffff1660e01b8152600401602060405180830381865afa1580156137a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c59190614b7f565b9050806137de5784600114975050505050505050611496565b8060011415613801576137f0896142a4565b600114975050505050505050611496565b5060009998505050505050505050565b6001600160a01b03808616600090815260066020908152604080832088845290915281205490911661386f576040517f1760174300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0386166000908152600560205260409020547f0100000000000000000000000000000000000000000000000000000000000000900460ff161580156138df57506001600160a01b0386166000908152600660209081526040808320888452909152902060050154155b15613916576040517ffbf66df100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0386811660008181526006602081815260408084208b8552825280842081516101208101835281548089168252740100000000000000000000000000000000000000009081900465ffffffffffff16828601526001830154808a1683860152046bffffffffffffffffffffffff16606082015260028083015489166080830152600383015460a0830152600483015460c083015260058084015460e08401529290950154610100820152868652600784528286208d87528452828620978f1686529683528185205495855290915290912001547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811690600890811614613a83576001600160a01b03891660009081526006602090815260408083208b845290915290206005015415613a77576001600160a01b03891660009081526006602090815260408083208b84529091529020600401549150613a83565b600093505050506140f6565b6001600160a01b03891660009081526006602090815260408083208b845290915290206005015415613ac057613abb8a8a8a8a6142d8565b613c1d565b613acc612a3089614b98565b421115613b05576040517f1c221a6900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000896001600160a01b031663f51e181a6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015613b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b6b9190614b7f565b9050836101000151811115613bb75761010084018190526001600160a01b03808b1660009081526007602090815260408083208d84528252808320938f16835292905220819055613c1b565b836101000151600760008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008b815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020819055505b505b6000613c37846101000151896145d490919063ffffffff16565b90506000613c4589856132b9565b9050818111613c55576000613c59565b8181035b9550613c9f8b8d888e6001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d1e573d6000803e3d6000fd5b6040517fb484972a0000000000000000000000000000000000000000000000000000000081526001600160a01b038d8116600483015260248201889052600060448301528c169063b484972a90606401600060405180830381600087803b158015613d0957600080fd5b505af1158015613d1d573d6000803e3d6000fd5b505050506001600160a01b03871615613f605760408086015190517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03898116600483015260009216906370a0823190602401602060405180830381865afa158015613d96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dba9190614b7f565b905060008111613dcf57856101000151613de2565b613de28c8c838c8c8b61010001516141a4565b600760008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d815260200190815260200160002060008a6001600160a01b03166001600160a01b03168152602001908152602001600020819055506000613e598761010001518b6132b990919063ffffffff16565b90508c6001600160a01b031663b484972a8f8360006040518463ffffffff1660e01b8152600401613eaa939291906001600160a01b0393909316835260208301919091521515604082015260600190565b600060405180830381600087803b158015613ec457600080fd5b505af1158015613ed8573d6000803e3d6000fd5b505050508c6001600160a01b031663b484972a8a8360016040518463ffffffff1660e01b8152600401613f2b939291906001600160a01b0393909316835260208301919091521515604082015260600190565b600060405180830381600087803b158015613f4557600080fd5b505af1158015613f59573d6000803e3d6000fd5b5050505050505b84600660008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548165ffffffffffff021916908365ffffffffffff16021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160010160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060808201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a0820151816003015560c0820151816004015560e082015181600501556101008201518160060155905050898b6001600160a01b03167f8f0c3d4726e2d22ccf850efced91f2d0c1bea40229449223d795a6cff3276236886040516140e891815260200190565b60405180910390a350505050505b9695505050505050565b600080612a306141108185614b98565b61411a9190614b98565b6001600160a01b03858116600090815260066020908152604080832088845290915290206002015491925016331415614170574261415a612a3085614a4e565b111580156141685750428110155b915050611496565b4261417d612a3085614b98565b10801561416857504211159050611496565b60006132ce8383670de0b6b3a7640000614211565b60006142066141b385846132b9565b6001600160a01b03808a1660009081526007602090815260408083208c84528252808320938916835292905220546141ec9088906132b9565b6141f69190614b98565b6142008688614b98565b906132b9565b979650505050505050565b82820281151584158583048514171661422957600080fd5b0492915050565b6000808080808061424c6142476201518089614ad1565b6145e9565b9197509550935060006142626201518089614d51565b9050614270610e1082614ad1565b935061427e610e1082614d51565b905061428b603c82614ad1565b9250614298603c82614d51565b91505091939550919395565b6000806142b46201518084614ad1565b905060076142c3826003614b98565b6142cd9190614d51565b6132ce906001614b98565b6001600160a01b038381166000908152600660209081526040808320868452909152908190206001015490517f9dc29fac000000000000000000000000000000000000000000000000000000008152868316600482015260248101849052911690639dc29fac90604401600060405180830381600087803b15801561435c57600080fd5b505af1158015614370573d6000803e3d6000fd5b505050506001600160a01b038316600090815260066020908152604080832085845290915281206001015481906143d5907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16670de0b6b3a7640000614a4e565b6001600160a01b0386166000908152600660208181526040808420898552909152909120908101546005909101549192508291614411916132b9565b106144d2576001600160a01b03851660009081526006602090815260408083208784529091529020600501546144478285614a65565b6144519190614ad1565b6001600160a01b038616600090815260066020818152604080842089855290915290912001546144829085906132b9565b61448c9190614a4e565b91506144d2858784886001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d1e573d6000803e3d6000fd5b6001600160a01b0385166000818152600660208181526040808420898552909152909120015463b484972a90889061450b9087906145d4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015260006044820152606401600060405180830381600087803b15801561457057600080fd5b505af1158015614584573d6000803e3d6000fd5b5050505083856001600160a01b03167f8faabbddb6c4302d219d23d550839874e08536d5b8d2522f3ffa1e2ca054896e846040516145c491815260200190565b60405180910390a3505050505050565b60006132ce83670de0b6b3a76400008461475d565b60008080838162253d8c6146008362010bd9614d65565b61460a9190614d65565b9050600062023ab161461d836004614dd9565b6146279190614e95565b905060046146388262023ab1614dd9565b614643906003614d65565b61464d9190614e95565b6146579083614efd565b9150600062164b0961466a846001614d65565b61467690610fa0614dd9565b6146809190614e95565b90506004614690826105b5614dd9565b61469a9190614e95565b6146a49084614efd565b6146af90601f614d65565b9250600061098f6146c1856050614dd9565b6146cb9190614e95565b9050600060506146dd8361098f614dd9565b6146e79190614e95565b6146f19086614efd565b90506146fe600b83614e95565b945061470b85600c614dd9565b614716836002614d65565b6147209190614efd565b9150848361472f603187614efd565b61473a906064614dd9565b6147449190614d65565b61474e9190614d65565b9a919950975095505050505050565b82820281151584158583048514171661477557600080fd5b6001826001830304018115150290509392505050565b6001600160a01b03811681146108c657600080fd5b600080604083850312156147b357600080fd5b82356147be8161478b565b946020939093013593505050565b6000602082840312156147de57600080fd5b81356132ce8161478b565b803580151581146147f957600080fd5b919050565b6000806040838503121561481157600080fd5b823561481c8161478b565b915061482a602084016147e9565b90509250929050565b60006020828403121561484557600080fd5b6132ce826147e9565b60008060006060848603121561486357600080fd5b833561486e8161478b565b95602085013595506040909401359392505050565b60008060006060848603121561489857600080fd5b83356148a38161478b565b92506020840135915060408401356148ba8161478b565b809150509250925092565b6000602082840312156148d757600080fd5b5035919050565b600080600080600060a086880312156148f657600080fd5b85356149018161478b565b945060208601356149118161478b565b93506040860135925060608601359150608086013561492f8161478b565b809150509295509295909350565b60008083601f84011261494f57600080fd5b50813567ffffffffffffffff81111561496757600080fd5b6020830191508360208260051b850101111561498257600080fd5b9250929050565b600080600080600080600060a0888a0312156149a457600080fd5b87356149af8161478b565b96506020880135955060408801359450606088013567ffffffffffffffff808211156149da57600080fd5b6149e68b838c0161493d565b909650945060808a01359150808211156149ff57600080fd5b50614a0c8a828b0161493d565b989b979a50959850939692959293505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015614a6057614a60614a1f565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614a9d57614a9d614a1f565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082614ae057614ae0614aa2565b500490565b600060208284031215614af757600080fd5b81516132ce8161478b565b600080600060608486031215614b1757600080fd5b8351614b228161478b565b6020850151909350614b338161478b565b80925050604084015190509250925092565b60008060408385031215614b5857600080fd5b8251614b638161478b565b6020840151909250614b748161478b565b809150509250929050565b600060208284031215614b9157600080fd5b5051919050565b60008219821115614bab57614bab614a1f565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c1157614c11614a1f565b5060010190565b85815260606020808301829052908201859052600090869060808401835b88811015614c64578335614c498161478b565b6001600160a01b031682529282019290820190600101614c36565b5084810360408601528581527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff861115614c9d57600080fd5b8560051b92508287838301376000920101908152979650505050505050565b600060208284031215614cce57600080fd5b81516fffffffffffffffffffffffffffffffff811681146132ce57600080fd5b60007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80831681811415614d2357614d23614a1f565b6001019392505050565b60008060408385031215614d4057600080fd5b505080516020909101519092909150565b600082614d6057614d60614aa2565b500690565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615614d9f57614d9f614a1f565b827f8000000000000000000000000000000000000000000000000000000000000000038412811615614dd357614dd3614a1f565b50500190565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600084136000841385830485118282161615614e1a57614e1a614a1f565b7f80000000000000000000000000000000000000000000000000000000000000006000871286820588128184161615614e5557614e55614a1f565b60008712925087820587128484161615614e7157614e71614a1f565b87850587128184161615614e8757614e87614a1f565b505050929093029392505050565b600082614ea457614ea4614aa2565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f800000000000000000000000000000000000000000000000000000000000000083141615614ef857614ef8614a1f565b500590565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615614f3757614f37614a1f565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615614f6b57614f6b614a1f565b5050039056fea26469706673582212205013288679d834e7dd7f53ec3ad03751cd9fc5c9b725ea6d025ca682f88fec4664736f6c634300080b0033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "fedealconada + jparklev",
    "kind": "dev",
    "methods": {
      "addAdapter(address)": {
        "details": "when permissionless is disabled, only the Periphery can onboard adaptersafter permissionless is enabled, anyone can onboard adapters",
        "params": {
          "adapter": "Adapter's address"
        }
      },
      "backfillScale(address,uint256,uint256,address[],uint256[])": {
        "params": {
          "_lscales": "Values to set on lscales mapping",
          "_usrs": "Values to set on lscales mapping",
          "adapter": "Adapter's address",
          "maturity": "Maturity date for the Series",
          "mscale": "Value to set as the Series' Scale value at maturity"
        }
      },
      "combine(address,uint256,uint256)": {
        "details": "Explicitly burns YTs before maturity, and implicitly does it at/after maturity through `_collect()`",
        "params": {
          "adapter": "Adapter address for the Series",
          "maturity": "Maturity date for the Series",
          "uBal": "Balance of PT and YT to burn"
        }
      },
      "initSeries(address,uint256,address)": {
        "details": "Deploys two ERC20 contracts, one for PTs and the other one for YTsTransfers some fixed amount of stake asset to this contract",
        "params": {
          "adapter": "Adapter to associate with the Series",
          "maturity": "Maturity date for the new Series, in units of unix time",
          "sponsor": "Sponsor of the Series that puts up a token stake and receives the issuance fees"
        }
      },
      "issue(address,uint256,uint256)": {
        "details": "The balance of PTs and YTs minted will be the same value in units of underlying (less fees)",
        "params": {
          "adapter": "Adapter address for the Series",
          "maturity": "Maturity date for the Series [unix time]",
          "tBal": "Balance of Target to deposit"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "redeem(address,uint256,uint256)": {
        "details": "The balance of redeemable Target is a function of the change in Scale",
        "params": {
          "adapter": "Adapter address for the Series",
          "maturity": "Maturity date for the Series",
          "uBal": "Amount of PT to burn, which should be equivalent to the amount of Underlying owed to the caller"
        }
      },
      "setAdapter(address,bool)": {
        "params": {
          "adapter": "Adapter's address",
          "isOn": "Flag setting this adapter to enabled or disabled"
        }
      },
      "setGuard(address,uint256)": {
        "params": {
          "adapter": "Adapter address",
          "cap": "The max target that can be deposited on the Adapter"
        }
      },
      "setGuarded(bool)": {
        "params": {
          "_guarded": "bool"
        }
      },
      "setPaused(bool)": {
        "params": {
          "_paused": "boolean"
        }
      },
      "setPeriphery(address)": {
        "params": {
          "_periphery": "Target address"
        }
      },
      "setPermissionless(bool)": {
        "params": {
          "_permissionless": "bool"
        }
      },
      "settleSeries(address,uint256)": {
        "details": "The Series' sponsor has a grace period where only they can settle the SeriesAfter that, the reward becomes MEV",
        "params": {
          "adapter": "Adapter to associate with the Series",
          "maturity": "Maturity date for the new Series"
        }
      }
    },
    "title": "Sense Divider: Divide Assets in Two",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Backfilled(address,uint256,uint256,address[],uint256[])": {
        "notice": "Admin"
      },
      "GuardedChanged(bool)": {
        "notice": "*----* misc"
      },
      "Issued(address,uint256,uint256,address)": {
        "notice": "-***- middle"
      },
      "SeriesInitialized(address,uint256,address,address,address,address)": {
        "notice": "Series lifecycle *---- beginning"
      },
      "SeriesSettled(address,uint256,address)": {
        "notice": "----* end"
      }
    },
    "kind": "user",
    "methods": {
      "ISSUANCE_FEE_CAP()": {
        "notice": "5% issuance fee cap"
      },
      "SETTLEMENT_WINDOW()": {
        "notice": "Buffer after the sponsor window in which anyone can settle the Series"
      },
      "SPONSOR_WINDOW()": {
        "notice": "Buffer before and after the actual maturity in which only the sponsor can settle the Series"
      },
      "adapterAddresses(uint256)": {
        "notice": "adapter ID -> adapter address"
      },
      "adapterCounter()": {
        "notice": "Number of adapters (including turned off)"
      },
      "adapterMeta(address)": {
        "notice": "adapter data"
      },
      "addAdapter(address)": {
        "notice": "Enable an adapter"
      },
      "backfillScale(address,uint256,uint256,address[],uint256[])": {
        "notice": "Backfill a Series' Scale value at maturity if keepers failed to settle it"
      },
      "combine(address,uint256,uint256)": {
        "notice": "Reconstitute Target by burning PT and YT"
      },
      "cup()": {
        "notice": "Sense community multisig"
      },
      "guarded()": {
        "notice": "Guarded launch flag"
      },
      "initSeries(address,uint256,address)": {
        "notice": "Initializes a new Series"
      },
      "issue(address,uint256,uint256)": {
        "notice": "Mint Principal & Yield Tokens of a specific Series"
      },
      "lscales(address,uint256,address)": {
        "notice": "adapter -> maturity -> user -> lscale (last scale)"
      },
      "permissionless()": {
        "notice": "Permissionless flag"
      },
      "pt(address,uint256)": {
        "notice": "Returns address of Principal Token"
      },
      "redeem(address,uint256,uint256)": {
        "notice": "Burn PT of a Series once it's been settled"
      },
      "series(address,uint256)": {
        "notice": "adapter -> maturity -> Series"
      },
      "setAdapter(address,bool)": {
        "notice": "Enable or disable a adapter"
      },
      "setGuard(address,uint256)": {
        "notice": "Set adapter's guard"
      },
      "setGuarded(bool)": {
        "notice": "Set guarded mode"
      },
      "setPaused(bool)": {
        "notice": "Set paused flag"
      },
      "setPeriphery(address)": {
        "notice": "Set periphery's contract"
      },
      "setPermissionless(bool)": {
        "notice": "Set permissioless mode"
      },
      "settleSeries(address,uint256)": {
        "notice": "Settles a Series and transfers the settlement reward to the caller"
      },
      "tokenHandler()": {
        "notice": "Principal/Yield tokens deployer"
      },
      "yt(address,uint256)": {
        "notice": "Returns address of Yield Token"
      }
    },
    "notice": "You can use this contract to issue, combine, and redeem Sense ERC20 Principal and Yield Tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17157,
        "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
        "label": "isTrusted",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1985,
        "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
        "label": "locked",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 97,
        "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 2155,
        "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
        "label": "periphery",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2164,
        "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
        "label": "permissionless",
        "offset": 21,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 2168,
        "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
        "label": "guarded",
        "offset": 22,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 2171,
        "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
        "label": "adapterCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint248"
      },
      {
        "astId": 2176,
        "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
        "label": "adapterAddresses",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2182,
        "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
        "label": "adapterMeta",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(AdapterMeta)2227_storage)"
      },
      {
        "astId": 2190,
        "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
        "label": "series",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Series)2218_storage))"
      },
      {
        "astId": 2199,
        "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
        "label": "lscales",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Series)2218_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Divider.Series))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Series)2218_storage)"
      },
      "t_mapping(t_address,t_struct(AdapterMeta)2227_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Divider.AdapterMeta)",
        "numberOfBytes": "32",
        "value": "t_struct(AdapterMeta)2227_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Series)2218_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Divider.Series)",
        "numberOfBytes": "32",
        "value": "t_struct(Series)2218_storage"
      },
      "t_struct(AdapterMeta)2227_storage": {
        "encoding": "inplace",
        "label": "struct Divider.AdapterMeta",
        "members": [
          {
            "astId": 2220,
            "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint248"
          },
          {
            "astId": 2222,
            "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
            "label": "enabled",
            "offset": 31,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2224,
            "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
            "label": "guard",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2226,
            "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
            "label": "level",
            "offset": 0,
            "slot": "2",
            "type": "t_uint248"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Series)2218_storage": {
        "encoding": "inplace",
        "label": "struct Divider.Series",
        "members": [
          {
            "astId": 2201,
            "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
            "label": "pt",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2203,
            "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
            "label": "issuance",
            "offset": 20,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 2205,
            "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
            "label": "yt",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2207,
            "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
            "label": "tilt",
            "offset": 20,
            "slot": "1",
            "type": "t_uint96"
          },
          {
            "astId": 2209,
            "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
            "label": "sponsor",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2211,
            "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
            "label": "reward",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2213,
            "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
            "label": "iscale",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2215,
            "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
            "label": "mscale",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2217,
            "contract": "@sense-finance/v1-core/src/Divider.sol:Divider",
            "label": "maxscale",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint248": {
        "encoding": "inplace",
        "label": "uint248",
        "numberOfBytes": "31"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}