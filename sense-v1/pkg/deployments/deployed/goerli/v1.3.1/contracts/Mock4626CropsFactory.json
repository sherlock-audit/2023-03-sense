{
  "address": "0xF494aa5a7589F0FF78974C5d11F5a1f7aC4A6f07",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_divider",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stake",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stakeSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minm",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxm",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "ifee",
              "type": "uint128"
            },
            {
              "internalType": "uint16",
              "name": "mode",
              "type": "uint16"
            },
            {
              "internalType": "uint64",
              "name": "tilt",
              "type": "uint64"
            }
          ],
          "internalType": "struct BaseFactory.FactoryParams",
          "name": "_factoryParams",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OnlyPeriphery",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TargetNotSupported",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AdapterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "UserTrustUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_LEVEL",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "adapters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "addTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "deployAdapter",
      "outputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "divider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryParams",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stake",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxm",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "ifee",
          "type": "uint128"
        },
        {
          "internalType": "uint16",
          "name": "mode",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "tilt",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTrusted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "setIsTrusted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_adapters",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "targets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5f225838950ee4ccb6a6b7af3d5f9eb48471485415838e39512f860500622ed7",
  "receipt": {
    "to": null,
    "from": "0xF13519734649F7464E5BE4aa91987A35594b2B16",
    "contractAddress": "0xF494aa5a7589F0FF78974C5d11F5a1f7aC4A6f07",
    "transactionIndex": 10,
    "gasUsed": "4425149",
    "logsBloom": "0x
    "blockHash": "0x5aa18f0aaed5b9150c37ebd6b943c08734d2e8af9e3656e06a33a412fcc2a6f7",
    "transactionHash": "0x5f225838950ee4ccb6a6b7af3d5f9eb48471485415838e39512f860500622ed7",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 7184550,
        "transactionHash": "0x5f225838950ee4ccb6a6b7af3d5f9eb48471485415838e39512f860500622ed7",
        "address": "0xF494aa5a7589F0FF78974C5d11F5a1f7aC4A6f07",
        "topics": [
          "0xe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986",
          "0x000000000000000000000000f13519734649f7464e5be4aa91987a35594b2b16"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 15,
        "blockHash": "0x5aa18f0aaed5b9150c37ebd6b943c08734d2e8af9e3656e06a33a412fcc2a6f7"
      }
    ],
    "blockNumber": 7184550,
    "cumulativeGasUsed": "5932495",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa1514E3bA51C59d4E76956409143aE9734883Fd5",
    [
      "0x0000000000000000000000000000000000000000",
      "0xAEfcd438e64501D5a79a13d856DA5c4638EECC48",
      "1000000000000000000",
      "0",
      "4838400",
      "10000000000000000",
      1,
      0
    ],
    [
      "0x34AccF02eED08893697b9c212aDBF7a53FE173Fe"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "e6e4c9ea960c200f06b8bf15d2380dca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_divider\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxm\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"ifee\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"mode\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"tilt\",\"type\":\"uint64\"}],\"internalType\":\"struct BaseFactory.FactoryParams\",\"name\":\"_factoryParams\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OnlyPeriphery\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetNotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AdapterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"UserTrustUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_LEVEL\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adapters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deployAdapter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxm\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"ifee\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"mode\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"tilt\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTrusted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"setIsTrusted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_adapters\",\"type\":\"address[]\"}],\"name\":\"setRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"targets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setRewardTokens(address[],address[])\":{\"params\":{\"_adapters\":\"array of adapters to update the rewards tokens on\",\"_rewardTokens\":\"array of rewards tokens addresses\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AdapterAdded(address,address)\":{\"notice\":\"Logs the deployment of the adapter\"}},\"kind\":\"user\",\"methods\":{\"DEFAULT_LEVEL()\":{\"notice\":\"Sets level to `31` by default, which keeps all Divider lifecycle methods public (`issue`, `combine`, `collect`, etc), but not the `onRedeem` hook.\"},\"adapters(address)\":{\"notice\":\"target -> adapter\"},\"divider()\":{\"notice\":\"Sense core Divider address\"},\"factoryParams()\":{\"notice\":\"params for adapters deployed with this factory\"},\"setRewardTokens(address[],address[])\":{\"notice\":\"Replace existing reward tokens array with a new one and update adapters passed\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sense-finance/v1-core/src/tests/test-helpers/mocks/MockFactory.sol\":\"Mock4626CropsFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":15000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/mixins/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"../utils/FixedPointMathLib.sol\\\";\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626 is ERC20 {\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ERC20 public immutable asset;\\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol, _asset.decimals()) {\\n        asset = _asset;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n        // Check for rounding error since we round down in previewDeposit.\\n        require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 shares) {\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return convertToAssets(shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf[owner]);\\n    }\\n\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\\n\\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\\n}\\n\",\"keccak256\":\"0x91f5761576f1ff3ede392ea1205bb88d6eed520fdafdabb97da5c3518f8ad5c0\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0240f7703cff32a61ee3e9fbb339e09a944260432a9ef37debf3692b1a6c8049\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/Bytes32AddressLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Library for converting between addresses and bytes32 values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/Bytes32AddressLib.sol)\\nlibrary Bytes32AddressLib {\\n    function fromLast20Bytes(bytes32 bytesValue) internal pure returns (address) {\\n        return address(uint160(uint256(bytesValue)));\\n    }\\n\\n    function fillLast12Bytes(address addressValue) internal pure returns (bytes32) {\\n        return bytes32(bytes20(addressValue));\\n    }\\n}\\n\",\"keccak256\":\"0x2afc1acba8a77555e061420cab585a5bd4f030c3ad0ac3e0066dbb55e3a8adff\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x96ab2a92fbac88a704270b039691afb363c5a1ef1170fb0c955043e4da84b987\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private locked = 1;\\n\\n    modifier nonReentrant() {\\n        require(locked == 1, \\\"REENTRANCY\\\");\\n\\n        locked = 2;\\n\\n        _;\\n\\n        locked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0xedbae9363161b25063b9653299e38f29481f512de88011613f514d23cd6817ee\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    event Debug(bool one, bool two, uint256 retsize);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf3c37dad1c92b696ffb8b4532527514f8c8a31a4732c6f61815a4fe5f5ce8725\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/Divider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { ReentrancyGuard } from \\\"@rari-capital/solmate/src/utils/ReentrancyGuard.sol\\\";\\nimport { DateTime } from \\\"./external/DateTime.sol\\\";\\nimport { FixedMath } from \\\"./external/FixedMath.sol\\\";\\n\\n// Internal references\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\nimport { Levels } from \\\"@sense-finance/v1-utils/src/libs/Levels.sol\\\";\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\nimport { YT } from \\\"./tokens/YT.sol\\\";\\nimport { Token } from \\\"./tokens/Token.sol\\\";\\nimport { BaseAdapter as Adapter } from \\\"./adapters/abstract/BaseAdapter.sol\\\";\\n\\n/// @title Sense Divider: Divide Assets in Two\\n/// @author fedealconada + jparklev\\n/// @notice You can use this contract to issue, combine, and redeem Sense ERC20 Principal and Yield Tokens\\ncontract Divider is Trust, ReentrancyGuard, Pausable {\\n    using SafeTransferLib for ERC20;\\n    using FixedMath for uint256;\\n    using Levels for uint256;\\n\\n    /* ========== PUBLIC CONSTANTS ========== */\\n\\n    /// @notice Buffer before and after the actual maturity in which only the sponsor can settle the Series\\n    uint256 public constant SPONSOR_WINDOW = 3 hours;\\n\\n    /// @notice Buffer after the sponsor window in which anyone can settle the Series\\n    uint256 public constant SETTLEMENT_WINDOW = 3 hours;\\n\\n    /// @notice 5% issuance fee cap\\n    uint256 public constant ISSUANCE_FEE_CAP = 0.05e18;\\n\\n    /* ========== PUBLIC MUTABLE STORAGE ========== */\\n\\n    address public periphery;\\n\\n    /// @notice Sense community multisig\\n    address public immutable cup;\\n\\n    /// @notice Principal/Yield tokens deployer\\n    address public immutable tokenHandler;\\n\\n    /// @notice Permissionless flag\\n    bool public permissionless;\\n\\n    /// @notice Guarded launch flag\\n    bool public guarded = true;\\n\\n    /// @notice Number of adapters (including turned off)\\n    uint248 public adapterCounter;\\n\\n    /// @notice adapter ID -> adapter address\\n    mapping(uint256 => address) public adapterAddresses;\\n\\n    /// @notice adapter data\\n    mapping(address => AdapterMeta) public adapterMeta;\\n\\n    /// @notice adapter -> maturity -> Series\\n    mapping(address => mapping(uint256 => Series)) public series;\\n\\n    /// @notice adapter -> maturity -> user -> lscale (last scale)\\n    mapping(address => mapping(uint256 => mapping(address => uint256))) public lscales;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct Series {\\n        // Principal ERC20 token\\n        address pt;\\n        // Timestamp of series initialization\\n        uint48 issuance;\\n        // Yield ERC20 token\\n        address yt;\\n        // % of underlying principal initially reserved for Yield\\n        uint96 tilt;\\n        // Actor who initialized the Series\\n        address sponsor;\\n        // Tracks fees due to the series' settler\\n        uint256 reward;\\n        // Scale at issuance\\n        uint256 iscale;\\n        // Scale at maturity\\n        uint256 mscale;\\n        // Max scale value from this series' lifetime\\n        uint256 maxscale;\\n    }\\n\\n    struct AdapterMeta {\\n        // Adapter ID\\n        uint248 id;\\n        // Adapter enabled/disabled\\n        bool enabled;\\n        // Max amount of Target allowed to be issued\\n        uint256 guard;\\n        // Adapter level\\n        uint248 level;\\n    }\\n\\n    constructor(address _cup, address _tokenHandler) Trust(msg.sender) {\\n        cup = _cup;\\n        tokenHandler = _tokenHandler;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Enable an adapter\\n    /// @dev when permissionless is disabled, only the Periphery can onboard adapters\\n    /// @dev after permissionless is enabled, anyone can onboard adapters\\n    /// @param adapter Adapter's address\\n    function addAdapter(address adapter) external whenNotPaused {\\n        if (!permissionless && msg.sender != periphery) revert Errors.OnlyPermissionless();\\n        if (adapterMeta[adapter].id > 0 && !adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        _setAdapter(adapter, true);\\n    }\\n\\n    /// @notice Initializes a new Series\\n    /// @dev Deploys two ERC20 contracts, one for PTs and the other one for YTs\\n    /// @dev Transfers some fixed amount of stake asset to this contract\\n    /// @param adapter Adapter to associate with the Series\\n    /// @param maturity Maturity date for the new Series, in units of unix time\\n    /// @param sponsor Sponsor of the Series that puts up a token stake and receives the issuance fees\\n    function initSeries(\\n        address adapter,\\n        uint256 maturity,\\n        address sponsor\\n    ) external nonReentrant whenNotPaused returns (address pt, address yt) {\\n        if (periphery != msg.sender) revert Errors.OnlyPeriphery();\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (_exists(adapter, maturity)) revert Errors.DuplicateSeries();\\n        if (!_isValid(adapter, maturity)) revert Errors.InvalidMaturity();\\n\\n        // Transfer stake asset stake from caller to adapter\\n        (address target, address stake, uint256 stakeSize) = Adapter(adapter).getStakeAndTarget();\\n\\n        // Deploy Principal & Yield Tokens for this new Series\\n        (pt, yt) = TokenHandler(tokenHandler).deploy(adapter, adapterMeta[adapter].id, maturity);\\n\\n        // Initialize the new Series struct\\n        uint256 scale = Adapter(adapter).scale();\\n\\n        series[adapter][maturity].pt = pt;\\n        series[adapter][maturity].issuance = uint48(block.timestamp);\\n        series[adapter][maturity].yt = yt;\\n        series[adapter][maturity].tilt = uint96(Adapter(adapter).tilt());\\n        series[adapter][maturity].sponsor = sponsor;\\n        series[adapter][maturity].iscale = scale;\\n        series[adapter][maturity].maxscale = scale;\\n\\n        ERC20(stake).safeTransferFrom(msg.sender, adapter, stakeSize);\\n\\n        emit SeriesInitialized(adapter, maturity, pt, yt, sponsor, target);\\n    }\\n\\n    /// @notice Settles a Series and transfers the settlement reward to the caller\\n    /// @dev The Series' sponsor has a grace period where only they can settle the Series\\n    /// @dev After that, the reward becomes MEV\\n    /// @param adapter Adapter to associate with the Series\\n    /// @param maturity Maturity date for the new Series\\n    function settleSeries(address adapter, uint256 maturity) external nonReentrant whenNotPaused {\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n        if (_settled(adapter, maturity)) revert Errors.AlreadySettled();\\n        if (!_canBeSettled(adapter, maturity)) revert Errors.OutOfWindowBoundaries();\\n\\n        // The maturity scale value is all a Series needs for us to consider it \\\"settled\\\"\\n        uint256 mscale = Adapter(adapter).scale();\\n        series[adapter][maturity].mscale = mscale;\\n\\n        if (mscale > series[adapter][maturity].maxscale) {\\n            series[adapter][maturity].maxscale = mscale;\\n        }\\n\\n        // Reward the caller for doing the work of settling the Series at around the correct time\\n        (address target, address stake, uint256 stakeSize) = Adapter(adapter).getStakeAndTarget();\\n        ERC20(target).safeTransferFrom(adapter, msg.sender, series[adapter][maturity].reward);\\n        ERC20(stake).safeTransferFrom(adapter, msg.sender, stakeSize);\\n\\n        emit SeriesSettled(adapter, maturity, msg.sender);\\n    }\\n\\n    /// @notice Mint Principal & Yield Tokens of a specific Series\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series [unix time]\\n    /// @param tBal Balance of Target to deposit\\n    /// @dev The balance of PTs and YTs minted will be the same value in units of underlying (less fees)\\n    function issue(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 tBal\\n    ) external nonReentrant whenNotPaused returns (uint256 uBal) {\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n        if (_settled(adapter, maturity)) revert Errors.IssueOnSettle();\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.issueRestricted() && msg.sender != adapter) revert Errors.IssuanceRestricted();\\n\\n        ERC20 target = ERC20(Adapter(adapter).target());\\n\\n        // Take the issuance fee out of the deposited Target, and put it towards the settlement reward\\n        uint256 issuanceFee = Adapter(adapter).ifee();\\n        if (issuanceFee > ISSUANCE_FEE_CAP) revert Errors.IssuanceFeeCapExceeded();\\n        uint256 fee = tBal.fmul(issuanceFee);\\n\\n        unchecked {\\n            // Safety: bounded by the Target's total token supply\\n            series[adapter][maturity].reward += fee;\\n        }\\n        uint256 tBalSubFee = tBal - fee;\\n\\n        // Ensure the caller won't hit the issuance cap with this action\\n        unchecked {\\n            // Safety: bounded by the Target's total token supply\\n            if (guarded && target.balanceOf(adapter) + tBal > adapterMeta[address(adapter)].guard)\\n                revert Errors.GuardCapReached();\\n        }\\n\\n        // Update values on adapter\\n        Adapter(adapter).notify(msg.sender, tBalSubFee, true);\\n\\n        uint256 scale = level.collectDisabled() ? series[adapter][maturity].iscale : Adapter(adapter).scale();\\n\\n        // Determine the amount of Underlying equal to the Target being sent in (the principal)\\n        uBal = tBalSubFee.fmul(scale);\\n\\n        // If the caller has not collected on YT before, use the current scale, otherwise\\n        // use the harmonic mean of the last and the current scale value\\n        lscales[adapter][maturity][msg.sender] = lscales[adapter][maturity][msg.sender] == 0\\n            ? scale\\n            : _reweightLScale(\\n                adapter,\\n                maturity,\\n                YT(series[adapter][maturity].yt).balanceOf(msg.sender),\\n                uBal,\\n                msg.sender,\\n                scale\\n            );\\n\\n        // Mint equal amounts of PT and YT\\n        Token(series[adapter][maturity].pt).mint(msg.sender, uBal);\\n        YT(series[adapter][maturity].yt).mint(msg.sender, uBal);\\n\\n        target.safeTransferFrom(msg.sender, adapter, tBal);\\n\\n        emit Issued(adapter, maturity, uBal, msg.sender);\\n    }\\n\\n    /// @notice Reconstitute Target by burning PT and YT\\n    /// @dev Explicitly burns YTs before maturity, and implicitly does it at/after maturity through `_collect()`\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal Balance of PT and YT to burn\\n    function combine(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal\\n    ) external nonReentrant whenNotPaused returns (uint256 tBal) {\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.combineRestricted() && msg.sender != adapter) revert Errors.CombineRestricted();\\n\\n        // Burn the PT\\n        Token(series[adapter][maturity].pt).burn(msg.sender, uBal);\\n\\n        // Collect whatever excess is due\\n        uint256 collected = _collect(msg.sender, adapter, maturity, uBal, uBal, address(0));\\n\\n        uint256 cscale = series[adapter][maturity].mscale;\\n        bool settled = _settled(adapter, maturity);\\n        if (!settled) {\\n            // If it's not settled, then YT won't be burned automatically in `_collect()`\\n            YT(series[adapter][maturity].yt).burn(msg.sender, uBal);\\n            // If collect has been restricted, use the initial scale, otherwise use the current scale\\n            cscale = level.collectDisabled()\\n                ? series[adapter][maturity].iscale\\n                : lscales[adapter][maturity][msg.sender];\\n        }\\n\\n        // Convert from units of Underlying to units of Target\\n        tBal = uBal.fdiv(cscale);\\n        ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, msg.sender, tBal);\\n\\n        // Notify only when Series is not settled as when it is, the _collect() call above would trigger a _redeemYT which will call notify\\n        if (!settled) Adapter(adapter).notify(msg.sender, tBal, false);\\n        unchecked {\\n            // Safety: bounded by the Target's total token supply\\n            tBal += collected;\\n        }\\n        emit Combined(adapter, maturity, tBal, msg.sender);\\n    }\\n\\n    /// @notice Burn PT of a Series once it's been settled\\n    /// @dev The balance of redeemable Target is a function of the change in Scale\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal Amount of PT to burn, which should be equivalent to the amount of Underlying owed to the caller\\n    function redeem(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal\\n    ) external nonReentrant whenNotPaused returns (uint256 tBal) {\\n        // If a Series is settled, we know that it must have existed as well, so that check is unnecessary\\n        if (!_settled(adapter, maturity)) revert Errors.NotSettled();\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.redeemRestricted() && msg.sender == adapter) revert Errors.RedeemRestricted();\\n\\n        // Burn the caller's PT\\n        Token(series[adapter][maturity].pt).burn(msg.sender, uBal);\\n\\n        // Principal Token holder's share of the principal = (1 - part of the principal that belongs to Yield)\\n        uint256 zShare = FixedMath.WAD - series[adapter][maturity].tilt;\\n\\n        // If Principal Token are at a loss and Yield have some principal to help cover the shortfall,\\n        // take what we can from Yield Token's principal\\n        if (series[adapter][maturity].mscale.fdiv(series[adapter][maturity].maxscale) >= zShare) {\\n            tBal = (uBal * zShare) / series[adapter][maturity].mscale;\\n        } else {\\n            tBal = uBal.fdiv(series[adapter][maturity].maxscale);\\n        }\\n\\n        if (!level.redeemHookDisabled()) {\\n            Adapter(adapter).onRedeem(uBal, series[adapter][maturity].mscale, series[adapter][maturity].maxscale, tBal);\\n        }\\n\\n        ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, msg.sender, tBal);\\n        emit PTRedeemed(adapter, maturity, tBal);\\n    }\\n\\n    function collect(\\n        address usr,\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBalTransfer,\\n        address to\\n    ) external nonReentrant onlyYT(adapter, maturity) whenNotPaused returns (uint256 collected) {\\n        uint256 uBal = YT(msg.sender).balanceOf(usr);\\n        return _collect(usr, adapter, maturity, uBal, uBalTransfer > 0 ? uBalTransfer : uBal, to);\\n    }\\n\\n    /// @notice Collect YT excess before, at, or after maturity\\n    /// @dev If `to` is set, we copy the lscale value from usr to this address\\n    /// @param usr User who's collecting for their YTs\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal yield Token balance\\n    /// @param uBalTransfer original transfer value\\n    /// @param to address to set the lscale value from usr\\n    function _collect(\\n        address usr,\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal,\\n        uint256 uBalTransfer,\\n        address to\\n    ) internal returns (uint256 collected) {\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n\\n        // If the adapter is disabled, its Yield Token can only collect\\n        // if associated Series has been settled, which implies that an admin\\n        // has backfilled it\\n        if (!adapterMeta[adapter].enabled && !_settled(adapter, maturity)) revert Errors.InvalidAdapter();\\n\\n        Series memory _series = series[adapter][maturity];\\n\\n        // Get the scale value from the last time this holder collected (default to maturity)\\n        uint256 lscale = lscales[adapter][maturity][usr];\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.collectDisabled()) {\\n            // If this Series has been settled, we ensure everyone's YT will\\n            // collect yield accrued since issuance\\n            if (_settled(adapter, maturity)) {\\n                lscale = series[adapter][maturity].iscale;\\n                // If the Series is not settled, we ensure no collections can happen\\n            } else {\\n                return 0;\\n            }\\n        }\\n\\n        // If the Series has been settled, this should be their last collect, so redeem the user's Yield Tokens for them\\n        if (_settled(adapter, maturity)) {\\n            _redeemYT(usr, adapter, maturity, uBal);\\n        } else {\\n            // If we're not settled and we're past maturity + the sponsor window,\\n            // anyone can settle this Series so revert until someone does\\n            if (block.timestamp > maturity + SPONSOR_WINDOW) {\\n                revert Errors.CollectNotSettled();\\n                // Otherwise, this is a valid pre-settlement collect and we need to determine the scale value\\n            } else {\\n                uint256 cscale = Adapter(adapter).scale();\\n                // If this is larger than the largest scale we've seen for this Series, use it\\n                if (cscale > _series.maxscale) {\\n                    _series.maxscale = cscale;\\n                    lscales[adapter][maturity][usr] = cscale;\\n                    // If not, use the previously noted max scale value\\n                } else {\\n                    lscales[adapter][maturity][usr] = _series.maxscale;\\n                }\\n            }\\n        }\\n\\n        // Determine how much underlying has accrued since the last time this user collected, in units of Target.\\n        // (Or take the last time as issuance if they haven't yet)\\n        //\\n        // Reminder: `Underlying / Scale = Target`\\n        // So the following equation is saying, for some amount of Underlying `u`:\\n        // \\\"Balance of Target that equaled `u` at the last collection _minus_ Target that equals `u` now\\\"\\n        //\\n        // Because maxscale must be increasing, the Target balance needed to equal `u` decreases, and that \\\"excess\\\"\\n        // is what Yield holders are collecting\\n        uint256 tBalNow = uBal.fdivUp(_series.maxscale); // preventive round-up towards the protocol\\n        uint256 tBalPrev = uBal.fdiv(lscale);\\n        unchecked {\\n            collected = tBalPrev > tBalNow ? tBalPrev - tBalNow : 0;\\n        }\\n        ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, usr, collected);\\n        Adapter(adapter).notify(usr, collected, false); // Distribute reward tokens\\n\\n        // If this collect is a part of a token transfer to another address, set the receiver's\\n        // last collection to a synthetic scale weighted based on the scale on their last collect,\\n        // the time elapsed, and the current scale\\n        if (to != address(0)) {\\n            uint256 ytBal = YT(_series.yt).balanceOf(to);\\n            // If receiver holds yields, we set lscale to a computed \\\"synthetic\\\" lscales value that,\\n            // for the updated yield balance, still assigns the correct amount of yield.\\n            lscales[adapter][maturity][to] = ytBal > 0\\n                ? _reweightLScale(adapter, maturity, ytBal, uBalTransfer, to, _series.maxscale)\\n                : _series.maxscale;\\n            uint256 tBalTransfer = uBalTransfer.fdiv(_series.maxscale);\\n            Adapter(adapter).notify(usr, tBalTransfer, false);\\n            Adapter(adapter).notify(to, tBalTransfer, true);\\n        }\\n        series[adapter][maturity] = _series;\\n\\n        emit Collected(adapter, maturity, collected);\\n    }\\n\\n    /// @notice calculate the harmonic mean of the current scale and the last scale,\\n    /// weighted by amounts associated with each\\n    function _reweightLScale(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 ytBal,\\n        uint256 uBal,\\n        address receiver,\\n        uint256 scale\\n    ) internal view returns (uint256) {\\n        // Target Decimals * 18 Decimals [from fdiv] / (Target Decimals * 18 Decimals [from fdiv] / 18 Decimals)\\n        // = 18 Decimals, which is the standard for scale values\\n        return (ytBal + uBal).fdiv((ytBal.fdiv(lscales[adapter][maturity][receiver]) + uBal.fdiv(scale)));\\n    }\\n\\n    function _redeemYT(\\n        address usr,\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal\\n    ) internal {\\n        // Burn the users's YTs\\n        YT(series[adapter][maturity].yt).burn(usr, uBal);\\n\\n        // Default principal for a YT\\n        uint256 tBal = 0;\\n\\n        // Principal Token holder's share of the principal = (1 - part of the principal that belongs to Yield Tokens)\\n        uint256 zShare = FixedMath.WAD - series[adapter][maturity].tilt;\\n\\n        // If PTs are at a loss and YTs had their principal cut to help cover the shortfall,\\n        // calculate how much YTs have left\\n        if (series[adapter][maturity].mscale.fdiv(series[adapter][maturity].maxscale) >= zShare) {\\n            tBal = uBal.fdiv(series[adapter][maturity].maxscale) - (uBal * zShare) / series[adapter][maturity].mscale;\\n            ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, usr, tBal);\\n        }\\n\\n        // Always notify the Adapter of the full Target balance that will no longer\\n        // have its rewards distributed\\n        Adapter(adapter).notify(usr, uBal.fdivUp(series[adapter][maturity].maxscale), false);\\n\\n        emit YTRedeemed(adapter, maturity, tBal);\\n    }\\n\\n    /* ========== ADMIN ========== */\\n\\n    /// @notice Enable or disable a adapter\\n    /// @param adapter Adapter's address\\n    /// @param isOn Flag setting this adapter to enabled or disabled\\n    function setAdapter(address adapter, bool isOn) public requiresTrust {\\n        _setAdapter(adapter, isOn);\\n    }\\n\\n    /// @notice Set adapter's guard\\n    /// @param adapter Adapter address\\n    /// @param cap The max target that can be deposited on the Adapter\\n    function setGuard(address adapter, uint256 cap) external requiresTrust {\\n        adapterMeta[adapter].guard = cap;\\n        emit GuardChanged(adapter, cap);\\n    }\\n\\n    /// @notice Set guarded mode\\n    /// @param _guarded bool\\n    function setGuarded(bool _guarded) external requiresTrust {\\n        guarded = _guarded;\\n        emit GuardedChanged(_guarded);\\n    }\\n\\n    /// @notice Set periphery's contract\\n    /// @param _periphery Target address\\n    function setPeriphery(address _periphery) external requiresTrust {\\n        periphery = _periphery;\\n        emit PeripheryChanged(_periphery);\\n    }\\n\\n    /// @notice Set paused flag\\n    /// @param _paused boolean\\n    function setPaused(bool _paused) external requiresTrust {\\n        _paused ? _pause() : _unpause();\\n    }\\n\\n    /// @notice Set permissioless mode\\n    /// @param _permissionless bool\\n    function setPermissionless(bool _permissionless) external requiresTrust {\\n        permissionless = _permissionless;\\n        emit PermissionlessChanged(_permissionless);\\n    }\\n\\n    /// @notice Backfill a Series' Scale value at maturity if keepers failed to settle it\\n    /// @param adapter Adapter's address\\n    /// @param maturity Maturity date for the Series\\n    /// @param mscale Value to set as the Series' Scale value at maturity\\n    /// @param _usrs Values to set on lscales mapping\\n    /// @param _lscales Values to set on lscales mapping\\n    function backfillScale(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 mscale,\\n        address[] calldata _usrs,\\n        uint256[] calldata _lscales\\n    ) external requiresTrust {\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n\\n        uint256 cutoff = maturity + SPONSOR_WINDOW + SETTLEMENT_WINDOW;\\n        // Admin can never backfill before maturity\\n        if (block.timestamp <= cutoff) revert Errors.OutOfWindowBoundaries();\\n\\n        // Set user's last scale values the Series (needed for the `collect` method)\\n        for (uint256 i = 0; i < _usrs.length; i++) {\\n            lscales[adapter][maturity][_usrs[i]] = _lscales[i];\\n        }\\n\\n        if (mscale > 0) {\\n            Series memory _series = series[adapter][maturity];\\n            // Set the maturity scale for the Series (needed for `redeem` methods)\\n            series[adapter][maturity].mscale = mscale;\\n            if (mscale > _series.maxscale) {\\n                series[adapter][maturity].maxscale = mscale;\\n            }\\n\\n            (address target, address stake, uint256 stakeSize) = Adapter(adapter).getStakeAndTarget();\\n\\n            address stakeDst = adapterMeta[adapter].enabled ? cup : _series.sponsor;\\n            ERC20(target).safeTransferFrom(adapter, cup, _series.reward);\\n            series[adapter][maturity].reward = 0;\\n            ERC20(stake).safeTransferFrom(adapter, stakeDst, stakeSize);\\n        }\\n\\n        emit Backfilled(adapter, maturity, mscale, _usrs, _lscales);\\n    }\\n\\n    /* ========== INTERNAL VIEWS ========== */\\n\\n    function _exists(address adapter, uint256 maturity) internal view returns (bool) {\\n        return series[adapter][maturity].pt != address(0);\\n    }\\n\\n    function _settled(address adapter, uint256 maturity) internal view returns (bool) {\\n        return series[adapter][maturity].mscale > 0;\\n    }\\n\\n    function _canBeSettled(address adapter, uint256 maturity) internal view returns (bool) {\\n        uint256 cutoff = maturity + SPONSOR_WINDOW + SETTLEMENT_WINDOW;\\n        // If the sender is the sponsor for the Series\\n        if (msg.sender == series[adapter][maturity].sponsor) {\\n            return maturity - SPONSOR_WINDOW <= block.timestamp && cutoff >= block.timestamp;\\n        } else {\\n            return maturity + SPONSOR_WINDOW < block.timestamp && cutoff >= block.timestamp;\\n        }\\n    }\\n\\n    function _isValid(address adapter, uint256 maturity) internal view returns (bool) {\\n        (uint256 minm, uint256 maxm) = Adapter(adapter).getMaturityBounds();\\n        if (maturity < block.timestamp + minm || maturity > block.timestamp + maxm) return false;\\n        (, , uint256 day, uint256 hour, uint256 minute, uint256 second) = DateTime.timestampToDateTime(maturity);\\n\\n        if (hour != 0 || minute != 0 || second != 0) return false;\\n        uint256 mode = Adapter(adapter).mode();\\n        if (mode == 0) {\\n            return day == 1;\\n        }\\n        if (mode == 1) {\\n            return DateTime.getDayOfWeek(maturity) == 1;\\n        }\\n        return false;\\n    }\\n\\n    /* ========== INTERNAL UTILS ========== */\\n\\n    function _setAdapter(address adapter, bool isOn) internal {\\n        AdapterMeta memory am = adapterMeta[adapter];\\n        if (am.enabled == isOn) revert Errors.ExistingValue();\\n        am.enabled = isOn;\\n\\n        // If this adapter is being added for the first time\\n        if (isOn && am.id == 0) {\\n            am.id = ++adapterCounter;\\n            adapterAddresses[am.id] = adapter;\\n        }\\n\\n        // Set level and target (can only be done once);\\n        am.level = uint248(Adapter(adapter).level());\\n        adapterMeta[adapter] = am;\\n        emit AdapterChanged(adapter, am.id, isOn);\\n    }\\n\\n    /* ========== PUBLIC GETTERS ========== */\\n\\n    /// @notice Returns address of Principal Token\\n    function pt(address adapter, uint256 maturity) public view returns (address) {\\n        return series[adapter][maturity].pt;\\n    }\\n\\n    /// @notice Returns address of Yield Token\\n    function yt(address adapter, uint256 maturity) public view returns (address) {\\n        return series[adapter][maturity].yt;\\n    }\\n\\n    function mscale(address adapter, uint256 maturity) public view returns (uint256) {\\n        return series[adapter][maturity].mscale;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyYT(address adapter, uint256 maturity) {\\n        if (series[adapter][maturity].yt != msg.sender) revert Errors.OnlyYT();\\n        _;\\n    }\\n\\n    /* ========== LOGS ========== */\\n\\n    /// @notice Admin\\n    event Backfilled(\\n        address indexed adapter,\\n        uint256 indexed maturity,\\n        uint256 mscale,\\n        address[] _usrs,\\n        uint256[] _lscales\\n    );\\n    event GuardChanged(address indexed adapter, uint256 cap);\\n    event AdapterChanged(address indexed adapter, uint256 indexed id, bool indexed isOn);\\n    event PeripheryChanged(address indexed periphery);\\n\\n    /// @notice Series lifecycle\\n    /// *---- beginning\\n    event SeriesInitialized(\\n        address adapter,\\n        uint256 indexed maturity,\\n        address pt,\\n        address yt,\\n        address indexed sponsor,\\n        address indexed target\\n    );\\n    /// -***- middle\\n    event Issued(address indexed adapter, uint256 indexed maturity, uint256 balance, address indexed sender);\\n    event Combined(address indexed adapter, uint256 indexed maturity, uint256 balance, address indexed sender);\\n    event Collected(address indexed adapter, uint256 indexed maturity, uint256 collected);\\n    /// ----* end\\n    event SeriesSettled(address indexed adapter, uint256 indexed maturity, address indexed settler);\\n    event PTRedeemed(address indexed adapter, uint256 indexed maturity, uint256 redeemed);\\n    event YTRedeemed(address indexed adapter, uint256 indexed maturity, uint256 redeemed);\\n    /// *----* misc\\n    event GuardedChanged(bool indexed guarded);\\n    event PermissionlessChanged(bool indexed permissionless);\\n}\\n\\ncontract TokenHandler is Trust {\\n    /// @notice Program state\\n    address public divider;\\n\\n    constructor() Trust(msg.sender) {}\\n\\n    function init(address _divider) external requiresTrust {\\n        if (divider != address(0)) revert Errors.AlreadyInitialized();\\n        divider = _divider;\\n    }\\n\\n    function deploy(\\n        address adapter,\\n        uint248 id,\\n        uint256 maturity\\n    ) external returns (address pt, address yt) {\\n        if (msg.sender != divider) revert Errors.OnlyDivider();\\n\\n        ERC20 target = ERC20(Adapter(adapter).target());\\n        uint8 decimals = target.decimals();\\n        string memory symbol = target.symbol();\\n        (string memory d, string memory m, string memory y) = DateTime.toDateString(maturity);\\n        string memory date = DateTime.format(maturity);\\n        string memory datestring = string(abi.encodePacked(d, \\\"-\\\", m, \\\"-\\\", y));\\n        string memory adapterId = DateTime.uintToString(id);\\n        pt = address(\\n            new Token(\\n                string(abi.encodePacked(date, \\\" \\\", symbol, \\\" Sense Principal Token, A\\\", adapterId)),\\n                string(abi.encodePacked(\\\"sP-\\\", symbol, \\\":\\\", datestring, \\\":\\\", adapterId)),\\n                decimals,\\n                divider\\n            )\\n        );\\n\\n        yt = address(\\n            new YT(\\n                adapter,\\n                maturity,\\n                string(abi.encodePacked(date, \\\" \\\", symbol, \\\" Sense Yield Token, A\\\", adapterId)),\\n                string(abi.encodePacked(\\\"sY-\\\", symbol, \\\":\\\", datestring, \\\":\\\", adapterId)),\\n                decimals,\\n                divider\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x3c86e44a485d0e7504f3499fc07ad995b7b18f7ca5ca63e6bda5bee2dbbe31ea\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/BaseAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { IERC3156FlashLender } from \\\"../../external/flashloan/IERC3156FlashLender.sol\\\";\\nimport { IERC3156FlashBorrower } from \\\"../../external/flashloan/IERC3156FlashBorrower.sol\\\";\\n\\n// Internal references\\nimport { Divider } from \\\"../../Divider.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\n/// @title Assign value to Target tokens\\nabstract contract BaseAdapter is IERC3156FlashLender {\\n    using SafeTransferLib for ERC20;\\n\\n    /* ========== CONSTANTS ========== */\\n\\n    bytes32 public constant CALLBACK_SUCCESS = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    /* ========== PUBLIC IMMUTABLES ========== */\\n\\n    /// @notice Sense core Divider address\\n    address public immutable divider;\\n\\n    /// @notice Target token to divide\\n    address public immutable target;\\n\\n    /// @notice Underlying for the Target\\n    address public immutable underlying;\\n\\n    /// @notice Issuance fee\\n    uint128 public immutable ifee;\\n\\n    /// @notice adapter params\\n    AdapterParams public adapterParams;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct AdapterParams {\\n        /// @notice Oracle address\\n        address oracle;\\n        /// @notice Token to stake at issuance\\n        address stake;\\n        /// @notice Amount to stake at issuance\\n        uint256 stakeSize;\\n        /// @notice Min maturity (seconds after block.timstamp)\\n        uint256 minm;\\n        /// @notice Max maturity (seconds after block.timstamp)\\n        uint256 maxm;\\n        /// @notice WAD number representing the percentage of the total\\n        /// principal that's set aside for Yield Tokens (e.g. 0.1e18 means that 10% of the principal is reserved).\\n        /// @notice If `0`, it means no principal is set aside for Yield Tokens\\n        uint64 tilt;\\n        /// @notice The number this function returns will be used to determine its access by checking for binary\\n        /// digits using the following scheme:\\u00a0<onRedeem(y/n)><collect(y/n)><combine(y/n)><issue(y/n)>\\n        /// (e.g. 0101 enables `collect` and `issue`, but not `combine`)\\n        uint48 level;\\n        /// @notice 0 for monthly, 1 for weekly\\n        uint16 mode;\\n    }\\n\\n    /* ========== METADATA STORAGE ========== */\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    constructor(\\n        address _divider,\\n        address _target,\\n        address _underlying,\\n        uint128 _ifee,\\n        AdapterParams memory _adapterParams\\n    ) {\\n        divider = _divider;\\n        target = _target;\\n        underlying = _underlying;\\n        ifee = _ifee;\\n        adapterParams = _adapterParams;\\n\\n        name = string(abi.encodePacked(ERC20(_target).name(), \\\" Adapter\\\"));\\n        symbol = string(abi.encodePacked(ERC20(_target).symbol(), \\\"-adapter\\\"));\\n\\n        ERC20(_target).approve(divider, type(uint256).max);\\n        ERC20(_adapterParams.stake).approve(divider, type(uint256).max);\\n    }\\n\\n    /// @notice Loan `amount` target to `receiver`, and takes it back after the callback.\\n    /// @param receiver The contract receiving target, needs to implement the\\n    /// `onFlashLoan(address user, address adapter, uint256 maturity, uint256 amount)` interface.\\n    /// @param amount The amount of target lent.\\n    /// @param data (encoded adapter address, maturity and YT amount the use has sent in)\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address, /* fee */\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool) {\\n        if (Divider(divider).periphery() != msg.sender) revert Errors.OnlyPeriphery();\\n        ERC20(target).safeTransfer(address(receiver), amount);\\n        bytes32 keccak = IERC3156FlashBorrower(receiver).onFlashLoan(msg.sender, target, amount, 0, data);\\n        if (keccak != CALLBACK_SUCCESS) revert Errors.FlashCallbackFailed();\\n        ERC20(target).safeTransferFrom(address(receiver), address(this), amount);\\n        return true;\\n    }\\n\\n    /* ========== REQUIRED VALUE GETTERS ========== */\\n\\n    /// @notice Calculate and return this adapter's Scale value for the current timestamp. To be overriden by child contracts\\n    /// @dev For some Targets, such as cTokens, this is simply the exchange rate, or `supply cToken / supply underlying`\\n    /// @dev For other Targets, such as AMM LP shares, specialized logic will be required\\n    /// @dev This function _must_ return a WAD number representing the current exchange rate\\n    /// between the Target and the Underlying.\\n    /// @return value WAD Scale value\\n    function scale() external virtual returns (uint256);\\n\\n    /// @notice Cached scale value getter\\n    /// @dev For situations where you need scale from a view function\\n    function scaleStored() external view virtual returns (uint256);\\n\\n    /// @notice Returns the current price of the underlying in ETH terms\\n    function getUnderlyingPrice() external view virtual returns (uint256);\\n\\n    /* ========== REQUIRED UTILITIES ========== */\\n\\n    /// @notice Deposits underlying `amount`in return for target. Must be overriden by child contracts\\n    /// @param amount Underlying amount\\n    /// @return amount of target returned\\n    function wrapUnderlying(uint256 amount) external virtual returns (uint256);\\n\\n    /// @notice Deposits target `amount`in return for underlying. Must be overriden by child contracts\\n    /// @param amount Target amount\\n    /// @return amount of underlying returned\\n    function unwrapTarget(uint256 amount) external virtual returns (uint256);\\n\\n    function flashFee(address token, uint256) external view returns (uint256) {\\n        if (token != target) revert Errors.TokenNotSupported();\\n        return 0;\\n    }\\n\\n    function maxFlashLoan(address token) external view override returns (uint256) {\\n        return ERC20(token).balanceOf(address(this));\\n    }\\n\\n    /* ========== OPTIONAL HOOKS ========== */\\n\\n    /// @notice Notification whenever the Divider adds or removes Target\\n    function notify(\\n        address, /* usr */\\n        uint256, /* amt */\\n        bool /* join */\\n    ) public virtual {\\n        return;\\n    }\\n\\n    /// @notice Hook called whenever a user redeems PT\\n    function onRedeem(\\n        uint256, /* uBal */\\n        uint256, /* mscale */\\n        uint256, /* maxscale */\\n        uint256 /* tBal */\\n    ) public virtual {\\n        return;\\n    }\\n\\n    /* ========== PUBLIC STORAGE ACCESSORS ========== */\\n\\n    function getMaturityBounds() external view virtual returns (uint256, uint256) {\\n        return (adapterParams.minm, adapterParams.maxm);\\n    }\\n\\n    function getStakeAndTarget()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        return (target, adapterParams.stake, adapterParams.stakeSize);\\n    }\\n\\n    function mode() external view returns (uint256) {\\n        return adapterParams.mode;\\n    }\\n\\n    function tilt() external view returns (uint256) {\\n        return adapterParams.tilt;\\n    }\\n\\n    function level() external view returns (uint256) {\\n        return adapterParams.level;\\n    }\\n}\\n\",\"keccak256\":\"0xfa71637b4828b14a2b909a820e35e5e390651918f2ee7216830cfcad6115a388\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/ERC4626Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { ERC4626 } from \\\"@rari-capital/solmate/src/mixins/ERC4626.sol\\\";\\nimport { FixedMath } from \\\"../../external/FixedMath.sol\\\";\\n\\n// Internal references\\nimport { BaseAdapter } from \\\"./BaseAdapter.sol\\\";\\n\\ninterface PriceOracleLike {\\n    /// @notice Get the price of an underlying asset.\\n    /// @param underlying The underlying asset to get the price of.\\n    /// @return The underlying asset price in ETH as a mantissa (scaled by 1e18).\\n    /// Zero means the price is unavailable.\\n    function price(address underlying) external view returns (uint256);\\n}\\n\\n/// @notice Adapter contract for ERC4626 Vaults\\ncontract ERC4626Adapter is BaseAdapter {\\n    using SafeTransferLib for ERC20;\\n    using FixedMath for uint256;\\n\\n    uint256 public immutable BASE_UINT;\\n    uint256 public immutable SCALE_FACTOR;\\n\\n    constructor(\\n        address _divider,\\n        address _target,\\n        uint128 _ifee,\\n        AdapterParams memory _adapterParams\\n    ) BaseAdapter(_divider, _target, address(ERC4626(_target).asset()), _ifee, _adapterParams) {\\n        uint256 tDecimals = ERC4626(target).decimals();\\n        BASE_UINT = 10**tDecimals;\\n        SCALE_FACTOR = 10**(18 - tDecimals); // we assume targets decimals <= 18\\n        ERC20(underlying).approve(target, type(uint256).max);\\n    }\\n\\n    function scale() external override returns (uint256) {\\n        return ERC4626(target).convertToAssets(BASE_UINT) * SCALE_FACTOR;\\n    }\\n\\n    function scaleStored() external view override returns (uint256) {\\n        return ERC4626(target).convertToAssets(BASE_UINT) * SCALE_FACTOR;\\n    }\\n\\n    function getUnderlyingPrice() external view override returns (uint256) {\\n        return PriceOracleLike(adapterParams.oracle).price(underlying);\\n    }\\n\\n    function wrapUnderlying(uint256 assets) external override returns (uint256 _shares) {\\n        ERC20(underlying).safeTransferFrom(msg.sender, address(this), assets);\\n        _shares = ERC4626(target).deposit(assets, msg.sender);\\n    }\\n\\n    function unwrapTarget(uint256 shares) external override returns (uint256 _assets) {\\n        _assets = ERC4626(target).redeem(shares, msg.sender, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x1a1c8440cb38a0e8835175a0e997f90a69c8100cab88d4ab064d00d20ab283b8\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/extensions/Crop.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\n\\n// Internal references\\nimport { Divider } from \\\"../../../Divider.sol\\\";\\nimport { BaseAdapter } from \\\"../BaseAdapter.sol\\\";\\nimport { FixedMath } from \\\"../../../external/FixedMath.sol\\\";\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\nabstract contract Crop is Trust {\\n    using SafeTransferLib for ERC20;\\n    using FixedMath for uint256;\\n\\n    /// @notice Program state\\n    address public immutable reward;\\n    uint256 public share; // accumulated reward token per collected target\\n    uint256 public rewardBal; // last recorded balance of reward token\\n    uint256 public totalTarget; // total target accumulated by all users\\n    mapping(address => uint256) public tBalance; // target balance per user\\n    mapping(address => uint256) public rewarded; // reward token per user\\n    mapping(address => uint256) public reconciledAmt; // reconciled target amount per user\\n    mapping(address => mapping(uint256 => bool)) public reconciled; // whether a user has been reconciled for a given maturity\\n\\n    event Distributed(address indexed usr, address indexed token, uint256 amount);\\n\\n    constructor(address _divider, address _reward) Trust(_divider) {\\n        reward = _reward;\\n    }\\n\\n    /// @notice Distribute the rewards tokens to the user according to their share\\n    /// @dev The reconcile amount allows us to prevent diluting other users' rewards\\n    function notify(\\n        address _usr,\\n        uint256 amt,\\n        bool join\\n    ) public virtual requiresTrust {\\n        _distribute(_usr);\\n        if (amt > 0) {\\n            if (join) {\\n                totalTarget += amt;\\n                tBalance[_usr] += amt;\\n            } else {\\n                uint256 uReconciledAmt = reconciledAmt[_usr];\\n                if (uReconciledAmt > 0) {\\n                    if (amt < uReconciledAmt) {\\n                        unchecked {\\n                            uReconciledAmt -= amt;\\n                        }\\n                        amt = 0;\\n                    } else {\\n                        unchecked {\\n                            amt -= uReconciledAmt;\\n                        }\\n                        uReconciledAmt = 0;\\n                    }\\n                    reconciledAmt[_usr] = uReconciledAmt;\\n                }\\n                if (amt > 0) {\\n                    totalTarget -= amt;\\n                    tBalance[_usr] -= amt;\\n                }\\n            }\\n        }\\n        rewarded[_usr] = tBalance[_usr].fmulUp(share, FixedMath.RAY);\\n    }\\n\\n    /// @notice Reconciles users target balances to zero by distributing rewards on their holdings,\\n    /// to avoid dilution of next Series' YT holders.\\n    /// This function should be called right after a Series matures and will save the user's YT balance\\n    /// (in target terms) on reconciledAmt[usr]. When `notify()` is triggered, we take that amount and\\n    /// subtract it from the user's target balance (`tBalance`) which will fix (or reconcile)\\n    /// his position to prevent dilution.\\n    /// @param _usrs Users to reconcile\\n    /// @param _maturities Maturities of the series that we want to reconcile users on.\\n    function reconcile(address[] calldata _usrs, uint256[] calldata _maturities) public {\\n        Divider divider = Divider(BaseAdapter(address(this)).divider());\\n        for (uint256 j = 0; j < _maturities.length; j++) {\\n            for (uint256 i = 0; i < _usrs.length; i++) {\\n                address usr = _usrs[i];\\n                uint256 ytBal = ERC20(divider.yt(address(this), _maturities[j])).balanceOf(usr);\\n                // We don't want to reconcile users if maturity has not been reached or if they have already been reconciled\\n                if (_maturities[j] <= block.timestamp && ytBal > 0 && !reconciled[usr][_maturities[j]]) {\\n                    _distribute(usr);\\n                    uint256 tBal = ytBal.fdiv(divider.lscales(address(this), _maturities[j], usr));\\n                    totalTarget -= tBal;\\n                    tBalance[usr] -= tBal;\\n                    reconciledAmt[usr] += tBal; // We increase reconciledAmt with the user's YT balance in target terms\\n                    reconciled[usr][_maturities[j]] = true;\\n                    emit Reconciled(usr, tBal, _maturities[j]);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Distributes rewarded tokens to users proportionally based on their `tBalance`\\n    /// @param _usr User to distribute reward tokens to\\n    function _distribute(address _usr) internal {\\n        _claimReward();\\n\\n        uint256 crop = ERC20(reward).balanceOf(address(this)) - rewardBal;\\n        if (totalTarget > 0) share += (crop.fdiv(totalTarget, FixedMath.RAY));\\n\\n        uint256 last = rewarded[_usr];\\n        uint256 curr = tBalance[_usr].fmul(share, FixedMath.RAY);\\n        if (curr > last) {\\n            unchecked {\\n                ERC20(reward).safeTransfer(_usr, curr - last);\\n            }\\n        }\\n        rewardBal = ERC20(reward).balanceOf(address(this));\\n        emit Distributed(_usr, reward, curr > last ? curr - last : 0);\\n    }\\n\\n    /// @notice Some protocols don't airdrop reward tokens, instead users must claim them.\\n    /// This method may be overriden by child contracts to claim a protocol's rewards\\n    function _claimReward() internal virtual {\\n        return;\\n    }\\n\\n    /* ========== LOGS ========== */\\n\\n    event Reconciled(address indexed usr, uint256 tBal, uint256 maturity);\\n}\\n\",\"keccak256\":\"0xd88fc181408d67d5810cc84bd07b2500c3a274d9270aa53aa0056cc6fd760c97\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/extensions/Crops.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\n\\n// Internal references\\nimport { Divider } from \\\"../../../Divider.sol\\\";\\nimport { BaseAdapter } from \\\"../BaseAdapter.sol\\\";\\nimport { FixedMath } from \\\"../../../external/FixedMath.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\n\\nabstract contract Crops is Trust {\\n    using SafeTransferLib for ERC20;\\n    using FixedMath for uint256;\\n\\n    /// @notice Program state\\n    uint256 public totalTarget; // total target accumulated by all users\\n    mapping(address => uint256) public tBalance; // target balance per user\\n    mapping(address => uint256) public reconciledAmt; // reconciled target amount per user\\n    mapping(address => mapping(uint256 => bool)) public reconciled; // whether a user has been reconciled for a given maturity\\n\\n    address[] public rewardTokens; // reward tokens addresses\\n    mapping(address => Crop) public data;\\n\\n    struct Crop {\\n        // Accumulated reward token per collected target\\n        uint256 shares;\\n        // Last recorded balance of this contract per reward token\\n        uint256 rewardedBalances;\\n        // Rewarded token per token per user\\n        mapping(address => uint256) rewarded;\\n    }\\n\\n    constructor(address _divider, address[] memory _rewardTokens) Trust(msg.sender) {\\n        setIsTrusted(_divider, true);\\n        rewardTokens = _rewardTokens;\\n    }\\n\\n    function notify(\\n        address _usr,\\n        uint256 amt,\\n        bool join\\n    ) public virtual requiresTrust {\\n        _distribute(_usr);\\n        if (amt > 0) {\\n            if (join) {\\n                totalTarget += amt;\\n                tBalance[_usr] += amt;\\n            } else {\\n                uint256 uReconciledAmt = reconciledAmt[_usr];\\n                if (uReconciledAmt > 0) {\\n                    if (amt < uReconciledAmt) {\\n                        unchecked {\\n                            uReconciledAmt -= amt;\\n                        }\\n                        amt = 0;\\n                    } else {\\n                        unchecked {\\n                            amt -= uReconciledAmt;\\n                        }\\n                        uReconciledAmt = 0;\\n                    }\\n                    reconciledAmt[_usr] = uReconciledAmt;\\n                }\\n                if (amt > 0) {\\n                    totalTarget -= amt;\\n                    tBalance[_usr] -= amt;\\n                }\\n            }\\n        }\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            data[rewardTokens[i]].rewarded[_usr] = tBalance[_usr].fmulUp(data[rewardTokens[i]].shares, FixedMath.RAY);\\n        }\\n    }\\n\\n    /// @notice Reconciles users target balances to zero by distributing rewards on their holdings,\\n    /// to avoid dilution of next Series' YT holders.\\n    /// This function should be called right after a Series matures and will save the user's YT balance\\n    /// (in target terms) on reconciledAmt[usr]. When `notify()` is triggered for on a new Series, we will\\n    /// take that amount and subtract it from the user's target balance (`tBalance`) which will fix (or reconcile)\\n    /// his position to prevent dilution.\\n    /// @param _usrs Users to reconcile\\n    /// @param _maturities Maturities of the series that we want to reconcile users on.\\n    function reconcile(address[] calldata _usrs, uint256[] calldata _maturities) public {\\n        Divider divider = Divider(BaseAdapter(address(this)).divider());\\n        for (uint256 j = 0; j < _maturities.length; j++) {\\n            for (uint256 i = 0; i < _usrs.length; i++) {\\n                address usr = _usrs[i];\\n                uint256 ytBal = ERC20(divider.yt(address(this), _maturities[j])).balanceOf(usr);\\n                // We don't want to reconcile users if maturity has not been reached or if they have already been reconciled\\n                if (_maturities[j] <= block.timestamp && ytBal > 0 && !reconciled[usr][_maturities[j]]) {\\n                    _distribute(usr);\\n                    uint256 tBal = ytBal.fdiv(divider.lscales(address(this), _maturities[j], usr));\\n                    totalTarget -= tBal;\\n                    tBalance[usr] -= tBal;\\n                    reconciledAmt[usr] += tBal; // We increase reconciledAmt with the user's YT balance in target terms\\n                    reconciled[usr][_maturities[j]] = true;\\n                    emit Reconciled(usr, tBal, _maturities[j]);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Distributes rewarded tokens to users proportionally based on their `tBalance`\\n    /// @param _usr User to distribute reward tokens to\\n    function _distribute(address _usr) internal {\\n        _claimRewards();\\n\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            uint256 crop = ERC20(rewardTokens[i]).balanceOf(address(this)) - data[rewardTokens[i]].rewardedBalances;\\n            if (totalTarget > 0) data[rewardTokens[i]].shares += (crop.fdiv(totalTarget, FixedMath.RAY));\\n\\n            uint256 last = data[rewardTokens[i]].rewarded[_usr];\\n            uint256 curr = tBalance[_usr].fmul(data[rewardTokens[i]].shares, FixedMath.RAY);\\n            if (curr > last) {\\n                unchecked {\\n                    ERC20(rewardTokens[i]).safeTransfer(_usr, curr - last);\\n                }\\n            }\\n            data[rewardTokens[i]].rewardedBalances = ERC20(rewardTokens[i]).balanceOf(address(this));\\n            emit Distributed(_usr, rewardTokens[i], curr > last ? curr - last : 0);\\n        }\\n    }\\n\\n    /// @notice Some protocols don't airdrop reward tokens, instead users must claim them.\\n    /// This method may be overriden by child contracts to claim a protocol's rewards\\n    function _claimRewards() internal virtual {\\n        return;\\n    }\\n\\n    /// @notice Overrides the rewardTokens array with a new one.\\n    /// @dev Calls _claimRewards() in case the new array contains less reward tokens than the old one.\\n    /// @param _rewardTokens New reward tokens array\\n    function setRewardTokens(address[] memory _rewardTokens) public requiresTrust {\\n        _claimRewards();\\n        rewardTokens = _rewardTokens;\\n        emit RewardTokensChanged(rewardTokens);\\n    }\\n\\n    /* ========== LOGS ========== */\\n\\n    event Distributed(address indexed usr, address indexed token, uint256 amount);\\n    event RewardTokensChanged(address[] indexed rewardTokens);\\n    event Reconciled(address indexed usr, uint256 tBal, uint256 maturity);\\n}\\n\",\"keccak256\":\"0x0c88e9b88c80c5b8af989df938cc8d3a5e2d52ff9456d847d1d9f747c7300659\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/factories/BaseFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// Internal references\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\nimport { BaseAdapter } from \\\"../BaseAdapter.sol\\\";\\nimport { Divider } from \\\"../../../Divider.sol\\\";\\n\\nabstract contract BaseFactory {\\n    /* ========== CONSTANTS ========== */\\n\\n    /// @notice Sets level to `31` by default, which keeps all Divider lifecycle methods public\\n    /// (`issue`, `combine`, `collect`, etc), but not the `onRedeem` hook.\\n    uint48 public constant DEFAULT_LEVEL = 31;\\n\\n    /* ========== PUBLIC IMMUTABLES ========== */\\n\\n    /// @notice Sense core Divider address\\n    address public immutable divider;\\n\\n    /// @notice target -> adapter\\n    mapping(address => address) public adapters;\\n\\n    /// @notice params for adapters deployed with this factory\\n    FactoryParams public factoryParams;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct FactoryParams {\\n        address oracle; // oracle address\\n        address stake; // token to stake at issuance\\n        uint256 stakeSize; // amount to stake at issuance\\n        uint256 minm; // min maturity (seconds after block.timstamp)\\n        uint256 maxm; // max maturity (seconds after block.timstamp)\\n        uint128 ifee; // issuance fee\\n        uint16 mode; // 0 for monthly, 1 for weekly\\n        uint64 tilt; // tilt\\n    }\\n\\n    constructor(address _divider, FactoryParams memory _factoryParams) {\\n        divider = _divider;\\n        factoryParams = _factoryParams;\\n    }\\n\\n    /* ========== REQUIRED DEPLOY ========== */\\n\\n    /// @notice Deploys both an adapter and a target wrapper for the given _target\\n    /// @param _target Address of the Target token\\n    /// @param _data Additional data needed to deploy the adapter\\n    function deployAdapter(address _target, bytes memory _data) external virtual returns (address adapter) {}\\n\\n    /* ========== LOGS ========== */\\n\\n    /// @notice Logs the deployment of the adapter\\n    event AdapterAdded(address addr, address indexed target);\\n}\\n\",\"keccak256\":\"0xffa81c5a8e5fbf8b4eef09e4639ee0d44067531266c7a7bb5e006ae8a05c6de7\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/factories/CropFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// Internal references\\nimport { BaseFactory } from \\\"./BaseFactory.sol\\\";\\n\\nabstract contract CropFactory is BaseFactory {\\n    address public immutable reward;\\n\\n    constructor(\\n        address _divider,\\n        FactoryParams memory _factoryParams,\\n        address _reward\\n    ) BaseFactory(_divider, _factoryParams) {\\n        reward = _reward;\\n    }\\n}\\n\",\"keccak256\":\"0xa40eee50503a7a0909b191e9dddcc0fd9cec961d94fba1ccd4a0a8be74112c80\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/factories/CropsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// Internal references\\nimport { Crops } from \\\"../extensions/Crops.sol\\\";\\nimport { BaseFactory } from \\\"./BaseFactory.sol\\\";\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\n\\nabstract contract CropsFactory is Trust, BaseFactory {\\n    constructor(address _divider, FactoryParams memory _factoryParams)\\n        Trust(msg.sender)\\n        BaseFactory(_divider, _factoryParams)\\n    {}\\n\\n    /// @notice Replace existing reward tokens array with a new one and update adapters passed\\n    /// @param _rewardTokens array of rewards tokens addresses\\n    /// @param _adapters array of adapters to update the rewards tokens on\\n    function setRewardTokens(address[] memory _rewardTokens, address[] memory _adapters) public requiresTrust {\\n        for (uint256 i = 0; i < _adapters.length; i++) {\\n            Crops(_adapters[i]).setRewardTokens(_rewardTokens);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x241af4b2510623615960011a23d53e15e3801453a64ddaaac9de114eda3fc76d\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/external/DateTime.sol\":{\"content\":\"pragma solidity 0.8.11;\\n\\n/// @author Taken from: https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\nlibrary DateTime {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function toDateString(uint256 _timestamp)\\n        internal\\n        pure\\n        returns (\\n            string memory d,\\n            string memory m,\\n            string memory y\\n        )\\n    {\\n        (uint256 year, uint256 month, uint256 day) = timestampToDate(_timestamp);\\n        d = uintToString(day);\\n        m = uintToString(month);\\n        y = uintToString(year);\\n        // append a 0 to numbers < 10 so we should, e.g, 01 instead of just 1\\n        if (day < 10) d = string(abi.encodePacked(\\\"0\\\", d));\\n        if (month < 10) m = string(abi.encodePacked(\\\"0\\\", m));\\n    }\\n\\n    function format(uint256 _timestamp) internal pure returns (string memory datestring) {\\n        string[12] memory months = [\\n            \\\"Jan\\\",\\n            \\\"Feb\\\",\\n            \\\"Mar\\\",\\n            \\\"Apr\\\",\\n            \\\"May\\\",\\n            \\\"June\\\",\\n            \\\"July\\\",\\n            \\\"Aug\\\",\\n            \\\"Sept\\\",\\n            \\\"Oct\\\",\\n            \\\"Nov\\\",\\n            \\\"Dec\\\"\\n        ];\\n        (uint256 year, uint256 month, uint256 day) = timestampToDate(_timestamp);\\n        uint256 last = day % 10;\\n        string memory suffix = \\\"th\\\";\\n        if (day < 11 || day > 20) {\\n            if (last == 1) suffix = \\\"st\\\";\\n            if (last == 2) suffix = \\\"nd\\\";\\n            if (last == 3) suffix = \\\"rd\\\";\\n        }\\n        return string(abi.encodePacked(uintToString(day), suffix, \\\" \\\", months[month - 1], \\\" \\\", uintToString(year)));\\n    }\\n\\n    function getDayOfWeek(uint256 timestamp) internal pure returns (uint256 dayOfWeek) {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    /// Taken from https://stackoverflow.com/questions/47129173/how-to-convert-uint-to-string-in-solidity\\n    function uintToString(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) return \\\"0\\\";\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n}\\n\",\"keccak256\":\"0x143e0eccde997bb161f42af789c33f794f7ddf4574f7e3f0151a2c0f199ada0e\"},\"@sense-finance/v1-core/src/external/FixedMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n/// @title Fixed point arithmetic library\\n/// @author Taken from https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol\\nlibrary FixedMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant RAY = 1e27;\\n\\n    function fmul(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivDown(x, y, baseUnit); // Equivalent to (x * y) / baseUnit rounded down.\\n    }\\n\\n    function fmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function fmulUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivUp(x, y, baseUnit); // Equivalent to (x * y) / baseUnit rounded up.\\n    }\\n\\n    function fmulUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function fdiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivDown(x, baseUnit, y); // Equivalent to (x * baseUnit) / y rounded down.\\n    }\\n\\n    function fdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function fdivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivUp(x, baseUnit, y); // Equivalent to (x * baseUnit) / y rounded up.\\n    }\\n\\n    function fdivUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x96ef1181edb23765121db5f55554d3e44f3fa37352da83bad5ebf65140e80fe7\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/external/flashloan/IERC3156FlashBorrower.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IERC3156FlashBorrower {\\n    /// @dev Receive a flash loan.\\n    /// @param initiator The initiator of the loan.\\n    /// @param token The loan currency.\\n    /// @param amount The amount of tokens lent.\\n    /// @param fee The additional amount of tokens to repay.\\n    /// @param data Arbitrary data structure, intended to contain user-defined parameters.\\n    /// @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xa2007326dfc89668d1864d688373d7e1ee07fee48f605d4f6726224004bdc8e5\"},\"@sense-finance/v1-core/src/external/flashloan/IERC3156FlashLender.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n    /// @dev The amount of currency available to be lent.\\n    /// @param token The loan currency.\\n    /// @return The amount of `token` that can be borrowed.\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /// @dev The fee to be charged for a given loan.\\n    /// @param token The loan currency.\\n    /// @param amount The amount of tokens lent.\\n    /// @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /// @dev Initiate a flash loan.\\n    /// @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n    /// @param token The loan currency.\\n    /// @param amount The amount of tokens lent.\\n    /// @param data Arbitrary data structure, intended to contain user-defined parameters.\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc91333a7ff49db20853c817de2c277a0559a1ee75eb1deeb7d2096a5d1022d61\"},\"@sense-finance/v1-core/src/tests/test-helpers/mocks/MockAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport { BaseAdapter } from \\\"../../../adapters/abstract/BaseAdapter.sol\\\";\\nimport { Crops } from \\\"../../../adapters/abstract/extensions/Crops.sol\\\";\\nimport { Crop } from \\\"../../../adapters/abstract/extensions/Crop.sol\\\";\\nimport { ERC4626Adapter } from \\\"../../../adapters/abstract/ERC4626Adapter.sol\\\";\\nimport { FixedMath } from \\\"../../../external/FixedMath.sol\\\";\\nimport { Divider } from \\\"../../../Divider.sol\\\";\\nimport { YT } from \\\"../../../tokens/YT.sol\\\";\\nimport { MockTarget } from \\\"./MockTarget.sol\\\";\\nimport { MockToken } from \\\"./MockToken.sol\\\";\\nimport { ERC4626 } from \\\"@rari-capital/solmate/src/mixins/ERC4626.sol\\\";\\n\\n// Mock crop adapter\\ncontract MockAdapter is BaseAdapter, Crop {\\n    using FixedMath for uint256;\\n\\n    uint256 internal scaleOverride;\\n    uint256 public INITIAL_VALUE = 1e18;\\n    uint256 internal GROWTH_PER_SECOND = 792744799594; // 25% APY\\n    uint256 public onRedeemCalls;\\n    uint256 public scalingFactor;\\n\\n    struct LScale {\\n        // Timestamp of the last scale value\\n        uint256 timestamp;\\n        // Last scale value\\n        uint256 value;\\n    }\\n\\n    /// @notice Cached scale value from the last call to `scale()`\\n    LScale public lscale;\\n\\n    constructor(\\n        address _divider,\\n        address _target,\\n        address _underlying,\\n        uint128 _ifee,\\n        AdapterParams memory _adapterParams,\\n        address _reward\\n    ) Crop(_divider, _reward) BaseAdapter(_divider, _target, _underlying, _ifee, _adapterParams) {\\n        uint256 tDecimals = MockTarget(_target).decimals();\\n        uint256 uDecimals = MockTarget(_underlying).decimals();\\n        scalingFactor = 10**(tDecimals > uDecimals ? tDecimals - uDecimals : uDecimals - tDecimals);\\n    }\\n\\n    function notify(\\n        address _usr,\\n        uint256 amt,\\n        bool join\\n    ) public override(BaseAdapter, Crop) {\\n        super.notify(_usr, amt, join);\\n    }\\n\\n    function scale() external virtual override returns (uint256 _scale) {\\n        if (scaleOverride > 0) {\\n            _scale = scaleOverride;\\n            lscale.value = scaleOverride;\\n            lscale.timestamp = block.timestamp;\\n        } else {\\n            uint256 gps = GROWTH_PER_SECOND.fmul(99 * (10**(18 - 2)));\\n            uint256 timeDiff = block.timestamp - lscale.timestamp;\\n            _scale = lscale.value > 0 ? (gps * timeDiff).fmul(lscale.value) + lscale.value : INITIAL_VALUE;\\n\\n            if (_scale != lscale.value) {\\n                // update value only if different than the previous\\n                lscale.value = _scale;\\n                lscale.timestamp = block.timestamp;\\n            }\\n        }\\n    }\\n\\n    function scaleStored() external view virtual override returns (uint256) {\\n        return lscale.value == 0 ? INITIAL_VALUE : lscale.value;\\n    }\\n\\n    function _claimReward() internal virtual override {\\n        // MockToken(reward).mint(address(this), 1e18);\\n    }\\n\\n    function wrapUnderlying(uint256 uBal) public virtual override returns (uint256) {\\n        MockTarget target = MockTarget(target);\\n        MockToken underlying = MockToken(target.underlying());\\n        underlying.transferFrom(msg.sender, address(this), uBal);\\n        uint256 mintAmount = uBal.fdivUp(lscale.value);\\n        mintAmount = underlying.decimals() > target.decimals()\\n            ? mintAmount / scalingFactor\\n            : mintAmount * scalingFactor;\\n        target.mint(msg.sender, mintAmount);\\n        return mintAmount;\\n    }\\n\\n    function unwrapTarget(uint256 tBal) external virtual override returns (uint256) {\\n        MockTarget target = MockTarget(target);\\n        MockToken underlying = MockToken(target.underlying());\\n        target.transferFrom(msg.sender, address(this), tBal); // pull target\\n        uint256 mintAmount = tBal.fmul(lscale.value);\\n        mintAmount = underlying.decimals() > target.decimals()\\n            ? mintAmount * scalingFactor\\n            : mintAmount / scalingFactor;\\n        MockToken(target.underlying()).mint(msg.sender, mintAmount);\\n        return mintAmount;\\n    }\\n\\n    function getUnderlyingPrice() external view virtual override returns (uint256) {\\n        return 1e18;\\n    }\\n\\n    function onRedeem(\\n        uint256, /* uBal */\\n        uint256, /* mscale */\\n        uint256, /* maxscale */\\n        uint256 /* tBal */\\n    ) public virtual override {\\n        onRedeemCalls++;\\n    }\\n\\n    function setScale(uint256 _scaleOverride) external {\\n        scaleOverride = _scaleOverride;\\n    }\\n\\n    function doInitSeries(uint256 maturity, address sponsor) external {\\n        Divider(divider).initSeries(address(this), maturity, sponsor);\\n    }\\n\\n    function doIssue(uint256 maturity, uint256 tBal) external {\\n        MockTarget(target).transferFrom(msg.sender, address(this), tBal);\\n        Divider(divider).issue(address(this), maturity, tBal);\\n        (address pt, , address yt, , , , , , ) = Divider(divider).series(address(this), maturity);\\n        MockToken(pt).transfer(msg.sender, MockToken(pt).balanceOf(address(this)));\\n        MockToken(yt).transfer(msg.sender, MockToken(yt).balanceOf(address(this)));\\n    }\\n\\n    function doCombine(uint256 maturity, uint256 uBal) external returns (uint256 tBal) {\\n        tBal = Divider(divider).combine(address(this), maturity, uBal);\\n    }\\n}\\n\\n// Mock ERC4626 crop adapter\\ncontract Mock4626Adapter is ERC4626Adapter, Crop {\\n    using FixedMath for uint256;\\n\\n    uint256 public onRedeemCalls;\\n    uint256 public scalingFactor;\\n\\n    constructor(\\n        address _divider,\\n        address _target,\\n        address _underlying,\\n        uint128 _ifee,\\n        AdapterParams memory _adapterParams,\\n        address _reward\\n    ) ERC4626Adapter(_divider, _target, _ifee, _adapterParams) Crop(_divider, _reward) {\\n        uint256 tDecimals = MockTarget(_target).decimals();\\n        uint256 uDecimals = MockTarget(_underlying).decimals();\\n        scalingFactor = 10**(tDecimals > uDecimals ? tDecimals - uDecimals : uDecimals - tDecimals);\\n    }\\n\\n    function notify(\\n        address _usr,\\n        uint256 amt,\\n        bool join\\n    ) public override(BaseAdapter, Crop) {\\n        super.notify(_usr, amt, join);\\n    }\\n\\n    function lscale() external returns (uint256, uint256) {\\n        return (0, ERC4626(target).convertToAssets(BASE_UINT));\\n    }\\n\\n    function onRedeem(\\n        uint256, /* uBal */\\n        uint256, /* mscale */\\n        uint256, /* maxscale */\\n        uint256 /* tBal */\\n    ) public virtual override {\\n        onRedeemCalls++;\\n    }\\n\\n    function doInitSeries(uint256 maturity, address sponsor) external {\\n        Divider(divider).initSeries(address(this), maturity, sponsor);\\n    }\\n\\n    function doIssue(uint256 maturity, uint256 tBal) external {\\n        MockTarget(target).transferFrom(msg.sender, address(this), tBal);\\n        Divider(divider).issue(address(this), maturity, tBal);\\n        (address pt, , address yt, , , , , , ) = Divider(divider).series(address(this), maturity);\\n        MockToken(pt).transfer(msg.sender, MockToken(pt).balanceOf(address(this)));\\n        MockToken(yt).transfer(msg.sender, MockToken(yt).balanceOf(address(this)));\\n    }\\n\\n    function doCombine(uint256 maturity, uint256 uBal) external returns (uint256 tBal) {\\n        tBal = Divider(divider).combine(address(this), maturity, uBal);\\n    }\\n\\n    function doRedeemPrincipal(uint256 maturity, uint256 uBal) external {\\n        Divider(divider).redeem(address(this), maturity, uBal);\\n    }\\n}\\n\\n// Mock crops adapter\\ncontract MockCropsAdapter is BaseAdapter, Crops {\\n    using FixedMath for uint256;\\n\\n    uint256 internal scaleOverride;\\n    uint256 public INITIAL_VALUE = 1e18;\\n    uint256 internal GROWTH_PER_SECOND = 792744799594; // 25% APY\\n    uint256 public onRedeemCalls;\\n    uint256 public scalingFactor;\\n\\n    struct LScale {\\n        // Timestamp of the last scale value\\n        uint256 timestamp;\\n        // Last scale value\\n        uint256 value;\\n    }\\n\\n    /// @notice Cached scale value from the last call to `scale()`\\n    LScale public lscale;\\n\\n    constructor(\\n        address _divider,\\n        address _target,\\n        address _underlying,\\n        uint128 _ifee,\\n        AdapterParams memory _adapterParams,\\n        address[] memory _rewardTokens\\n    ) Crops(_divider, _rewardTokens) BaseAdapter(_divider, _target, _underlying, _ifee, _adapterParams) {\\n        uint256 tDecimals = MockTarget(_target).decimals();\\n        uint256 uDecimals = MockTarget(_underlying).decimals();\\n        scalingFactor = 10**(tDecimals > uDecimals ? tDecimals - uDecimals : uDecimals - tDecimals);\\n    }\\n\\n    function notify(\\n        address _usr,\\n        uint256 amt,\\n        bool join\\n    ) public override(BaseAdapter, Crops) {\\n        super.notify(_usr, amt, join);\\n    }\\n\\n    function scale() external virtual override returns (uint256 _scale) {\\n        if (scaleOverride > 0) {\\n            _scale = scaleOverride;\\n            lscale.value = scaleOverride;\\n            lscale.timestamp = block.timestamp;\\n        } else {\\n            uint256 gps = GROWTH_PER_SECOND.fmul(99 * (10**(18 - 2)));\\n            uint256 timeDiff = block.timestamp - lscale.timestamp;\\n            _scale = lscale.value > 0 ? (gps * timeDiff).fmul(lscale.value) + lscale.value : INITIAL_VALUE;\\n\\n            if (_scale != lscale.value) {\\n                // update value only if different than the previous\\n                lscale.value = _scale;\\n                lscale.timestamp = block.timestamp;\\n            }\\n        }\\n    }\\n\\n    function scaleStored() external view virtual override returns (uint256) {\\n        return lscale.value == 0 ? INITIAL_VALUE : lscale.value;\\n    }\\n\\n    function _claimRewards() internal virtual override {\\n        // for (uint i = 0; i < rewardTokens.length; i++) {\\n        //     MockToken(rewardTokens[i]).mint(address(this), 1e18);\\n        // }\\n    }\\n\\n    function wrapUnderlying(uint256 uBal) public virtual override returns (uint256) {\\n        MockTarget target = MockTarget(target);\\n        MockToken underlying = MockToken(target.underlying());\\n        underlying.transferFrom(msg.sender, address(this), uBal);\\n        uint256 mintAmount = uBal.fdivUp(lscale.value);\\n        mintAmount = underlying.decimals() > target.decimals()\\n            ? mintAmount / scalingFactor\\n            : mintAmount * scalingFactor;\\n        target.mint(msg.sender, mintAmount);\\n        return mintAmount;\\n    }\\n\\n    function unwrapTarget(uint256 tBal) external virtual override returns (uint256) {\\n        MockTarget target = MockTarget(target);\\n        MockToken underlying = MockToken(target.underlying());\\n        target.transferFrom(msg.sender, address(this), tBal); // pull target\\n        uint256 mintAmount = tBal.fmul(lscale.value);\\n        mintAmount = underlying.decimals() > target.decimals()\\n            ? mintAmount * scalingFactor\\n            : mintAmount / scalingFactor;\\n        MockToken(target.underlying()).mint(msg.sender, mintAmount);\\n        return mintAmount;\\n    }\\n\\n    function getUnderlyingPrice() external view virtual override returns (uint256) {\\n        return 1e18;\\n    }\\n\\n    function onRedeem(\\n        uint256, /* uBal */\\n        uint256, /* mscale */\\n        uint256, /* maxscale */\\n        uint256 /* tBal */\\n    ) public virtual override {\\n        onRedeemCalls++;\\n    }\\n\\n    function setScale(uint256 _scaleOverride) external {\\n        scaleOverride = _scaleOverride;\\n    }\\n\\n    function doInitSeries(uint256 maturity, address sponsor) external {\\n        Divider(divider).initSeries(address(this), maturity, sponsor);\\n    }\\n\\n    function doIssue(uint256 maturity, uint256 tBal) external {\\n        MockTarget(target).transferFrom(msg.sender, address(this), tBal);\\n        Divider(divider).issue(address(this), maturity, tBal);\\n        (address pt, , address yt, , , , , , ) = Divider(divider).series(address(this), maturity);\\n        MockToken(pt).transfer(msg.sender, MockToken(pt).balanceOf(address(this)));\\n        MockToken(yt).transfer(msg.sender, MockToken(yt).balanceOf(address(this)));\\n    }\\n\\n    function doCombine(uint256 maturity, uint256 uBal) external returns (uint256 tBal) {\\n        tBal = Divider(divider).combine(address(this), maturity, uBal);\\n    }\\n\\n    // function doRedeemPrincipal(uint256 maturity, uint256 uBal) external {\\n    //     Divider(divider).redeem(address(this), maturity, uBal);\\n    // }\\n}\\n\\n// Mock ERC4626 crops adapter\\ncontract Mock4626CropsAdapter is ERC4626Adapter, Crops {\\n    using FixedMath for uint256;\\n\\n    uint256 public onRedeemCalls;\\n    uint256 public scalingFactor;\\n\\n    constructor(\\n        address _divider,\\n        address _target,\\n        address _underlying,\\n        uint128 _ifee,\\n        AdapterParams memory _adapterParams,\\n        address[] memory _rewardTokens\\n    ) ERC4626Adapter(_divider, _target, _ifee, _adapterParams) Crops(_divider, _rewardTokens) {\\n        uint256 tDecimals = MockTarget(_target).decimals();\\n        uint256 uDecimals = MockTarget(_underlying).decimals();\\n        scalingFactor = 10**(tDecimals > uDecimals ? tDecimals - uDecimals : uDecimals - tDecimals);\\n    }\\n\\n    function notify(\\n        address _usr,\\n        uint256 amt,\\n        bool join\\n    ) public override(BaseAdapter, Crops) {\\n        super.notify(_usr, amt, join);\\n    }\\n\\n    function onRedeem(\\n        uint256, /* uBal */\\n        uint256, /* mscale */\\n        uint256, /* maxscale */\\n        uint256 /* tBal */\\n    ) public virtual override {\\n        onRedeemCalls++;\\n    }\\n\\n    function doInitSeries(uint256 maturity, address sponsor) external {\\n        Divider(divider).initSeries(address(this), maturity, sponsor);\\n    }\\n\\n    function doIssue(uint256 maturity, uint256 tBal) external {\\n        MockTarget(target).transferFrom(msg.sender, address(this), tBal);\\n        Divider(divider).issue(address(this), maturity, tBal);\\n        (address pt, , address yt, , , , , , ) = Divider(divider).series(address(this), maturity);\\n        MockToken(pt).transfer(msg.sender, MockToken(pt).balanceOf(address(this)));\\n        MockToken(yt).transfer(msg.sender, MockToken(yt).balanceOf(address(this)));\\n    }\\n\\n    function doCombine(uint256 maturity, uint256 uBal) external returns (uint256 tBal) {\\n        tBal = Divider(divider).combine(address(this), maturity, uBal);\\n    }\\n\\n    function doRedeemPrincipal(uint256 maturity, uint256 uBal) external {\\n        Divider(divider).redeem(address(this), maturity, uBal);\\n    }\\n}\\n\\n// Mock base adapter\\ncontract MockBaseAdapter is BaseAdapter {\\n    constructor(\\n        address _divider,\\n        address _target,\\n        address _underlying,\\n        uint128 _ifee,\\n        AdapterParams memory _adapterParams\\n    ) BaseAdapter(_divider, _target, _underlying, _ifee, _adapterParams) {}\\n\\n    function scale() external virtual override returns (uint256 _value) {\\n        return 100e18;\\n    }\\n\\n    function scaleStored() external view virtual override returns (uint256) {\\n        return 100e18;\\n    }\\n\\n    function wrapUnderlying(uint256 amount) external override returns (uint256) {\\n        return 0;\\n    }\\n\\n    function unwrapTarget(uint256 amount) external override returns (uint256) {\\n        return 0;\\n    }\\n\\n    function getUnderlyingPrice() external view override returns (uint256) {\\n        return 1e18;\\n    }\\n}\\n\",\"keccak256\":\"0xe69fb3108515d025851df0f4b962992f075b563d3946cbb80a008ed387b265cd\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/tests/test-helpers/mocks/MockFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// Internal references\\nimport { CropsFactory } from \\\"../../../adapters/abstract/factories/CropsFactory.sol\\\";\\nimport { CropFactory } from \\\"../../../adapters/abstract/factories/CropFactory.sol\\\";\\nimport { Divider } from \\\"../../../Divider.sol\\\";\\nimport { MockAdapter, Mock4626Adapter, MockCropsAdapter, Mock4626CropsAdapter } from \\\"./MockAdapter.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\nimport { BaseAdapter } from \\\"../../../adapters/abstract/BaseAdapter.sol\\\";\\n\\n// External references\\nimport { Bytes32AddressLib } from \\\"@rari-capital/solmate/src/utils/Bytes32AddressLib.sol\\\";\\n\\ninterface MockTargetLike {\\n    function underlying() external view returns (address);\\n\\n    function asset() external view returns (address);\\n}\\n\\ncontract MockFactory is CropFactory {\\n    using Bytes32AddressLib for address;\\n\\n    mapping(address => bool) public targets;\\n\\n    constructor(\\n        address _divider,\\n        FactoryParams memory _factoryParams,\\n        address _reward\\n    ) CropFactory(_divider, _factoryParams, _reward) {}\\n\\n    function addTarget(address _target, bool status) external {\\n        targets[_target] = status;\\n    }\\n\\n    function deployAdapter(address _target, bytes memory data) external override returns (address adapter) {\\n        if (!targets[_target]) revert Errors.TargetNotSupported();\\n        if (Divider(divider).periphery() != msg.sender) revert Errors.OnlyPeriphery();\\n\\n        // Use the CREATE2 opcode to deploy a new Adapter contract.\\n        // This will revert if a MockAdapter with the provided target has already\\n        // been deployed, as the salt would be the same and we can't deploy with it twice.\\n        BaseAdapter.AdapterParams memory adapterParams = BaseAdapter.AdapterParams({\\n            oracle: factoryParams.oracle,\\n            stake: factoryParams.stake,\\n            stakeSize: factoryParams.stakeSize,\\n            minm: factoryParams.minm,\\n            maxm: factoryParams.maxm,\\n            mode: factoryParams.mode,\\n            tilt: factoryParams.tilt,\\n            level: DEFAULT_LEVEL\\n        });\\n\\n        adapter = address(\\n            new MockAdapter{ salt: _target.fillLast12Bytes() }(\\n                divider,\\n                _target,\\n                MockTargetLike(_target).underlying(),\\n                factoryParams.ifee,\\n                adapterParams,\\n                reward\\n            )\\n        );\\n    }\\n}\\n\\ncontract Mock4626CropFactory is CropFactory {\\n    using Bytes32AddressLib for address;\\n\\n    mapping(address => bool) public targets;\\n    bool public is4626;\\n\\n    constructor(\\n        address _divider,\\n        FactoryParams memory _factoryParams,\\n        address _reward\\n    ) CropFactory(_divider, _factoryParams, _reward) {}\\n\\n    function addTarget(address _target, bool status) external {\\n        targets[_target] = status;\\n    }\\n\\n    function deployAdapter(address _target, bytes memory data) external override returns (address adapter) {\\n        if (!targets[_target]) revert Errors.TargetNotSupported();\\n        if (Divider(divider).periphery() != msg.sender) revert Errors.OnlyPeriphery();\\n\\n        // Use the CREATE2 opcode to deploy a new Adapter contract.\\n        // This will revert if a MockAdapter with the provided target has already\\n        // been deployed, as the salt would be the same and we can't deploy with it twice.\\n        BaseAdapter.AdapterParams memory adapterParams = BaseAdapter.AdapterParams({\\n            oracle: factoryParams.oracle,\\n            stake: factoryParams.stake,\\n            stakeSize: factoryParams.stakeSize,\\n            minm: factoryParams.minm,\\n            maxm: factoryParams.maxm,\\n            mode: factoryParams.mode,\\n            tilt: factoryParams.tilt,\\n            level: DEFAULT_LEVEL\\n        });\\n\\n        adapter = address(\\n            new Mock4626Adapter{ salt: _target.fillLast12Bytes() }(\\n                divider,\\n                _target,\\n                MockTargetLike(_target).asset(),\\n                factoryParams.ifee,\\n                adapterParams,\\n                reward\\n            )\\n        );\\n    }\\n}\\n\\ncontract MockCropsFactory is CropsFactory {\\n    using Bytes32AddressLib for address;\\n\\n    mapping(address => bool) public targets;\\n    address[] rewardTokens;\\n\\n    constructor(\\n        address _divider,\\n        FactoryParams memory _factoryParams,\\n        address[] memory _rewardTokens\\n    ) CropsFactory(_divider, _factoryParams) {\\n        rewardTokens = _rewardTokens;\\n    }\\n\\n    function addTarget(address _target, bool status) external {\\n        targets[_target] = status;\\n    }\\n\\n    function deployAdapter(address _target, bytes memory data) external override returns (address adapter) {\\n        if (!targets[_target]) revert Errors.TargetNotSupported();\\n        if (Divider(divider).periphery() != msg.sender) revert Errors.OnlyPeriphery();\\n\\n        // Use the CREATE2 opcode to deploy a new Adapter contract.\\n        // This will revert if a MockCropsAdapter with the provided target has already\\n        // been deployed, as the salt would be the same and we can't deploy with it twice.\\n        BaseAdapter.AdapterParams memory adapterParams = BaseAdapter.AdapterParams({\\n            oracle: factoryParams.oracle,\\n            stake: factoryParams.stake,\\n            stakeSize: factoryParams.stakeSize,\\n            minm: factoryParams.minm,\\n            maxm: factoryParams.maxm,\\n            mode: factoryParams.mode,\\n            tilt: factoryParams.tilt,\\n            level: DEFAULT_LEVEL\\n        });\\n\\n        adapter = address(\\n            new MockCropsAdapter{ salt: _target.fillLast12Bytes() }(\\n                divider,\\n                _target,\\n                MockTargetLike(_target).underlying(),\\n                factoryParams.ifee,\\n                adapterParams,\\n                rewardTokens\\n            )\\n        );\\n    }\\n}\\n\\ncontract Mock4626CropsFactory is CropsFactory {\\n    using Bytes32AddressLib for address;\\n\\n    mapping(address => bool) public targets;\\n    address[] rewardTokens;\\n\\n    constructor(\\n        address _divider,\\n        FactoryParams memory _factoryParams,\\n        address[] memory _rewardTokens\\n    ) CropsFactory(_divider, _factoryParams) {\\n        rewardTokens = _rewardTokens;\\n    }\\n\\n    function addTarget(address _target, bool status) external {\\n        targets[_target] = status;\\n    }\\n\\n    function deployAdapter(address _target, bytes memory data) external override returns (address adapter) {\\n        if (!targets[_target]) revert Errors.TargetNotSupported();\\n        if (Divider(divider).periphery() != msg.sender) revert Errors.OnlyPeriphery();\\n\\n        // Use the CREATE2 opcode to deploy a new Adapter contract.\\n        // This will revert if a MockCropsAdapter with the provided target has already\\n        // been deployed, as the salt would be the same and we can't deploy with it twice.\\n        BaseAdapter.AdapterParams memory adapterParams = BaseAdapter.AdapterParams({\\n            oracle: factoryParams.oracle,\\n            stake: factoryParams.stake,\\n            stakeSize: factoryParams.stakeSize,\\n            minm: factoryParams.minm,\\n            maxm: factoryParams.maxm,\\n            mode: factoryParams.mode,\\n            tilt: factoryParams.tilt,\\n            level: DEFAULT_LEVEL\\n        });\\n\\n        adapter = address(\\n            new Mock4626CropsAdapter{ salt: _target.fillLast12Bytes() }(\\n                divider,\\n                _target,\\n                MockTargetLike(_target).asset(),\\n                factoryParams.ifee,\\n                adapterParams,\\n                rewardTokens\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x99788cbfd87bcf40761dfced2c432445c4057f75b71046fcf11d2d2a6290a58d\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/tests/test-helpers/mocks/MockTarget.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { MockToken, AuthdMockToken } from \\\"./MockToken.sol\\\";\\nimport { ERC20 as ZeppelinERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract MockTarget is MockToken {\\n    address public underlying;\\n\\n    constructor(\\n        address _underlying,\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimal\\n    ) MockToken(_name, _symbol, _decimal) {\\n        underlying = _underlying;\\n    }\\n}\\n\\ncontract AuthdMockTarget is AuthdMockToken {\\n    address public underlying;\\n\\n    constructor(\\n        address _underlying,\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimal\\n    ) AuthdMockToken(_name, _symbol, _decimal) {\\n        underlying = _underlying;\\n    }\\n}\\n\",\"keccak256\":\"0x34abf2406fdf1ad025f05138d524518a9f063955ba495dc0b19593c23956bbb6\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/tests/test-helpers/mocks/MockToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\n\\n// Internal references\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\n\\ncontract MockToken is ERC20 {\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimal\\n    ) ERC20(_name, _symbol, _decimal) {}\\n\\n    function mint(address account, uint256 amount) external virtual {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external virtual {\\n        _burn(account, amount);\\n    }\\n}\\n\\ncontract AuthdMockToken is ERC20, Trust {\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimal\\n    ) ERC20(_name, _symbol, _decimal) Trust(msg.sender) {}\\n\\n    function mint(address account, uint256 amount) external virtual requiresTrust {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external virtual requiresTrust {\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x47709e7c30fb4de4beb133f075beee8eac900d65a80ea9943975856189bd97c8\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/tokens/Token.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\n\\n// Internal references\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\n\\n/// @title Base Token\\ncontract Token is ERC20, Trust {\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        address _trusted\\n    ) ERC20(_name, _symbol, _decimals) Trust(_trusted) {}\\n\\n    /// @param usr The address to send the minted tokens\\n    /// @param amount The amount to be minted\\n    function mint(address usr, uint256 amount) public requiresTrust {\\n        _mint(usr, amount);\\n    }\\n\\n    /// @param usr The address from where to burn tokens from\\n    /// @param amount The amount to be burned\\n    function burn(address usr, uint256 amount) public requiresTrust {\\n        _burn(usr, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcb8e50d0f9ded712e0db2aa3c5dd889c64b525a0b44b4b2fc6fddcebf092ff10\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/tokens/YT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// Internal references\\nimport { Divider } from \\\"../Divider.sol\\\";\\nimport { Token } from \\\"./Token.sol\\\";\\n\\n/// @title Yield Token\\n/// @notice Strips off excess before every transfer\\ncontract YT is Token {\\n    address public immutable adapter;\\n    address public immutable divider;\\n    uint256 public immutable maturity;\\n\\n    constructor(\\n        address _adapter,\\n        uint256 _maturity,\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        address _divider\\n    ) Token(_name, _symbol, _decimals, _divider) {\\n        adapter = _adapter;\\n        maturity = _maturity;\\n        divider = _divider;\\n    }\\n\\n    function collect() external returns (uint256 _collected) {\\n        return Divider(divider).collect(msg.sender, adapter, maturity, 0, address(0));\\n    }\\n\\n    function transfer(address to, uint256 value) public override returns (bool) {\\n        Divider(divider).collect(msg.sender, adapter, maturity, value, to);\\n        return super.transfer(to, value);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public override returns (bool) {\\n        if (value > 0) Divider(divider).collect(from, adapter, maturity, value, to);\\n        return super.transferFrom(from, to, value);\\n    }\\n}\\n\",\"keccak256\":\"0x3685a54f6852f9c31e893b96277fbdac81f7dece5bb4b98d69c7ca2cd2fd3a0d\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-utils/src/Trust.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.0;\\n\\n/// @notice Ultra minimal authorization logic for smart contracts.\\n/// @author From https://github.com/Rari-Capital/solmate/blob/fab107565a51674f3a3b5bfdaacc67f6179b1a9b/src/auth/Trust.sol\\nabstract contract Trust {\\n    event UserTrustUpdated(address indexed user, bool trusted);\\n\\n    mapping(address => bool) public isTrusted;\\n\\n    constructor(address initialUser) {\\n        isTrusted[initialUser] = true;\\n\\n        emit UserTrustUpdated(initialUser, true);\\n    }\\n\\n    function setIsTrusted(address user, bool trusted) public virtual requiresTrust {\\n        isTrusted[user] = trusted;\\n\\n        emit UserTrustUpdated(user, trusted);\\n    }\\n\\n    modifier requiresTrust() {\\n        require(isTrusted[msg.sender], \\\"UNTRUSTED\\\");\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x2d3887076c81425d3954aea7735aebd9093e3df69c8132b1713fae4a34201d43\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-utils/src/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.4;\\n\\nlibrary Errors {\\n    // Auth\\n    error CombineRestricted();\\n    error IssuanceRestricted();\\n    error NotAuthorized();\\n    error OnlyYT();\\n    error OnlyDivider();\\n    error OnlyPeriphery();\\n    error OnlyPermissionless();\\n    error RedeemRestricted();\\n    error Untrusted();\\n\\n    // Adapters\\n    error TokenNotSupported();\\n    error FlashCallbackFailed();\\n    error SenderNotEligible();\\n    error TargetMismatch();\\n    error TargetNotSupported();\\n\\n    // Divider\\n    error AlreadySettled();\\n    error CollectNotSettled();\\n    error GuardCapReached();\\n    error IssuanceFeeCapExceeded();\\n    error IssueOnSettle();\\n    error NotSettled();\\n\\n    // Input & validations\\n    error AlreadyInitialized();\\n    error DuplicateSeries();\\n    error ExistingValue();\\n    error InvalidAdapter();\\n    error InvalidMaturity();\\n    error InvalidParam();\\n    error NotImplemented();\\n    error OutOfWindowBoundaries();\\n    error SeriesDoesNotExist();\\n    error SwapTooSmall();\\n    error TargetParamsNotSet();\\n    error PoolParamsNotSet();\\n    error PTParamsNotSet();\\n\\n    // Periphery\\n    error FactoryNotSupported();\\n    error FlashBorrowFailed();\\n    error FlashUntrustedBorrower();\\n    error FlashUntrustedLoanInitiator();\\n    error UnexpectedSwapAmount();\\n    error TooMuchLeftoverTarget();\\n\\n    // Fuse\\n    error AdapterNotSet();\\n    error FailedBecomeAdmin();\\n    error FailedAddTargetMarket();\\n    error FailedToAddPTMarket();\\n    error FailedAddLpMarket();\\n    error OracleNotReady();\\n    error PoolAlreadyDeployed();\\n    error PoolNotDeployed();\\n    error PoolNotSet();\\n    error SeriesNotQueued();\\n    error TargetExists();\\n    error TargetNotInFuse();\\n\\n    // Tokens\\n    error MintFailed();\\n    error RedeemFailed();\\n    error TransferFailed();\\n}\\n\",\"keccak256\":\"0x88abffbe0c2a613aba67a04b984762ae0e3b5d0fd44021a1625b5fe53e8749d5\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-utils/src/libs/Levels.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.0;\\n\\nlibrary Levels {\\n    uint256 private constant _INIT_BIT = 0x1;\\n    uint256 private constant _ISSUE_BIT = 0x2;\\n    uint256 private constant _COMBINE_BIT = 0x4;\\n    uint256 private constant _COLLECT_BIT = 0x8;\\n    uint256 private constant _REDEEM_BIT = 0x10;\\n    uint256 private constant _REDEEM_HOOK_BIT = 0x20;\\n\\n    function initRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _INIT_BIT != _INIT_BIT;\\n    }\\n\\n    function issueRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _ISSUE_BIT != _ISSUE_BIT;\\n    }\\n\\n    function combineRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _COMBINE_BIT != _COMBINE_BIT;\\n    }\\n\\n    function collectDisabled(uint256 level) internal pure returns (bool) {\\n        return level & _COLLECT_BIT != _COLLECT_BIT;\\n    }\\n\\n    function redeemRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _REDEEM_BIT != _REDEEM_BIT;\\n    }\\n\\n    function redeemHookDisabled(uint256 level) internal pure returns (bool) {\\n        return level & _REDEEM_HOOK_BIT != _REDEEM_HOOK_BIT;\\n    }\\n}\\n\",\"keccak256\":\"0x6c71e17beb73fca7577fb8868086159303eaecb1b397a446e8891b42f73fd502\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620050a5380380620050a583398101604081905262000034916200031a565b3360008181526020818152604091829020805460ff19166001908117909155915191825285928592849284929182917fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a2506001600160a01b0391821660809081528151600280549185166001600160a01b031992831617905560208084015160038054919096169216919091179093556040820151600455606082015160055581015160065560a08101516007805460c084015160e0909401516001600160401b0316600160901b02600160901b600160d01b031961ffff909516600160801b026001600160901b03199092166001600160801b039094169390931717929092161790558351620001589350600992509084019062000162565b505050506200041c565b828054828255906000526020600020908101928215620001ba579160200282015b82811115620001ba57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000183565b50620001c8929150620001cc565b5090565b5b80821115620001c85760008155600101620001cd565b80516001600160a01b0381168114620001fb57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b03811182821017156200023c576200023c62000200565b60405290565b805161ffff81168114620001fb57600080fd5b80516001600160401b0381168114620001fb57600080fd5b600082601f8301126200027f57600080fd5b815160206001600160401b03808311156200029e576200029e62000200565b8260051b604051601f19603f83011681018181108482111715620002c657620002c662000200565b604052938452858101830193838101925087851115620002e557600080fd5b83870191505b848210156200030f57620002ff82620001e3565b83529183019190830190620002eb565b979650505050505050565b60008060008385036101408112156200033257600080fd5b6200033d85620001e3565b935061010080601f19830112156200035457600080fd5b6200035e62000216565b91506200036e60208701620001e3565b82526200037e60408701620001e3565b6020830152606086015160408301526080860151606083015260a0860151608083015260c086015160018060801b0381168114620003bb57600080fd5b60a0830152620003ce60e0870162000242565b60c0830152620003e081870162000255565b60e0830152506101208501519092506001600160401b038111156200040457600080fd5b62000412868287016200026d565b9150509250925092565b608051614c60620004456000396000818160f10152818161050201526106a20152614c606000f3fe60806040523480156200001157600080fd5b5060043610620000cd5760003560e01c806382d254ea116200007f57806396d64879116200006257806396d64879146200022a578063bbe451d51462000250578063e5711ffc146200034957600080fd5b806382d254ea14620001f257806393d4750c146200020957600080fd5b80633c4598d011620000b45780633c4598d0146200013d5780633cad2dcd14620001a4578063562c478414620001bb57600080fd5b80631393916a14620000d2578063378efa3714620000eb575b600080fd5b620000e9620000e3366004620008fc565b62000382565b005b620001137f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b620000e96200014e366004620008fc565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260086020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b62000113620001b5366004620009bf565b62000489565b620001e1620001cc36600462000a90565b60086020526000908152604090205460ff1681565b604051901515815260200162000134565b620000e96200020336600462000b4b565b6200079a565b62000212601f81565b60405165ffffffffffff909116815260200162000134565b620001e16200023b36600462000a90565b60006020819052908152604090205460ff1681565b600254600354600454600554600654600754620002d59573ffffffffffffffffffffffffffffffffffffffff9081169516939291906fffffffffffffffffffffffffffffffff811690700100000000000000000000000000000000810461ffff16907201000000000000000000000000000000000000900467ffffffffffffffff1688565b6040805173ffffffffffffffffffffffffffffffffffffffff998a16815298909716602089015295870194909452606086019290925260808501526fffffffffffffffffffffffffffffffff1660a084015261ffff1660c083015267ffffffffffffffff1660e08201526101000162000134565b620001136200035a36600462000a90565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b3360009081526020819052604090205460ff1662000401576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e54525553544544000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000818152602081815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526008602052604081205460ff16620004e9576040517fa2a94ace00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166377aace1a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200056c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000592919062000bb6565b73ffffffffffffffffffffffffffffffffffffffff1614620005e0576040517ffb02114900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516101008101825260025473ffffffffffffffffffffffffffffffffffffffff90811682526003541660208201526004549181019190915260055460608083019190915260065460808301526007547201000000000000000000000000000000000000810467ffffffffffffffff1660a0840152601f60c0840152700100000000000000000000000000000000900461ffff1660e083015284901b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000858673ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200070e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000734919062000bb6565b6007546040516fffffffffffffffffffffffffffffffff9091169086906009906200075f90620008c8565b620007709695949392919062000c2e565b8190604051809103906000f590508015801562000791573d6000803e3d6000fd5b50949350505050565b3360009081526020819052604090205460ff1662000815576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e5452555354454400000000000000000000000000000000000000000000006044820152606401620003f8565b60005b8151811015620008c35781818151811062000837576200083762000d0d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663201e81a8846040518263ffffffff1660e01b815260040162000879919062000d3c565b600060405180830381600087803b1580156200089457600080fd5b505af1158015620008a9573d6000803e3d6000fd5b505050508080620008ba9062000d98565b91505062000818565b505050565b613e318062000dfa83390190565b73ffffffffffffffffffffffffffffffffffffffff81168114620008f957600080fd5b50565b600080604083850312156200091057600080fd5b82356200091d81620008d6565b9150602083013580151581146200093357600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715620009b757620009b76200093e565b604052919050565b60008060408385031215620009d357600080fd5b8235620009e081620008d6565b915060208381013567ffffffffffffffff80821115620009ff57600080fd5b818601915086601f83011262000a1457600080fd5b81358181111562000a295762000a296200093e565b62000a5b847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016200096d565b9150808252878482850101111562000a7257600080fd5b80848401858401376000848284010152508093505050509250929050565b60006020828403121562000aa357600080fd5b813562000ab081620008d6565b9392505050565b600082601f83011262000ac957600080fd5b8135602067ffffffffffffffff82111562000ae85762000ae86200093e565b8160051b62000af98282016200096d565b928352848101820192828101908785111562000b1457600080fd5b83870192505b8483101562000b4057823562000b3081620008d6565b8252918301919083019062000b1a565b979650505050505050565b6000806040838503121562000b5f57600080fd5b823567ffffffffffffffff8082111562000b7857600080fd5b62000b868683870162000ab7565b9350602085013591508082111562000b9d57600080fd5b5062000bac8582860162000ab7565b9150509250929050565b60006020828403121562000bc957600080fd5b815162000ab081620008d6565b6000815480845260208085019450836000528060002060005b8381101562000c2357815473ffffffffffffffffffffffffffffffffffffffff168752958201956001918201910162000bef565b509495945050505050565b60006101a073ffffffffffffffffffffffffffffffffffffffff808a168452808916602085015280881660408501526fffffffffffffffffffffffffffffffff871660608501528086511660808501528060208701511660a085015250604085015160c0840152606085015160e0840152608085015161010084015267ffffffffffffffff60a08601511661012084015260c085015162000cda61014085018265ffffffffffff169052565b5060e085015161ffff16610160840152610180830181905262000d008184018562000bd6565b9998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020808252825182820181905260009190848201906040850190845b8181101562000d8c57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010162000d58565b50909695505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000df2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fe6101406040523480156200001257600080fd5b5060405162003e3138038062003e31833981016040819052620000359162000994565b858133888887878383846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200007d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a3919062000ada565b6001600160a01b03808416608090815283821660a081815284841660c09081526001600160801b038a1660e09081528951600080549188166001600160a01b031992831617815560208c015160018054919099169216919091179096556040808b015160025560608b0151600355948a01516004908155928a015160058054938c0151928c015161ffff16600160701b0261ffff60701b1965ffffffffffff90941668010000000000000000026001600160701b03199095166001600160401b0390931692909217939093179190911617905582516306fdde0360e01b81529251899489946306fdde039381810193918290030181865afa158015620001ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001d7919081019062000b34565b604051602001620001e9919062000bd2565b604051602081830303815290604052600690805190602001906200020f92919062000721565b50836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200024f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000279919081019062000b34565b6040516020016200028b919062000c00565b60405160208183030381529060405260079080519060200190620002b192919062000721565b5060805160405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529085169063095ea7b3906044016020604051808303816000875af115801562000307573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200032d919062000c2e565b50602081015160805160405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af115801562000387573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003ad919062000c2e565b505050505050600060a0516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200041c919062000c52565b60ff1690506200042e81600a62000d8c565b610100526200043f81601262000d9a565b6200044c90600a62000d8c565b6101205260c05160a05160405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015620004a7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004cd919062000c2e565b505050506001600160a01b038316600081815260086020908152604091829020805460ff1916600190811790915591519182529193507fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d98692500160405180910390a2506200053d82600162000672565b80516200055290600d906020840190620007b0565b5050506000856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000596573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005bc919062000c52565b60ff1690506000856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000602573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000628919062000c52565b60ff169050808211620006475762000641828262000d9a565b62000653565b62000653818362000d9a565b6200066090600a62000d8c565b6010555062000df19650505050505050565b3360009081526008602052604090205460ff16620006c25760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640160405180910390fd5b6001600160a01b038216600081815260086020908152604091829020805460ff191685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b8280546200072f9062000db4565b90600052602060002090601f0160209004810192826200075357600085556200079e565b82601f106200076e57805160ff19168380011785556200079e565b828001600101855582156200079e579182015b828111156200079e57825182559160200191906001019062000781565b50620007ac92915062000808565b5090565b8280548282559060005260206000209081019282156200079e579160200282015b828111156200079e57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620007d1565b5b80821115620007ac576000815560010162000809565b6001600160a01b03811681146200083557600080fd5b50565b805162000845816200081f565b919050565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b03811182821017156200088657620008866200084a565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620008b757620008b76200084a565b604052919050565b80516001600160401b03811681146200084557600080fd5b805165ffffffffffff811681146200084557600080fd5b805161ffff811681146200084557600080fd5b600082601f8301126200091357600080fd5b815160206001600160401b038211156200093157620009316200084a565b8160051b620009428282016200088c565b92835284810182019282810190878511156200095d57600080fd5b83870192505b848310156200098957825162000979816200081f565b8252918301919083019062000963565b979650505050505050565b6000806000806000808688036101a0811215620009b057600080fd5b8751620009bd816200081f565b6020890151909750620009d0816200081f565b6040890151909650620009e3816200081f565b60608901519095506001600160801b038116811462000a0157600080fd5b9350610100607f19820181131562000a1857600080fd5b62000a2262000860565b9150608089015162000a34816200081f565b825262000a4460a08a0162000838565b602083015260c0890151604083015260e08901516060830152880151608082015262000a746101208901620008bf565b60a082015262000a886101408901620008d7565b60c082015262000a9c6101608901620008ee565b60e08201526101808801519092506001600160401b0381111562000abf57600080fd5b62000acd89828a0162000901565b9150509295509295509295565b60006020828403121562000aed57600080fd5b815162000afa816200081f565b9392505050565b60005b8381101562000b1e57818101518382015260200162000b04565b8381111562000b2e576000848401525b50505050565b60006020828403121562000b4757600080fd5b81516001600160401b038082111562000b5f57600080fd5b818401915084601f83011262000b7457600080fd5b81518181111562000b895762000b896200084a565b62000b9e601f8201601f19166020016200088c565b915080825285602082850101111562000bb657600080fd5b62000bc981602084016020860162000b01565b50949350505050565b6000825162000be681846020870162000b01565b671020b230b83a32b960c11b920191825250600801919050565b6000825162000c1481846020870162000b01565b6716b0b230b83a32b960c11b920191825250600801919050565b60006020828403121562000c4157600080fd5b8151801515811462000afa57600080fd5b60006020828403121562000c6557600080fd5b815160ff8116811462000afa57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000cce57816000190482111562000cb25762000cb262000c77565b8085161562000cc057918102915b93841c939080029062000c92565b509250929050565b60008262000ce75750600162000d86565b8162000cf65750600062000d86565b816001811462000d0f576002811462000d1a5762000d3a565b600191505062000d86565b60ff84111562000d2e5762000d2e62000c77565b50506001821b62000d86565b5060208310610133831016604e8410600b841016171562000d5f575081810a62000d86565b62000d6b838362000c8d565b806000190482111562000d825762000d8262000c77565b0290505b92915050565b600062000afa838362000cd6565b60008282101562000daf5762000daf62000c77565b500390565b600181811c9082168062000dc957607f821691505b6020821081141562000deb57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516101005161012051612f6b62000ec66000396000818161077d0152610adc0152600081816107560152610ab3015260006106c20152600081816105eb01528181610bce0152610c5e01526000818161047d015281816107c401528181610b1301528181610cbb01528181610d8301528181610e02015281816118990152818161190f015281816119f70152611d3b0152600081816104f601528181610ec101528181610f93015281816117a501528181611ad801528181611bd40152611cc50152612f6b6000f3fe608060405234801561001057600080fd5b50600436106102d35760003560e01c80636f307dc311610186578063b90d3d0c116100e3578063d01c6f2911610097578063da4ca41311610071578063da4ca413146107f9578063ed3437f814610802578063f51e181a1461044657600080fd5b8063d01c6f291461079f578063d4b83992146107bf578063d9d98ce4146107e657600080fd5b8063cc074d49116100c8578063cc074d491461073e578063cce5938614610751578063ce4b5bbe1461077857600080fd5b8063b90d3d0c14610705578063c39a3b291461072c57600080fd5b80638d8475c41161013a57806396d648791161011f57806396d6487914610687578063b484972a146106aa578063b8c15a9f146106bd57600080fd5b80638d8475c41461066c57806395d89b411461067f57600080fd5b806375b2cda81161016b57806375b2cda8146106295780637bb7bed1146106325780638237e5381461064557600080fd5b80636f307dc3146105e65780636fd5ae151461060d57600080fd5b8063378efa3711610234578063572acb9f116101e8578063613255ab116101cd578063613255ab146105a457806362e10b4e146105b757806364c56e3c146105ca57600080fd5b8063572acb9f1461057e5780635cffe9de1461059157600080fd5b80634aae9fed116102195780634aae9fed1461054557806351c39ea11461055857806353e0719e1461056b57600080fd5b8063378efa37146104f1578063468f02d21461053d57600080fd5b8063201e81a81161028b57806327b327d01161027057806327b327d01461045c578063295a5212146104b357806329a43608146104d157600080fd5b8063201e81a814610433578063226778491461044657600080fd5b80630e122423116102bc5780630e122423146103cd5780631393916a1461040b57806314282f581461042057600080fd5b806306fdde03146102d8578063083118d5146102f6575b600080fd5b6102e061080b565b6040516102ed9190612750565b60405180910390f35b6000546001546002546003546004546005546103649573ffffffffffffffffffffffffffffffffffffffff90811695169392919067ffffffffffffffff81169068010000000000000000810465ffffffffffff16906e010000000000000000000000000000900461ffff1688565b6040805173ffffffffffffffffffffffffffffffffffffffff998a168152989097166020890152958701949094526060860192909252608085015267ffffffffffffffff1660a084015265ffffffffffff1660c083015261ffff1660e0820152610100016102ed565b6103fb6103db3660046127f8565b600c60209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016102ed565b61041e610419366004612832565b610899565b005b61041e61042e36600461286b565b6109a1565b61041e6104413660046128cc565b6109bc565b61044e610a8b565b6040519081526020016102ed565b6001546002546040805173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116825290931660208401528201526060016102ed565b6005546e010000000000000000000000000000900461ffff1661044e565b61044e6104df3660046129af565b600a6020526000908152604090205481565b6105187f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102ed565b61044e610b8d565b61044e6105533660046129cc565b610c42565b61044e6105663660046129cc565b610d44565b61041e6105793660046129e5565b610dc7565b61041e61058c366004612a53565b61126c565b6103fb61059f366004612abf565b61178a565b61044e6105b23660046129af565b611a2c565b61044e6105c53660046129e5565b611a99565b6003546004545b604080519283526020830191909152016102ed565b6105187f000000000000000000000000000000000000000000000000000000000000000081565b60055468010000000000000000900465ffffffffffff1661044e565b61044e600f5481565b6105186106403660046129cc565b611b61565b61044e7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd981565b61041e61067a3660046129e5565b611b98565b6102e0611c5b565b6103fb6106953660046129af565b60086020526000908152604090205460ff1681565b61041e6106b8366004612b5e565b611c68565b6106e47f000000000000000000000000000000000000000000000000000000000000000081565b6040516fffffffffffffffffffffffffffffffff90911681526020016102ed565b6105d16107133660046129af565b600e602052600090815260409020805460019091015482565b60055467ffffffffffffffff1661044e565b61041e61074c366004612ba0565b611c73565b61044e7f000000000000000000000000000000000000000000000000000000000000000081565b61044e7f000000000000000000000000000000000000000000000000000000000000000081565b61044e6107ad3660046129af565b600b6020526000908152604090205481565b6105187f000000000000000000000000000000000000000000000000000000000000000081565b61044e6107f43660046127f8565b611d37565b61044e60095481565b61044e60105481565b6006805461081890612bc5565b80601f016020809104026020016040519081016040528092919081815260200182805461084490612bc5565b80156108915780601f1061086657610100808354040283529160200191610891565b820191906000526020600020905b81548152906001019060200180831161087457829003601f168201915b505050505081565b3360009081526008602052604090205460ff16610917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e54525553544544000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526008602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b600f80549060006109b183612c48565b919050555050505050565b3360009081526008602052604090205460ff16610a35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e545255535445440000000000000000000000000000000000000000000000604482015260640161090e565b8051610a4890600d9060208401906126b1565b50600d604051610a589190612c81565b604051908190038120907f45fae61b076570d71d045d3f03e5fa6b6401bebddde54161c7126c56a5ce7d6590600090a250565b6040517f07a2d13a0000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000009073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906307a2d13a90602401602060405180830381865afa158015610b5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7e9190612cd4565b610b889190612ced565b905090565b600080546040517faea9107800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301529091169063aea9107890602401602060405180830381865afa158015610c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b889190612cd4565b6000610c8673ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333085611dc7565b6040517f6e553f65000000000000000000000000000000000000000000000000000000008152600481018390523360248201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636e553f65906044015b6020604051808303816000875af1158015610d1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3e9190612cd4565b92915050565b6040517fba08765200000000000000000000000000000000000000000000000000000000815260048101829052336024820181905260448201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063ba08765290606401610cfb565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af1158015610e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e849190612d2a565b506040517fdfe5ef4800000000000000000000000000000000000000000000000000000000815230600482015260248101839052604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063dfe5ef48906064016020604051808303816000875af1158015610f1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f439190612cd4565b506040517f0891d30a00000000000000000000000000000000000000000000000000000000815230600482015260248101839052600090819073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630891d30a9060440161012060405180830381865afa158015610fdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fff9190612d52565b50506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529698509396505073ffffffffffffffffffffffffffffffffffffffff87169463a9059cbb94503393508592506370a082319150602401602060405180830381865afa158015611080573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a49190612cd4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015260248201526044016020604051808303816000875af1158015611114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111389190612d2a565b506040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff82169063a9059cbb90339083906370a0823190602401602060405180830381865afa1580156111ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d19190612cd4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015260248201526044016020604051808303816000875af1158015611241573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112659190612d2a565b5050505050565b60003073ffffffffffffffffffffffffffffffffffffffff1663378efa376040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dd9190612e05565b905060005b828110156117825760005b8581101561176f57600087878381811061130957611309612e22565b905060200201602081019061131e91906129af565b905060008473ffffffffffffffffffffffffffffffffffffffff1663574e77953089898881811061135157611351612e22565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff90941660048501526020029190910135602483015250604401602060405180830381865afa1580156113c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ec9190612e05565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015291909116906370a0823190602401602060405180830381865afa15801561145a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147e9190612cd4565b90504287878681811061149357611493612e22565b90506020020135111580156114a85750600081115b8015611506575073ffffffffffffffffffffffffffffffffffffffff82166000908152600c60205260408120908888878181106114e7576114e7612e22565b602090810292909201358352508101919091526040016000205460ff16155b1561175a5761151482611e86565b60006115f48673ffffffffffffffffffffffffffffffffffffffff16632f9cd854308b8b8a81811061154857611548612e22565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff9485166004820152602090910292909201356024830152509087166044820152606401602060405180830381865afa1580156115c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ed9190612cd4565b83906122d8565b905080600960008282546116089190612e51565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600a602052604081208054839290611642908490612e51565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600b60205260408120805483929061167c908490612e68565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600c602052604081206001918a8a898181106116bb576116bb612e22565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff167f5758e413a9bfd3ec45a67abaa9ee2396cab143a505332bf7ab48c0e624b65f11828a8a8981811061173257611732612e22565b90506020020135604051611750929190918252602082015260400190565b60405180910390a2505b5050808061176790612c48565b9150506112ed565b508061177a81612c48565b9150506112e2565b505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166377aace1a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561180e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118329190612e05565b73ffffffffffffffffffffffffffffffffffffffff161461187f576040517ffb02114900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118c073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001687866122ed565b6040517f23e30c8b00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8816906323e30c8b9061193f9033907f0000000000000000000000000000000000000000000000000000000000000000908a9087908b908b90600401612e80565b6020604051808303816000875af115801561195e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119829190612cd4565b90507f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd981146119dd576040517f207df21c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611a1f73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016883088611dc7565b5060019695505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610d1a573d6000803e3d6000fd5b6040517fba89bebd00000000000000000000000000000000000000000000000000000000815230600482015260248101839052604481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063ba89bebd906064016020604051808303816000875af1158015611b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5a9190612cd4565b9392505050565b600d8181548110611b7157600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6040517f2b83cccd00000000000000000000000000000000000000000000000000000000815230600482015260248101839052604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632b83cccd906064016020604051808303816000875af1158015611c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c569190612cd4565b505050565b6007805461081890612bc5565b611c568383836123a6565b6040517f3e3972ee0000000000000000000000000000000000000000000000000000000081523060048201526024810183905273ffffffffffffffffffffffffffffffffffffffff82811660448301527f00000000000000000000000000000000000000000000000000000000000000001690633e3972ee9060640160408051808303816000875af1158015611d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d319190612f06565b50505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611dbe576040517f3dd1b30500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50600092915050565b60006040517f23b872dd0000000000000000000000000000000000000000000000000000000081528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080611265576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015260640161090e565b60005b600d548110156122d4576000600e6000600d8481548110611eac57611eac612e22565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902060010154600d805484908110611ef557611ef5612e22565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f909190612cd4565b611f9a9190612e51565b6009549091501561201e57600954611fc09082906b033b2e3c9fd0803ce800000061263e565b600e6000600d8581548110611fd757611fd7612e22565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400181208054909190612018908490612e68565b90915550505b6000600e6000600d858154811061203757612037612e22565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff9081168452838201949094526040928301822093881682526002909301909252812054600d80549193506120f291600e9184918890811061209d5761209d612e22565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff9081168452838201949094526040928301822054938a168252600a90522054906b033b2e3c9fd0803ce8000000612653565b90508181111561213f5761213f85838303600d878154811061211657612116612e22565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1691906122ed565b600d848154811061215257612152612e22565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156121c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ed9190612cd4565b600e6000600d878154811061220457612204612e22565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902060010155600d80548590811061224d5761224d612e22565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff9081169086167fad4a9acf26d8bba7a8cf1a41160d59be042ee554578e256c98d2ab74cdd435428484116122a35760006122ad565b6122ad8585612e51565b60405190815260200160405180910390a350505080806122cc90612c48565b915050611e89565b5050565b6000611b5a83670de0b6b3a76400008461265c565b60006040517fa9059cbb000000000000000000000000000000000000000000000000000000008152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080611d31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015260640161090e565b3360009081526008602052604090205460ff1661241f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e545255535445440000000000000000000000000000000000000000000000604482015260640161090e565b61242883611e86565b811561255357801561248b5781600960008282546124469190612e68565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600a602052604081208054849290612480908490612e68565b909155506125539050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600b602052604090205480156124f957808310156124c95760009290036124d0565b9091039060005b73ffffffffffffffffffffffffffffffffffffffff84166000908152600b602052604090208190555b82156125515782600960008282546125119190612e51565b909155505073ffffffffffffffffffffffffffffffffffffffff84166000908152600a60205260408120805485929061254b908490612e51565b90915550505b505b60005b600d54811015611d31576125cf600e6000600d848154811061257a5761257a612e22565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff90811684528382019490945260409283018220549389168252600a90522054906b033b2e3c9fd0803ce800000061267b565b600e6000600d84815481106125e6576125e6612e22565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff90811684528382019490945260409283018220938916825260029093019092529020558061263681612c48565b915050612556565b600061264b84838561265c565b949350505050565b600061264b8484845b82820281151584158583048514171661267457600080fd5b0492915050565b600061264b84848482820281151584158583048514171661269b57600080fd5b6001826001830304018115150290509392505050565b82805482825590600052602060002090810192821561272b579160200282015b8281111561272b57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9091161782556020909201916001909101906126d1565b5061273792915061273b565b5090565b5b80821115612737576000815560010161273c565b600060208083528351808285015260005b8181101561277d57858101830151858201604001528201612761565b8181111561278f576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b73ffffffffffffffffffffffffffffffffffffffff811681146127e557600080fd5b50565b80356127f3816127c3565b919050565b6000806040838503121561280b57600080fd5b8235612816816127c3565b946020939093013593505050565b80151581146127e557600080fd5b6000806040838503121561284557600080fd5b8235612850816127c3565b9150602083013561286081612824565b809150509250929050565b6000806000806080858703121561288157600080fd5b5050823594602084013594506040840135936060013592509050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208083850312156128df57600080fd5b823567ffffffffffffffff808211156128f757600080fd5b818501915085601f83011261290b57600080fd5b81358181111561291d5761291d61289d565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156129605761296061289d565b60405291825284820192508381018501918883111561297e57600080fd5b938501935b828510156129a357612994856127e8565b84529385019392850192612983565b98975050505050505050565b6000602082840312156129c157600080fd5b8135611b5a816127c3565b6000602082840312156129de57600080fd5b5035919050565b600080604083850312156129f857600080fd5b50508035926020909101359150565b60008083601f840112612a1957600080fd5b50813567ffffffffffffffff811115612a3157600080fd5b6020830191508360208260051b8501011115612a4c57600080fd5b9250929050565b60008060008060408587031215612a6957600080fd5b843567ffffffffffffffff80821115612a8157600080fd5b612a8d88838901612a07565b90965094506020870135915080821115612aa657600080fd5b50612ab387828801612a07565b95989497509550505050565b600080600080600060808688031215612ad757600080fd5b8535612ae2816127c3565b94506020860135612af2816127c3565b935060408601359250606086013567ffffffffffffffff80821115612b1657600080fd5b818801915088601f830112612b2a57600080fd5b813581811115612b3957600080fd5b896020828501011115612b4b57600080fd5b9699959850939650602001949392505050565b600080600060608486031215612b7357600080fd5b8335612b7e816127c3565b9250602084013591506040840135612b9581612824565b809150509250925092565b60008060408385031215612bb357600080fd5b823591506020830135612860816127c3565b600181811c90821680612bd957607f821691505b60208210811415612c13577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612c7a57612c7a612c19565b5060010190565b60008183548391508460005260208060002060005b83811015612cc857815473ffffffffffffffffffffffffffffffffffffffff1685529382019360019182019101612c96565b50929695505050505050565b600060208284031215612ce657600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612d2557612d25612c19565b500290565b600060208284031215612d3c57600080fd5b8151611b5a81612824565b80516127f3816127c3565b60008060008060008060008060006101208a8c031215612d7157600080fd5b8951612d7c816127c3565b60208b015190995065ffffffffffff81168114612d9857600080fd5b60408b0151909850612da9816127c3565b60608b01519097506bffffffffffffffffffffffff81168114612dcb57600080fd5b9550612dd960808b01612d47565b945060a08a0151935060c08a0151925060e08a015191506101008a015190509295985092959850929598565b600060208284031215612e1757600080fd5b8151611b5a816127c3565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082821015612e6357612e63612c19565b500390565b60008219821115612e7b57612e7b612c19565b500190565b600073ffffffffffffffffffffffffffffffffffffffff808916835280881660208401525085604083015284606083015260a060808301528260a0830152828460c0840137600060c0848401015260c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501168301019050979650505050505050565b60008060408385031215612f1957600080fd5b8251612f24816127c3565b6020840151909250612860816127c356fea26469706673582212202258a1a210a06d3f664199b91828b2976f67b865741fa21d3f5c75d49159948164736f6c634300080b0033a2646970667358221220365d39c49ca26c6acf9a427a78b07264e08f00b87fd5141380f31fc16cbf784264736f6c634300080b0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000cd5760003560e01c806382d254ea116200007f57806396d64879116200006257806396d64879146200022a578063bbe451d51462000250578063e5711ffc146200034957600080fd5b806382d254ea14620001f257806393d4750c146200020957600080fd5b80633c4598d011620000b45780633c4598d0146200013d5780633cad2dcd14620001a4578063562c478414620001bb57600080fd5b80631393916a14620000d2578063378efa3714620000eb575b600080fd5b620000e9620000e3366004620008fc565b62000382565b005b620001137f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b620000e96200014e366004620008fc565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260086020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b62000113620001b5366004620009bf565b62000489565b620001e1620001cc36600462000a90565b60086020526000908152604090205460ff1681565b604051901515815260200162000134565b620000e96200020336600462000b4b565b6200079a565b62000212601f81565b60405165ffffffffffff909116815260200162000134565b620001e16200023b36600462000a90565b60006020819052908152604090205460ff1681565b600254600354600454600554600654600754620002d59573ffffffffffffffffffffffffffffffffffffffff9081169516939291906fffffffffffffffffffffffffffffffff811690700100000000000000000000000000000000810461ffff16907201000000000000000000000000000000000000900467ffffffffffffffff1688565b6040805173ffffffffffffffffffffffffffffffffffffffff998a16815298909716602089015295870194909452606086019290925260808501526fffffffffffffffffffffffffffffffff1660a084015261ffff1660c083015267ffffffffffffffff1660e08201526101000162000134565b620001136200035a36600462000a90565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b3360009081526020819052604090205460ff1662000401576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e54525553544544000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000818152602081815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526008602052604081205460ff16620004e9576040517fa2a94ace00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166377aace1a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200056c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000592919062000bb6565b73ffffffffffffffffffffffffffffffffffffffff1614620005e0576040517ffb02114900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516101008101825260025473ffffffffffffffffffffffffffffffffffffffff90811682526003541660208201526004549181019190915260055460608083019190915260065460808301526007547201000000000000000000000000000000000000810467ffffffffffffffff1660a0840152601f60c0840152700100000000000000000000000000000000900461ffff1660e083015284901b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000858673ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200070e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000734919062000bb6565b6007546040516fffffffffffffffffffffffffffffffff9091169086906009906200075f90620008c8565b620007709695949392919062000c2e565b8190604051809103906000f590508015801562000791573d6000803e3d6000fd5b50949350505050565b3360009081526020819052604090205460ff1662000815576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e5452555354454400000000000000000000000000000000000000000000006044820152606401620003f8565b60005b8151811015620008c35781818151811062000837576200083762000d0d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663201e81a8846040518263ffffffff1660e01b815260040162000879919062000d3c565b600060405180830381600087803b1580156200089457600080fd5b505af1158015620008a9573d6000803e3d6000fd5b505050508080620008ba9062000d98565b91505062000818565b505050565b613e318062000dfa83390190565b73ffffffffffffffffffffffffffffffffffffffff81168114620008f957600080fd5b50565b600080604083850312156200091057600080fd5b82356200091d81620008d6565b9150602083013580151581146200093357600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715620009b757620009b76200093e565b604052919050565b60008060408385031215620009d357600080fd5b8235620009e081620008d6565b915060208381013567ffffffffffffffff80821115620009ff57600080fd5b818601915086601f83011262000a1457600080fd5b81358181111562000a295762000a296200093e565b62000a5b847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016200096d565b9150808252878482850101111562000a7257600080fd5b80848401858401376000848284010152508093505050509250929050565b60006020828403121562000aa357600080fd5b813562000ab081620008d6565b9392505050565b600082601f83011262000ac957600080fd5b8135602067ffffffffffffffff82111562000ae85762000ae86200093e565b8160051b62000af98282016200096d565b928352848101820192828101908785111562000b1457600080fd5b83870192505b8483101562000b4057823562000b3081620008d6565b8252918301919083019062000b1a565b979650505050505050565b6000806040838503121562000b5f57600080fd5b823567ffffffffffffffff8082111562000b7857600080fd5b62000b868683870162000ab7565b9350602085013591508082111562000b9d57600080fd5b5062000bac8582860162000ab7565b9150509250929050565b60006020828403121562000bc957600080fd5b815162000ab081620008d6565b6000815480845260208085019450836000528060002060005b8381101562000c2357815473ffffffffffffffffffffffffffffffffffffffff168752958201956001918201910162000bef565b509495945050505050565b60006101a073ffffffffffffffffffffffffffffffffffffffff808a168452808916602085015280881660408501526fffffffffffffffffffffffffffffffff871660608501528086511660808501528060208701511660a085015250604085015160c0840152606085015160e0840152608085015161010084015267ffffffffffffffff60a08601511661012084015260c085015162000cda61014085018265ffffffffffff169052565b5060e085015161ffff16610160840152610180830181905262000d008184018562000bd6565b9998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020808252825182820181905260009190848201906040850190845b8181101562000d8c57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010162000d58565b50909695505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000df2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fe6101406040523480156200001257600080fd5b5060405162003e3138038062003e31833981016040819052620000359162000994565b858133888887878383846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200007d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a3919062000ada565b6001600160a01b03808416608090815283821660a081815284841660c09081526001600160801b038a1660e09081528951600080549188166001600160a01b031992831617815560208c015160018054919099169216919091179096556040808b015160025560608b0151600355948a01516004908155928a015160058054938c0151928c015161ffff16600160701b0261ffff60701b1965ffffffffffff90941668010000000000000000026001600160701b03199095166001600160401b0390931692909217939093179190911617905582516306fdde0360e01b81529251899489946306fdde039381810193918290030181865afa158015620001ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001d7919081019062000b34565b604051602001620001e9919062000bd2565b604051602081830303815290604052600690805190602001906200020f92919062000721565b50836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200024f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000279919081019062000b34565b6040516020016200028b919062000c00565b60405160208183030381529060405260079080519060200190620002b192919062000721565b5060805160405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529085169063095ea7b3906044016020604051808303816000875af115801562000307573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200032d919062000c2e565b50602081015160805160405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af115801562000387573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003ad919062000c2e565b505050505050600060a0516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200041c919062000c52565b60ff1690506200042e81600a62000d8c565b610100526200043f81601262000d9a565b6200044c90600a62000d8c565b6101205260c05160a05160405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015620004a7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004cd919062000c2e565b505050506001600160a01b038316600081815260086020908152604091829020805460ff1916600190811790915591519182529193507fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d98692500160405180910390a2506200053d82600162000672565b80516200055290600d906020840190620007b0565b5050506000856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000596573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005bc919062000c52565b60ff1690506000856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000602573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000628919062000c52565b60ff169050808211620006475762000641828262000d9a565b62000653565b62000653818362000d9a565b6200066090600a62000d8c565b6010555062000df19650505050505050565b3360009081526008602052604090205460ff16620006c25760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640160405180910390fd5b6001600160a01b038216600081815260086020908152604091829020805460ff191685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b8280546200072f9062000db4565b90600052602060002090601f0160209004810192826200075357600085556200079e565b82601f106200076e57805160ff19168380011785556200079e565b828001600101855582156200079e579182015b828111156200079e57825182559160200191906001019062000781565b50620007ac92915062000808565b5090565b8280548282559060005260206000209081019282156200079e579160200282015b828111156200079e57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620007d1565b5b80821115620007ac576000815560010162000809565b6001600160a01b03811681146200083557600080fd5b50565b805162000845816200081f565b919050565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b03811182821017156200088657620008866200084a565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620008b757620008b76200084a565b604052919050565b80516001600160401b03811681146200084557600080fd5b805165ffffffffffff811681146200084557600080fd5b805161ffff811681146200084557600080fd5b600082601f8301126200091357600080fd5b815160206001600160401b038211156200093157620009316200084a565b8160051b620009428282016200088c565b92835284810182019282810190878511156200095d57600080fd5b83870192505b848310156200098957825162000979816200081f565b8252918301919083019062000963565b979650505050505050565b6000806000806000808688036101a0811215620009b057600080fd5b8751620009bd816200081f565b6020890151909750620009d0816200081f565b6040890151909650620009e3816200081f565b60608901519095506001600160801b038116811462000a0157600080fd5b9350610100607f19820181131562000a1857600080fd5b62000a2262000860565b9150608089015162000a34816200081f565b825262000a4460a08a0162000838565b602083015260c0890151604083015260e08901516060830152880151608082015262000a746101208901620008bf565b60a082015262000a886101408901620008d7565b60c082015262000a9c6101608901620008ee565b60e08201526101808801519092506001600160401b0381111562000abf57600080fd5b62000acd89828a0162000901565b9150509295509295509295565b60006020828403121562000aed57600080fd5b815162000afa816200081f565b9392505050565b60005b8381101562000b1e57818101518382015260200162000b04565b8381111562000b2e576000848401525b50505050565b60006020828403121562000b4757600080fd5b81516001600160401b038082111562000b5f57600080fd5b818401915084601f83011262000b7457600080fd5b81518181111562000b895762000b896200084a565b62000b9e601f8201601f19166020016200088c565b915080825285602082850101111562000bb657600080fd5b62000bc981602084016020860162000b01565b50949350505050565b6000825162000be681846020870162000b01565b671020b230b83a32b960c11b920191825250600801919050565b6000825162000c1481846020870162000b01565b6716b0b230b83a32b960c11b920191825250600801919050565b60006020828403121562000c4157600080fd5b8151801515811462000afa57600080fd5b60006020828403121562000c6557600080fd5b815160ff8116811462000afa57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000cce57816000190482111562000cb25762000cb262000c77565b8085161562000cc057918102915b93841c939080029062000c92565b509250929050565b60008262000ce75750600162000d86565b8162000cf65750600062000d86565b816001811462000d0f576002811462000d1a5762000d3a565b600191505062000d86565b60ff84111562000d2e5762000d2e62000c77565b50506001821b62000d86565b5060208310610133831016604e8410600b841016171562000d5f575081810a62000d86565b62000d6b838362000c8d565b806000190482111562000d825762000d8262000c77565b0290505b92915050565b600062000afa838362000cd6565b60008282101562000daf5762000daf62000c77565b500390565b600181811c9082168062000dc957607f821691505b6020821081141562000deb57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516101005161012051612f6b62000ec66000396000818161077d0152610adc0152600081816107560152610ab3015260006106c20152600081816105eb01528181610bce0152610c5e01526000818161047d015281816107c401528181610b1301528181610cbb01528181610d8301528181610e02015281816118990152818161190f015281816119f70152611d3b0152600081816104f601528181610ec101528181610f93015281816117a501528181611ad801528181611bd40152611cc50152612f6b6000f3fe608060405234801561001057600080fd5b50600436106102d35760003560e01c80636f307dc311610186578063b90d3d0c116100e3578063d01c6f2911610097578063da4ca41311610071578063da4ca413146107f9578063ed3437f814610802578063f51e181a1461044657600080fd5b8063d01c6f291461079f578063d4b83992146107bf578063d9d98ce4146107e657600080fd5b8063cc074d49116100c8578063cc074d491461073e578063cce5938614610751578063ce4b5bbe1461077857600080fd5b8063b90d3d0c14610705578063c39a3b291461072c57600080fd5b80638d8475c41161013a57806396d648791161011f57806396d6487914610687578063b484972a146106aa578063b8c15a9f146106bd57600080fd5b80638d8475c41461066c57806395d89b411461067f57600080fd5b806375b2cda81161016b57806375b2cda8146106295780637bb7bed1146106325780638237e5381461064557600080fd5b80636f307dc3146105e65780636fd5ae151461060d57600080fd5b8063378efa3711610234578063572acb9f116101e8578063613255ab116101cd578063613255ab146105a457806362e10b4e146105b757806364c56e3c146105ca57600080fd5b8063572acb9f1461057e5780635cffe9de1461059157600080fd5b80634aae9fed116102195780634aae9fed1461054557806351c39ea11461055857806353e0719e1461056b57600080fd5b8063378efa37146104f1578063468f02d21461053d57600080fd5b8063201e81a81161028b57806327b327d01161027057806327b327d01461045c578063295a5212146104b357806329a43608146104d157600080fd5b8063201e81a814610433578063226778491461044657600080fd5b80630e122423116102bc5780630e122423146103cd5780631393916a1461040b57806314282f581461042057600080fd5b806306fdde03146102d8578063083118d5146102f6575b600080fd5b6102e061080b565b6040516102ed9190612750565b60405180910390f35b6000546001546002546003546004546005546103649573ffffffffffffffffffffffffffffffffffffffff90811695169392919067ffffffffffffffff81169068010000000000000000810465ffffffffffff16906e010000000000000000000000000000900461ffff1688565b6040805173ffffffffffffffffffffffffffffffffffffffff998a168152989097166020890152958701949094526060860192909252608085015267ffffffffffffffff1660a084015265ffffffffffff1660c083015261ffff1660e0820152610100016102ed565b6103fb6103db3660046127f8565b600c60209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016102ed565b61041e610419366004612832565b610899565b005b61041e61042e36600461286b565b6109a1565b61041e6104413660046128cc565b6109bc565b61044e610a8b565b6040519081526020016102ed565b6001546002546040805173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116825290931660208401528201526060016102ed565b6005546e010000000000000000000000000000900461ffff1661044e565b61044e6104df3660046129af565b600a6020526000908152604090205481565b6105187f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102ed565b61044e610b8d565b61044e6105533660046129cc565b610c42565b61044e6105663660046129cc565b610d44565b61041e6105793660046129e5565b610dc7565b61041e61058c366004612a53565b61126c565b6103fb61059f366004612abf565b61178a565b61044e6105b23660046129af565b611a2c565b61044e6105c53660046129e5565b611a99565b6003546004545b604080519283526020830191909152016102ed565b6105187f000000000000000000000000000000000000000000000000000000000000000081565b60055468010000000000000000900465ffffffffffff1661044e565b61044e600f5481565b6105186106403660046129cc565b611b61565b61044e7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd981565b61041e61067a3660046129e5565b611b98565b6102e0611c5b565b6103fb6106953660046129af565b60086020526000908152604090205460ff1681565b61041e6106b8366004612b5e565b611c68565b6106e47f000000000000000000000000000000000000000000000000000000000000000081565b6040516fffffffffffffffffffffffffffffffff90911681526020016102ed565b6105d16107133660046129af565b600e602052600090815260409020805460019091015482565b60055467ffffffffffffffff1661044e565b61041e61074c366004612ba0565b611c73565b61044e7f000000000000000000000000000000000000000000000000000000000000000081565b61044e7f000000000000000000000000000000000000000000000000000000000000000081565b61044e6107ad3660046129af565b600b6020526000908152604090205481565b6105187f000000000000000000000000000000000000000000000000000000000000000081565b61044e6107f43660046127f8565b611d37565b61044e60095481565b61044e60105481565b6006805461081890612bc5565b80601f016020809104026020016040519081016040528092919081815260200182805461084490612bc5565b80156108915780601f1061086657610100808354040283529160200191610891565b820191906000526020600020905b81548152906001019060200180831161087457829003601f168201915b505050505081565b3360009081526008602052604090205460ff16610917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e54525553544544000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526008602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b600f80549060006109b183612c48565b919050555050505050565b3360009081526008602052604090205460ff16610a35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e545255535445440000000000000000000000000000000000000000000000604482015260640161090e565b8051610a4890600d9060208401906126b1565b50600d604051610a589190612c81565b604051908190038120907f45fae61b076570d71d045d3f03e5fa6b6401bebddde54161c7126c56a5ce7d6590600090a250565b6040517f07a2d13a0000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000009073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906307a2d13a90602401602060405180830381865afa158015610b5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7e9190612cd4565b610b889190612ced565b905090565b600080546040517faea9107800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301529091169063aea9107890602401602060405180830381865afa158015610c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b889190612cd4565b6000610c8673ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333085611dc7565b6040517f6e553f65000000000000000000000000000000000000000000000000000000008152600481018390523360248201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636e553f65906044015b6020604051808303816000875af1158015610d1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3e9190612cd4565b92915050565b6040517fba08765200000000000000000000000000000000000000000000000000000000815260048101829052336024820181905260448201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063ba08765290606401610cfb565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af1158015610e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e849190612d2a565b506040517fdfe5ef4800000000000000000000000000000000000000000000000000000000815230600482015260248101839052604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063dfe5ef48906064016020604051808303816000875af1158015610f1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f439190612cd4565b506040517f0891d30a00000000000000000000000000000000000000000000000000000000815230600482015260248101839052600090819073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630891d30a9060440161012060405180830381865afa158015610fdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fff9190612d52565b50506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529698509396505073ffffffffffffffffffffffffffffffffffffffff87169463a9059cbb94503393508592506370a082319150602401602060405180830381865afa158015611080573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a49190612cd4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015260248201526044016020604051808303816000875af1158015611114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111389190612d2a565b506040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff82169063a9059cbb90339083906370a0823190602401602060405180830381865afa1580156111ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d19190612cd4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015260248201526044016020604051808303816000875af1158015611241573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112659190612d2a565b5050505050565b60003073ffffffffffffffffffffffffffffffffffffffff1663378efa376040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dd9190612e05565b905060005b828110156117825760005b8581101561176f57600087878381811061130957611309612e22565b905060200201602081019061131e91906129af565b905060008473ffffffffffffffffffffffffffffffffffffffff1663574e77953089898881811061135157611351612e22565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff90941660048501526020029190910135602483015250604401602060405180830381865afa1580156113c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ec9190612e05565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015291909116906370a0823190602401602060405180830381865afa15801561145a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147e9190612cd4565b90504287878681811061149357611493612e22565b90506020020135111580156114a85750600081115b8015611506575073ffffffffffffffffffffffffffffffffffffffff82166000908152600c60205260408120908888878181106114e7576114e7612e22565b602090810292909201358352508101919091526040016000205460ff16155b1561175a5761151482611e86565b60006115f48673ffffffffffffffffffffffffffffffffffffffff16632f9cd854308b8b8a81811061154857611548612e22565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff9485166004820152602090910292909201356024830152509087166044820152606401602060405180830381865afa1580156115c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ed9190612cd4565b83906122d8565b905080600960008282546116089190612e51565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600a602052604081208054839290611642908490612e51565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600b60205260408120805483929061167c908490612e68565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600c602052604081206001918a8a898181106116bb576116bb612e22565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff167f5758e413a9bfd3ec45a67abaa9ee2396cab143a505332bf7ab48c0e624b65f11828a8a8981811061173257611732612e22565b90506020020135604051611750929190918252602082015260400190565b60405180910390a2505b5050808061176790612c48565b9150506112ed565b508061177a81612c48565b9150506112e2565b505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166377aace1a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561180e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118329190612e05565b73ffffffffffffffffffffffffffffffffffffffff161461187f576040517ffb02114900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118c073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001687866122ed565b6040517f23e30c8b00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8816906323e30c8b9061193f9033907f0000000000000000000000000000000000000000000000000000000000000000908a9087908b908b90600401612e80565b6020604051808303816000875af115801561195e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119829190612cd4565b90507f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd981146119dd576040517f207df21c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611a1f73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016883088611dc7565b5060019695505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610d1a573d6000803e3d6000fd5b6040517fba89bebd00000000000000000000000000000000000000000000000000000000815230600482015260248101839052604481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063ba89bebd906064016020604051808303816000875af1158015611b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5a9190612cd4565b9392505050565b600d8181548110611b7157600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6040517f2b83cccd00000000000000000000000000000000000000000000000000000000815230600482015260248101839052604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632b83cccd906064016020604051808303816000875af1158015611c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c569190612cd4565b505050565b6007805461081890612bc5565b611c568383836123a6565b6040517f3e3972ee0000000000000000000000000000000000000000000000000000000081523060048201526024810183905273ffffffffffffffffffffffffffffffffffffffff82811660448301527f00000000000000000000000000000000000000000000000000000000000000001690633e3972ee9060640160408051808303816000875af1158015611d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d319190612f06565b50505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611dbe576040517f3dd1b30500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50600092915050565b60006040517f23b872dd0000000000000000000000000000000000000000000000000000000081528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080611265576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015260640161090e565b60005b600d548110156122d4576000600e6000600d8481548110611eac57611eac612e22565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902060010154600d805484908110611ef557611ef5612e22565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f909190612cd4565b611f9a9190612e51565b6009549091501561201e57600954611fc09082906b033b2e3c9fd0803ce800000061263e565b600e6000600d8581548110611fd757611fd7612e22565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400181208054909190612018908490612e68565b90915550505b6000600e6000600d858154811061203757612037612e22565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff9081168452838201949094526040928301822093881682526002909301909252812054600d80549193506120f291600e9184918890811061209d5761209d612e22565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff9081168452838201949094526040928301822054938a168252600a90522054906b033b2e3c9fd0803ce8000000612653565b90508181111561213f5761213f85838303600d878154811061211657612116612e22565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1691906122ed565b600d848154811061215257612152612e22565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156121c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ed9190612cd4565b600e6000600d878154811061220457612204612e22565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902060010155600d80548590811061224d5761224d612e22565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff9081169086167fad4a9acf26d8bba7a8cf1a41160d59be042ee554578e256c98d2ab74cdd435428484116122a35760006122ad565b6122ad8585612e51565b60405190815260200160405180910390a350505080806122cc90612c48565b915050611e89565b5050565b6000611b5a83670de0b6b3a76400008461265c565b60006040517fa9059cbb000000000000000000000000000000000000000000000000000000008152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080611d31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015260640161090e565b3360009081526008602052604090205460ff1661241f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e545255535445440000000000000000000000000000000000000000000000604482015260640161090e565b61242883611e86565b811561255357801561248b5781600960008282546124469190612e68565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600a602052604081208054849290612480908490612e68565b909155506125539050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600b602052604090205480156124f957808310156124c95760009290036124d0565b9091039060005b73ffffffffffffffffffffffffffffffffffffffff84166000908152600b602052604090208190555b82156125515782600960008282546125119190612e51565b909155505073ffffffffffffffffffffffffffffffffffffffff84166000908152600a60205260408120805485929061254b908490612e51565b90915550505b505b60005b600d54811015611d31576125cf600e6000600d848154811061257a5761257a612e22565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff90811684528382019490945260409283018220549389168252600a90522054906b033b2e3c9fd0803ce800000061267b565b600e6000600d84815481106125e6576125e6612e22565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff90811684528382019490945260409283018220938916825260029093019092529020558061263681612c48565b915050612556565b600061264b84838561265c565b949350505050565b600061264b8484845b82820281151584158583048514171661267457600080fd5b0492915050565b600061264b84848482820281151584158583048514171661269b57600080fd5b6001826001830304018115150290509392505050565b82805482825590600052602060002090810192821561272b579160200282015b8281111561272b57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9091161782556020909201916001909101906126d1565b5061273792915061273b565b5090565b5b80821115612737576000815560010161273c565b600060208083528351808285015260005b8181101561277d57858101830151858201604001528201612761565b8181111561278f576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b73ffffffffffffffffffffffffffffffffffffffff811681146127e557600080fd5b50565b80356127f3816127c3565b919050565b6000806040838503121561280b57600080fd5b8235612816816127c3565b946020939093013593505050565b80151581146127e557600080fd5b6000806040838503121561284557600080fd5b8235612850816127c3565b9150602083013561286081612824565b809150509250929050565b6000806000806080858703121561288157600080fd5b5050823594602084013594506040840135936060013592509050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208083850312156128df57600080fd5b823567ffffffffffffffff808211156128f757600080fd5b818501915085601f83011261290b57600080fd5b81358181111561291d5761291d61289d565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156129605761296061289d565b60405291825284820192508381018501918883111561297e57600080fd5b938501935b828510156129a357612994856127e8565b84529385019392850192612983565b98975050505050505050565b6000602082840312156129c157600080fd5b8135611b5a816127c3565b6000602082840312156129de57600080fd5b5035919050565b600080604083850312156129f857600080fd5b50508035926020909101359150565b60008083601f840112612a1957600080fd5b50813567ffffffffffffffff811115612a3157600080fd5b6020830191508360208260051b8501011115612a4c57600080fd5b9250929050565b60008060008060408587031215612a6957600080fd5b843567ffffffffffffffff80821115612a8157600080fd5b612a8d88838901612a07565b90965094506020870135915080821115612aa657600080fd5b50612ab387828801612a07565b95989497509550505050565b600080600080600060808688031215612ad757600080fd5b8535612ae2816127c3565b94506020860135612af2816127c3565b935060408601359250606086013567ffffffffffffffff80821115612b1657600080fd5b818801915088601f830112612b2a57600080fd5b813581811115612b3957600080fd5b896020828501011115612b4b57600080fd5b9699959850939650602001949392505050565b600080600060608486031215612b7357600080fd5b8335612b7e816127c3565b9250602084013591506040840135612b9581612824565b809150509250925092565b60008060408385031215612bb357600080fd5b823591506020830135612860816127c3565b600181811c90821680612bd957607f821691505b60208210811415612c13577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612c7a57612c7a612c19565b5060010190565b60008183548391508460005260208060002060005b83811015612cc857815473ffffffffffffffffffffffffffffffffffffffff1685529382019360019182019101612c96565b50929695505050505050565b600060208284031215612ce657600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612d2557612d25612c19565b500290565b600060208284031215612d3c57600080fd5b8151611b5a81612824565b80516127f3816127c3565b60008060008060008060008060006101208a8c031215612d7157600080fd5b8951612d7c816127c3565b60208b015190995065ffffffffffff81168114612d9857600080fd5b60408b0151909850612da9816127c3565b60608b01519097506bffffffffffffffffffffffff81168114612dcb57600080fd5b9550612dd960808b01612d47565b945060a08a0151935060c08a0151925060e08a015191506101008a015190509295985092959850929598565b600060208284031215612e1757600080fd5b8151611b5a816127c3565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082821015612e6357612e63612c19565b500390565b60008219821115612e7b57612e7b612c19565b500190565b600073ffffffffffffffffffffffffffffffffffffffff808916835280881660208401525085604083015284606083015260a060808301528260a0830152828460c0840137600060c0848401015260c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501168301019050979650505050505050565b60008060408385031215612f1957600080fd5b8251612f24816127c3565b6020840151909250612860816127c356fea26469706673582212202258a1a210a06d3f664199b91828b2976f67b865741fa21d3f5c75d49159948164736f6c634300080b0033a2646970667358221220365d39c49ca26c6acf9a427a78b07264e08f00b87fd5141380f31fc16cbf784264736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "setRewardTokens(address[],address[])": {
        "params": {
          "_adapters": "array of adapters to update the rewards tokens on",
          "_rewardTokens": "array of rewards tokens addresses"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AdapterAdded(address,address)": {
        "notice": "Logs the deployment of the adapter"
      }
    },
    "kind": "user",
    "methods": {
      "DEFAULT_LEVEL()": {
        "notice": "Sets level to `31` by default, which keeps all Divider lifecycle methods public (`issue`, `combine`, `collect`, etc), but not the `onRedeem` hook."
      },
      "adapters(address)": {
        "notice": "target -> adapter"
      },
      "divider()": {
        "notice": "Sense core Divider address"
      },
      "factoryParams()": {
        "notice": "params for adapters deployed with this factory"
      },
      "setRewardTokens(address[],address[])": {
        "notice": "Replace existing reward tokens array with a new one and update adapters passed"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17157,
        "contract": "@sense-finance/v1-core/src/tests/test-helpers/mocks/MockFactory.sol:Mock4626CropsFactory",
        "label": "isTrusted",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8964,
        "contract": "@sense-finance/v1-core/src/tests/test-helpers/mocks/MockFactory.sol:Mock4626CropsFactory",
        "label": "adapters",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 8968,
        "contract": "@sense-finance/v1-core/src/tests/test-helpers/mocks/MockFactory.sol:Mock4626CropsFactory",
        "label": "factoryParams",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(FactoryParams)8985_storage"
      },
      {
        "astId": 14368,
        "contract": "@sense-finance/v1-core/src/tests/test-helpers/mocks/MockFactory.sol:Mock4626CropsFactory",
        "label": "targets",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14371,
        "contract": "@sense-finance/v1-core/src/tests/test-helpers/mocks/MockFactory.sol:Mock4626CropsFactory",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(FactoryParams)8985_storage": {
        "encoding": "inplace",
        "label": "struct BaseFactory.FactoryParams",
        "members": [
          {
            "astId": 8970,
            "contract": "@sense-finance/v1-core/src/tests/test-helpers/mocks/MockFactory.sol:Mock4626CropsFactory",
            "label": "oracle",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8972,
            "contract": "@sense-finance/v1-core/src/tests/test-helpers/mocks/MockFactory.sol:Mock4626CropsFactory",
            "label": "stake",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 8974,
            "contract": "@sense-finance/v1-core/src/tests/test-helpers/mocks/MockFactory.sol:Mock4626CropsFactory",
            "label": "stakeSize",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8976,
            "contract": "@sense-finance/v1-core/src/tests/test-helpers/mocks/MockFactory.sol:Mock4626CropsFactory",
            "label": "minm",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8978,
            "contract": "@sense-finance/v1-core/src/tests/test-helpers/mocks/MockFactory.sol:Mock4626CropsFactory",
            "label": "maxm",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8980,
            "contract": "@sense-finance/v1-core/src/tests/test-helpers/mocks/MockFactory.sol:Mock4626CropsFactory",
            "label": "ifee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint128"
          },
          {
            "astId": 8982,
            "contract": "@sense-finance/v1-core/src/tests/test-helpers/mocks/MockFactory.sol:Mock4626CropsFactory",
            "label": "mode",
            "offset": 16,
            "slot": "5",
            "type": "t_uint16"
          },
          {
            "astId": 8984,
            "contract": "@sense-finance/v1-core/src/tests/test-helpers/mocks/MockFactory.sol:Mock4626CropsFactory",
            "label": "tilt",
            "offset": 18,
            "slot": "5",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}